<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>plantegg</title>
  
  <subtitle>java tcp mysql performance network docker Linux</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://plantegg.github.io/"/>
  <updated>2024-11-20T10:00:55.208Z</updated>
  <id>https://plantegg.github.io/</id>
  
  <author>
    <name>twitter @plantegg</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于本博</title>
    <link href="https://plantegg.github.io/2117/06/07/%E5%85%B3%E4%BA%8E%E6%9C%AC%E5%8D%9A/"/>
    <id>https://plantegg.github.io/2117/06/07/关于本博/</id>
    <published>2117-06-07T10:30:03.000Z</published>
    <updated>2024-11-20T10:00:55.208Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于本博"><a href="#关于本博" class="headerlink" title="关于本博"></a>关于本博</h2><p>find me on twitter: <a href="https://twitter.com/plantegg" target="_blank" rel="noopener">@plantegg</a></p><p>Github: <a href="https://github.com/plantegg/programmer_case" target="_blank" rel="noopener">欢迎star</a> </p><p>知识星球：<a href="https://t.zsxq.com/0cSFEUh2J" target="_blank" rel="noopener">https://t.zsxq.com/0cSFEUh2J</a></p><p>关注基础知识，一次把问题搞清楚，从案例出发深挖相关知识。</p><p>以前觉得自己一看就懂，实际是一问就打鼓，一用就糊涂。所以现在开始记录并总结再联系案例，一般是先把零散知识记录下来（看到过），慢慢地相关知识积累更多，直到碰到实践案例或是有点领悟到于是发现这块知识可以整理成一篇系统些的文章（基本快懂了）。</p><p>“技术变化太快，容易过时”，我的看法是网络知识、操作系统、计算机原理等核心概念知识的寿命会比你的职业生涯还长。这些都是40岁之后还会还会很有用</p><p><a href="https://plantegg.github.io/2018/05/23/%E5%A6%82%E4%BD%95%E5%9C%A8%E5%B7%A5%E4%BD%9C%E4%B8%AD%E5%AD%A6%E4%B9%A0/">如何在工作中学习</a> 所有方法我都记录在这篇文章中了，希望对你能有所帮助。</p><p>所有新文章从<a href="https://plantegg.github.io/archives">这里可以看到</a>，即使再简单的一篇总结我可以持续总结三五年，有新的发现、感悟都是直接在原文上增减，不会发表新的文章。</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20220421102225491.png" alt="image-20220421102225491"></p><p>为什么写博客而不是公众号，我见过20年前的互联网，深度依赖搜索引擎，所以还是喜欢博客。另外技术类文章更适合电脑阅读（随时摘录、实验）</p><h2 id="精华文章推荐（2021年前）"><a href="#精华文章推荐（2021年前）" class="headerlink" title="精华文章推荐（2021年前）"></a>精华文章推荐（2021年前）</h2><h4 id="在2010年前后MySQL、PG、Oracle数据库在使用NUMA的时候碰到了性能问题，流传最广的这篇-MySQL-–-The-MySQL-“swap-insanity”-problem-and-the-effects-of-the-NUMA-architecture-http-blog-jcole-us-2010-09-28-mysql-swap-insanity-and-the-numa-architecture-文章描述了性能问题的原因-文章中把原因找错了-以及解决方案：关闭NUMA。-实际这个原因是kernel实现的一个低级bug，这个Bug在2014年修复了https-github-com-torvalds-linux-commit-4f9b16a64753d0bb607454347036dc997fd03b82，但是修复这么多年后仍然以讹传讹，这篇文章希望正本清源、扭转错误的认识。"><a href="#在2010年前后MySQL、PG、Oracle数据库在使用NUMA的时候碰到了性能问题，流传最广的这篇-MySQL-–-The-MySQL-“swap-insanity”-problem-and-the-effects-of-the-NUMA-architecture-http-blog-jcole-us-2010-09-28-mysql-swap-insanity-and-the-numa-architecture-文章描述了性能问题的原因-文章中把原因找错了-以及解决方案：关闭NUMA。-实际这个原因是kernel实现的一个低级bug，这个Bug在2014年修复了https-github-com-torvalds-linux-commit-4f9b16a64753d0bb607454347036dc997fd03b82，但是修复这么多年后仍然以讹传讹，这篇文章希望正本清源、扭转错误的认识。" class="headerlink" title="在2010年前后MySQL、PG、Oracle数据库在使用NUMA的时候碰到了性能问题，流传最广的这篇  MySQL – The MySQL “swap insanity” problem and the effects of the NUMA architecture http://blog.jcole.us/2010/09/28/mysql-swap-insanity-and-the-numa-architecture/ 文章描述了性能问题的原因(文章中把原因找错了)以及解决方案：关闭NUMA。 实际这个原因是kernel实现的一个低级bug，这个Bug在2014年修复了https://github.com/torvalds/linux/commit/4f9b16a64753d0bb607454347036dc997fd03b82，但是修复这么多年后仍然以讹传讹，这篇文章希望正本清源、扭转错误的认识。"></a><a href="https://plantegg.github.io/2021/05/14/%E5%8D%81%E5%B9%B4%E5%90%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%98%E6%98%AF%E4%B8%8D%E6%95%A2%E6%8B%A5%E6%8A%B1NUMA/">在2010年前后MySQL、PG、Oracle数据库在使用NUMA的时候碰到了性能问题，流传最广的这篇  MySQL – The MySQL “swap insanity” problem and the effects of the NUMA architecture http://blog.jcole.us/2010/09/28/mysql-swap-insanity-and-the-numa-architecture/ 文章描述了性能问题的原因(文章中把原因找错了)以及解决方案：关闭NUMA。 实际这个原因是kernel实现的一个低级bug，这个Bug在2014年修复了https://github.com/torvalds/linux/commit/4f9b16a64753d0bb607454347036dc997fd03b82，但是修复这么多年后仍然以讹传讹，这篇文章希望正本清源、扭转错误的认识。</a></h4><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20210517082233798.png" alt="image-20210517082233798"></p><h4 id="CPU的制造和概念-从最底层的沙子开始用8篇文章来回答关于CPU的各种疑问以及大量的实验对比案例和测试数据来展示了CPU的各种原理，比如多核、超线程、NUMA、睿频、功耗、GPU、大小核再到分支预测、cache-line失效、加锁代价、IPC等各种指标（都有对应的代码和测试数据）。"><a href="#CPU的制造和概念-从最底层的沙子开始用8篇文章来回答关于CPU的各种疑问以及大量的实验对比案例和测试数据来展示了CPU的各种原理，比如多核、超线程、NUMA、睿频、功耗、GPU、大小核再到分支预测、cache-line失效、加锁代价、IPC等各种指标（都有对应的代码和测试数据）。" class="headerlink" title="CPU的制造和概念 从最底层的沙子开始用8篇文章来回答关于CPU的各种疑问以及大量的实验对比案例和测试数据来展示了CPU的各种原理，比如多核、超线程、NUMA、睿频、功耗、GPU、大小核再到分支预测、cache_line失效、加锁代价、IPC等各种指标（都有对应的代码和测试数据）。"></a><a href="https://plantegg.github.io/2021/06/01/CPU%E7%9A%84%E5%88%B6%E9%80%A0%E5%92%8C%E6%A6%82%E5%BF%B5/">CPU的制造和概念</a> 从最底层的沙子开始用8篇文章来回答关于CPU的各种疑问以及大量的实验对比案例和测试数据来展示了CPU的各种原理，比如多核、超线程、NUMA、睿频、功耗、GPU、大小核再到分支预测、cache_line失效、加锁代价、IPC等各种指标（都有对应的代码和测试数据）。</h4><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20210802161410524-1011377.png" alt="image-20210802161410524"> </p><h4 id="《Intel-PAUSE指令变化是如何影响自旋锁以及MySQL的性能的》-从一个参数引起的rt抖动定位到OS锁等待再到CPU-Pause指令，以及不同CPU型号对Pause使用cycles不同的影响，最终反馈到应用层面的rt全过程。在MySQL内核开发的时候考虑了Pause，但是没有考虑不同的CPU型号，所以换了CPU型号后性能差异比较大"><a href="#《Intel-PAUSE指令变化是如何影响自旋锁以及MySQL的性能的》-从一个参数引起的rt抖动定位到OS锁等待再到CPU-Pause指令，以及不同CPU型号对Pause使用cycles不同的影响，最终反馈到应用层面的rt全过程。在MySQL内核开发的时候考虑了Pause，但是没有考虑不同的CPU型号，所以换了CPU型号后性能差异比较大" class="headerlink" title="《Intel PAUSE指令变化是如何影响自旋锁以及MySQL的性能的》 从一个参数引起的rt抖动定位到OS锁等待再到CPU Pause指令，以及不同CPU型号对Pause使用cycles不同的影响，最终反馈到应用层面的rt全过程。在MySQL内核开发的时候考虑了Pause，但是没有考虑不同的CPU型号，所以换了CPU型号后性能差异比较大"></a><a href="https://plantegg.github.io/2019/12/16/Intel%20PAUSE%E6%8C%87%E4%BB%A4%E5%8F%98%E5%8C%96%E6%98%AF%E5%A6%82%E4%BD%95%E5%BD%B1%E5%93%8D%E8%87%AA%E6%97%8B%E9%94%81%E4%BB%A5%E5%8F%8AMySQL%E7%9A%84%E6%80%A7%E8%83%BD%E7%9A%84/">《Intel PAUSE指令变化是如何影响自旋锁以及MySQL的性能的》 从一个参数引起的rt抖动定位到OS锁等待再到CPU Pause指令，以及不同CPU型号对Pause使用cycles不同的影响，最终反馈到应用层面的rt全过程。在MySQL内核开发的时候考虑了Pause，但是没有考虑不同的CPU型号，所以换了CPU型号后性能差异比较大</a></h4><p><img src="/Users/ren/case/ossimg/d567449fe52725a9d0b9d4ec9baa372c.png" alt="image.png"></p><h4 id="10倍性能提升全过程-在双11的紧张流程下，将系统tps从500优化到5500，从网络到snat、再到Spring和StackTrace，一次全栈性能优化过程的详细记录和分析。"><a href="#10倍性能提升全过程-在双11的紧张流程下，将系统tps从500优化到5500，从网络到snat、再到Spring和StackTrace，一次全栈性能优化过程的详细记录和分析。" class="headerlink" title="10倍性能提升全过程 在双11的紧张流程下，将系统tps从500优化到5500，从网络到snat、再到Spring和StackTrace，一次全栈性能优化过程的详细记录和分析。"></a><a href="https://plantegg.github.io/2018/01/23/10+%E5%80%8D%E6%80%A7%E8%83%BD%E6%8F%90%E5%8D%87%E5%85%A8%E8%BF%87%E7%A8%8B/">10倍性能提升全过程</a> 在双11的紧张流程下，将系统tps从500优化到5500，从网络到snat、再到Spring和StackTrace，一次全栈性能优化过程的详细记录和分析。</h4><p><img src="/Users/ren/case/ossimg/05703c168e63e96821ea9f921d83712b.png" alt="image.png"></p><h4 id="就是要你懂TCP–半连接队列和全连接队列：偶发性的连接reset异常、重启服务后短时间的连接异常，通过一篇文章阐明TCP连接的半连接队列和全连接队大小是怎么影响连接创建的，以及用什么工具来观察队列有没有溢出、连接为什么会RESET"><a href="#就是要你懂TCP–半连接队列和全连接队列：偶发性的连接reset异常、重启服务后短时间的连接异常，通过一篇文章阐明TCP连接的半连接队列和全连接队大小是怎么影响连接创建的，以及用什么工具来观察队列有没有溢出、连接为什么会RESET" class="headerlink" title="就是要你懂TCP–半连接队列和全连接队列：偶发性的连接reset异常、重启服务后短时间的连接异常，通过一篇文章阐明TCP连接的半连接队列和全连接队大小是怎么影响连接创建的，以及用什么工具来观察队列有没有溢出、连接为什么会RESET"></a><a href="https://plantegg.github.io/2017/06/07/%E5%B0%B1%E6%98%AF%E8%A6%81%E4%BD%A0%E6%87%82TCP--%E5%8D%8A%E8%BF%9E%E6%8E%A5%E9%98%9F%E5%88%97%E5%92%8C%E5%85%A8%E8%BF%9E%E6%8E%A5%E9%98%9F%E5%88%97/">就是要你懂TCP–半连接队列和全连接队列：偶发性的连接reset异常、重启服务后短时间的连接异常，通过一篇文章阐明TCP连接的半连接队列和全连接队大小是怎么影响连接创建的，以及用什么工具来观察队列有没有溢出、连接为什么会RESET</a></h4><img src="/Users/ren/case/ossimg/1579241362064-807d8378-6c54-4a2c-a888-ff2337df817c.png" alt="image.png" style="zoom:80%;"><h4 id="就是要你懂TCP–性能和发送接收Buffer的关系：发送窗口大小-Buffer-、接收窗口大小-Buffer-对TCP传输速度的影响，以及怎么观察窗口对传输速度的影响。BDP、RT、带宽对传输速度又是怎么影响的"><a href="#就是要你懂TCP–性能和发送接收Buffer的关系：发送窗口大小-Buffer-、接收窗口大小-Buffer-对TCP传输速度的影响，以及怎么观察窗口对传输速度的影响。BDP、RT、带宽对传输速度又是怎么影响的" class="headerlink" title="就是要你懂TCP–性能和发送接收Buffer的关系：发送窗口大小(Buffer)、接收窗口大小(Buffer)对TCP传输速度的影响，以及怎么观察窗口对传输速度的影响。BDP、RT、带宽对传输速度又是怎么影响的"></a><a href="https://plantegg.github.io/2019/09/28/%E5%B0%B1%E6%98%AF%E8%A6%81%E4%BD%A0%E6%87%82TCP--%E6%80%A7%E8%83%BD%E5%92%8C%E5%8F%91%E9%80%81%E6%8E%A5%E6%94%B6Buffer%E7%9A%84%E5%85%B3%E7%B3%BB/">就是要你懂TCP–性能和发送接收Buffer的关系：发送窗口大小(Buffer)、接收窗口大小(Buffer)对TCP传输速度的影响，以及怎么观察窗口对传输速度的影响。BDP、RT、带宽对传输速度又是怎么影响的</a></h4><p><img src="/Users/ren/case/ossimg/e177d59ecb886daef5905ed80a84dfd2.png"></p><h4 id="就是要你懂网络–一个网络包的旅程：教科书式地阐述书本中的路由、网关、子网、Mac地址、IP地址是如何一起协作让网络包最终传输到目标机器上。-同时可以跟讲这块的RFC1180比较一下，RFC1180-写的确实很好，清晰简洁，图文并茂，结构逻辑合理，但是对于90-的程序员没有什么卵用，看完几周后就忘得差不多，因为他不是从实践的角度来阐述问题，中间没有很多为什么，所以一般资质的程序员看完当时感觉很好，实际还是不会灵活运用"><a href="#就是要你懂网络–一个网络包的旅程：教科书式地阐述书本中的路由、网关、子网、Mac地址、IP地址是如何一起协作让网络包最终传输到目标机器上。-同时可以跟讲这块的RFC1180比较一下，RFC1180-写的确实很好，清晰简洁，图文并茂，结构逻辑合理，但是对于90-的程序员没有什么卵用，看完几周后就忘得差不多，因为他不是从实践的角度来阐述问题，中间没有很多为什么，所以一般资质的程序员看完当时感觉很好，实际还是不会灵活运用" class="headerlink" title="就是要你懂网络–一个网络包的旅程：教科书式地阐述书本中的路由、网关、子网、Mac地址、IP地址是如何一起协作让网络包最终传输到目标机器上。  同时可以跟讲这块的RFC1180比较一下，RFC1180 写的确实很好，清晰简洁，图文并茂，结构逻辑合理，但是对于90%的程序员没有什么卵用，看完几周后就忘得差不多，因为他不是从实践的角度来阐述问题，中间没有很多为什么，所以一般资质的程序员看完当时感觉很好，实际还是不会灵活运用"></a><a href="https://plantegg.github.io/2019/05/15/%E5%B0%B1%E6%98%AF%E8%A6%81%E4%BD%A0%E6%87%82%E7%BD%91%E7%BB%9C--%E4%B8%80%E4%B8%AA%E7%BD%91%E7%BB%9C%E5%8C%85%E7%9A%84%E6%97%85%E7%A8%8B/">就是要你懂网络–一个网络包的旅程：教科书式地阐述书本中的路由、网关、子网、Mac地址、IP地址是如何一起协作让网络包最终传输到目标机器上。</a>  同时可以跟讲这块的<a href="https://tools.ietf.org/html/rfc1180" target="_blank" rel="noopener">RFC1180</a>比较一下，RFC1180 写的确实很好，清晰简洁，图文并茂，结构逻辑合理，但是对于90%的程序员没有什么卵用，看完几周后就忘得差不多，因为他不是从实践的角度来阐述问题，中间没有很多为什么，所以一般资质的程序员看完当时感觉很好，实际还是不会灵活运用</h4><p><img src="/Users/ren/case/ossimg/8f5d8518c1d92ed68d23218028e3cd11.png"></p><h4 id="国产CPU和Intel、AMD性能PK-从Intel、AMD、海光、鲲鹏920、飞腾2500-等CPU在TPCC、sysbench下的性能对比来分析他们的性能差距，同时分析内存延迟对性能的影响"><a href="#国产CPU和Intel、AMD性能PK-从Intel、AMD、海光、鲲鹏920、飞腾2500-等CPU在TPCC、sysbench下的性能对比来分析他们的性能差距，同时分析内存延迟对性能的影响" class="headerlink" title="国产CPU和Intel、AMD性能PK 从Intel、AMD、海光、鲲鹏920、飞腾2500 等CPU在TPCC、sysbench下的性能对比来分析他们的性能差距，同时分析内存延迟对性能的影响"></a><a href="https://plantegg.github.io/2022/01/13/%E4%B8%8D%E5%90%8CCPU%E6%80%A7%E8%83%BD%E5%A4%A7PK/">国产CPU和Intel、AMD性能PK</a> 从Intel、AMD、海光、鲲鹏920、飞腾2500 等CPU在TPCC、sysbench下的性能对比来分析他们的性能差距，同时分析内存延迟对性能的影响</h4><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20220319115644219.png" alt="image-20220319115644219"></p><h4 id="从网络路由连通性的原理上来看负载均衡lvs的DR、NAT、FullNAT到底搞了些什么鬼，以及为什么要这么搞，和带来的优缺点：《就是要你懂负载均衡–lvs和转发模式》"><a href="#从网络路由连通性的原理上来看负载均衡lvs的DR、NAT、FullNAT到底搞了些什么鬼，以及为什么要这么搞，和带来的优缺点：《就是要你懂负载均衡–lvs和转发模式》" class="headerlink" title="从网络路由连通性的原理上来看负载均衡lvs的DR、NAT、FullNAT到底搞了些什么鬼，以及为什么要这么搞，和带来的优缺点：《就是要你懂负载均衡–lvs和转发模式》"></a><a href="/2019/06/20/%E5%B0%B1%E6%98%AF%E8%A6%81%E4%BD%A0%E6%87%82%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1--lvs%E5%92%8C%E8%BD%AC%E5%8F%91%E6%A8%A1%E5%BC%8F/">从网络路由连通性的原理上来看负载均衡lvs的DR、NAT、FullNAT到底搞了些什么鬼，以及为什么要这么搞，和带来的优缺点：《就是要你懂负载均衡–lvs和转发模式》</a></h4><p><img src="/Users/ren/case/ossimg/94d55b926b5bb1573c4cab8353428712.png"></p><h4 id="LVS-20倍的负载不均衡，原来是内核的这个Bug，这个内核bug现在还在，可以稳定重现，有兴趣的话去重现一下，然后对照源代码以及抓包分析一下就清楚了。"><a href="#LVS-20倍的负载不均衡，原来是内核的这个Bug，这个内核bug现在还在，可以稳定重现，有兴趣的话去重现一下，然后对照源代码以及抓包分析一下就清楚了。" class="headerlink" title="LVS 20倍的负载不均衡，原来是内核的这个Bug，这个内核bug现在还在，可以稳定重现，有兴趣的话去重现一下，然后对照源代码以及抓包分析一下就清楚了。"></a><a href="/2019/07/19/%E5%B0%B1%E6%98%AF%E8%A6%81%E4%BD%A0%E6%87%82%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1--%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95%E5%92%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E5%9D%87%E8%A1%A1/">LVS 20倍的负载不均衡，原来是内核的这个Bug</a>，这个内核bug现在还在，可以稳定重现，有兴趣的话去重现一下，然后对照源代码以及抓包分析一下就清楚了。</h4><h4 id="就是要你懂TCP–握手和挥手，不是你想象中三次握手、四次挥手就理解了TCP，本文从握手的本质–握手都做了什么事情、连接的本质是什么等来阐述握手、挥手的原理"><a href="#就是要你懂TCP–握手和挥手，不是你想象中三次握手、四次挥手就理解了TCP，本文从握手的本质–握手都做了什么事情、连接的本质是什么等来阐述握手、挥手的原理" class="headerlink" title="就是要你懂TCP–握手和挥手，不是你想象中三次握手、四次挥手就理解了TCP，本文从握手的本质–握手都做了什么事情、连接的本质是什么等来阐述握手、挥手的原理"></a><a href="/2017/06/02/%E5%B0%B1%E6%98%AF%E8%A6%81%E4%BD%A0%E6%87%82TCP--%E8%BF%9E%E6%8E%A5%E5%92%8C%E6%8F%A1%E6%89%8B/">就是要你懂TCP–握手和挥手，不是你想象中三次握手、四次挥手就理解了TCP，本文从握手的本质–握手都做了什么事情、连接的本质是什么等来阐述握手、挥手的原理</a></h4><p><img src="/Users/ren/case/ossimg/6d66dadecb72e11e3e5ab765c6c3ea2e.png"></p><h4 id="nslookup-OK-but-ping-fail–看看老司机是如何解决问题的，解决问题的方法肯定比知识点重要多了，同时透过一个问题怎么样通篇来理解一大块知识，让这块原理真正在你的只是提示中扎根下来"><a href="#nslookup-OK-but-ping-fail–看看老司机是如何解决问题的，解决问题的方法肯定比知识点重要多了，同时透过一个问题怎么样通篇来理解一大块知识，让这块原理真正在你的只是提示中扎根下来" class="headerlink" title="nslookup OK but ping fail–看看老司机是如何解决问题的，解决问题的方法肯定比知识点重要多了，同时透过一个问题怎么样通篇来理解一大块知识，让这块原理真正在你的只是提示中扎根下来"></a><a href="/2019/01/09/nslookup-OK-but-ping-fail/">nslookup OK but ping fail–看看老司机是如何解决问题的，解决问题的方法肯定比知识点重要多了，同时透过一个问题怎么样通篇来理解一大块知识，让这块原理真正在你的只是提示中扎根下来</a></h4><p><img src="/Users/ren/case/ossimg/ca466bb6430f1149958ceb41b9ffe591.png"></p><h4 id="如何在工作中学习-一篇很土但是很务实可以复制的方法论文章。不要讲举一反三、触类旁通，谁都知道要举一反三、触类旁通，但是为什么我总是不能够举一反三、触类旁通？"><a href="#如何在工作中学习-一篇很土但是很务实可以复制的方法论文章。不要讲举一反三、触类旁通，谁都知道要举一反三、触类旁通，但是为什么我总是不能够举一反三、触类旁通？" class="headerlink" title="如何在工作中学习 一篇很土但是很务实可以复制的方法论文章。不要讲举一反三、触类旁通，谁都知道要举一反三、触类旁通，但是为什么我总是不能够举一反三、触类旁通？"></a><a href="/2018/05/23/%E5%A6%82%E4%BD%95%E5%9C%A8%E5%B7%A5%E4%BD%9C%E4%B8%AD%E5%AD%A6%E4%B9%A0/">如何在工作中学习</a> 一篇很土但是很务实可以复制的方法论文章。不要讲举一反三、触类旁通，谁都知道要举一反三、触类旁通，但是为什么我总是不能够举一反三、触类旁通？</h4><h4 id="举三反一–从理论知识到实际问题的推导-坚决不让思路跑偏，如何从一个理论知识点推断可能的问题"><a href="#举三反一–从理论知识到实际问题的推导-坚决不让思路跑偏，如何从一个理论知识点推断可能的问题" class="headerlink" title="举三反一–从理论知识到实际问题的推导 坚决不让思路跑偏，如何从一个理论知识点推断可能的问题"></a><a href="/2020/11/02/%E4%B8%BE%E4%B8%89%E5%8F%8D%E4%B8%80--%E4%BB%8E%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86%E5%88%B0%E5%AE%9E%E9%99%85%E9%97%AE%E9%A2%98%E7%9A%84%E6%8E%A8%E5%AF%BC/">举三反一–从理论知识到实际问题的推导</a> 坚决不让思路跑偏，如何从一个理论知识点推断可能的问题</h4><h2 id="性能相关（2015-2018年）"><a href="#性能相关（2015-2018年）" class="headerlink" title="性能相关（2015-2018年）"></a>性能相关（2015-2018年）</h2><h4 id="就是要你懂TCP–半连接队列和全连接队列-偶发性的连接reset异常、重启服务后短时间的连接异常"><a href="#就是要你懂TCP–半连接队列和全连接队列-偶发性的连接reset异常、重启服务后短时间的连接异常" class="headerlink" title="就是要你懂TCP–半连接队列和全连接队列  偶发性的连接reset异常、重启服务后短时间的连接异常"></a><a href="/2017/06/07/%E5%B0%B1%E6%98%AF%E8%A6%81%E4%BD%A0%E6%87%82TCP--%E5%8D%8A%E8%BF%9E%E6%8E%A5%E9%98%9F%E5%88%97%E5%92%8C%E5%85%A8%E8%BF%9E%E6%8E%A5%E9%98%9F%E5%88%97/">就是要你懂TCP–半连接队列和全连接队列</a>  偶发性的连接reset异常、重启服务后短时间的连接异常</h4><h4 id="就是要你懂TCP–性能和发送接收Buffer的关系：发送窗口大小-Buffer-、接收窗口大小-Buffer-对TCP传输速度的影响，以及怎么观察窗口对传输速度的影响。BDP、RT、带宽对传输速度又是怎么影响的-发送窗口大小-Buffer-、接收窗口大小-Buffer-对TCP传输速度的影响，以及怎么观察窗口对传输速度的影响"><a href="#就是要你懂TCP–性能和发送接收Buffer的关系：发送窗口大小-Buffer-、接收窗口大小-Buffer-对TCP传输速度的影响，以及怎么观察窗口对传输速度的影响。BDP、RT、带宽对传输速度又是怎么影响的-发送窗口大小-Buffer-、接收窗口大小-Buffer-对TCP传输速度的影响，以及怎么观察窗口对传输速度的影响" class="headerlink" title="就是要你懂TCP–性能和发送接收Buffer的关系：发送窗口大小(Buffer)、接收窗口大小(Buffer)对TCP传输速度的影响，以及怎么观察窗口对传输速度的影响。BDP、RT、带宽对传输速度又是怎么影响的  发送窗口大小(Buffer)、接收窗口大小(Buffer)对TCP传输速度的影响，以及怎么观察窗口对传输速度的影响"></a><a href="/2019/09/28/%E5%B0%B1%E6%98%AF%E8%A6%81%E4%BD%A0%E6%87%82TCP--%E6%80%A7%E8%83%BD%E5%92%8C%E5%8F%91%E9%80%81%E6%8E%A5%E6%94%B6Buffer%E7%9A%84%E5%85%B3%E7%B3%BB/">就是要你懂TCP–性能和发送接收Buffer的关系：发送窗口大小(Buffer)、接收窗口大小(Buffer)对TCP传输速度的影响，以及怎么观察窗口对传输速度的影响。BDP、RT、带宽对传输速度又是怎么影响的</a>  发送窗口大小(Buffer)、接收窗口大小(Buffer)对TCP传输速度的影响，以及怎么观察窗口对传输速度的影响</h4><h4 id="就是要你懂TCP–性能优化大全"><a href="#就是要你懂TCP–性能优化大全" class="headerlink" title="就是要你懂TCP–性能优化大全"></a><a href="/2019/06/21/%E5%B0%B1%E6%98%AF%E8%A6%81%E4%BD%A0%E6%87%82TCP--%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%A4%A7%E5%85%A8/">就是要你懂TCP–性能优化大全</a></h4><h4 id="就是要你懂TCP–TCP性能问题-Nagle算法和delay-ack"><a href="#就是要你懂TCP–TCP性能问题-Nagle算法和delay-ack" class="headerlink" title="就是要你懂TCP–TCP性能问题 Nagle算法和delay ack"></a><a href="/2018/06/14/%E5%B0%B1%E6%98%AF%E8%A6%81%E4%BD%A0%E6%87%82TCP--%E6%9C%80%E7%BB%8F%E5%85%B8%E7%9A%84TCP%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98/">就是要你懂TCP–TCP性能问题</a> Nagle算法和delay ack</h4><h4 id="10倍性能提升全过程-在双11的紧张流程下，将系统tps从500优化到5500，从网络到snat、再到Spring和StackTrace，看看一个性能全栈工程师如何在各种工具加持下发现各种问题的。"><a href="#10倍性能提升全过程-在双11的紧张流程下，将系统tps从500优化到5500，从网络到snat、再到Spring和StackTrace，看看一个性能全栈工程师如何在各种工具加持下发现各种问题的。" class="headerlink" title="10倍性能提升全过程 在双11的紧张流程下，将系统tps从500优化到5500，从网络到snat、再到Spring和StackTrace，看看一个性能全栈工程师如何在各种工具加持下发现各种问题的。"></a><a href="/2018/01/23/10+%E5%80%8D%E6%80%A7%E8%83%BD%E6%8F%90%E5%8D%87%E5%85%A8%E8%BF%87%E7%A8%8B/">10倍性能提升全过程</a> 在双11的紧张流程下，将系统tps从500优化到5500，从网络到snat、再到Spring和StackTrace，看看一个性能全栈工程师如何在各种工具加持下发现各种问题的。</h4><h2 id="CPU系列文章（2021年完成）"><a href="#CPU系列文章（2021年完成）" class="headerlink" title="CPU系列文章（2021年完成）"></a>CPU系列文章（2021年完成）</h2><h4 id="CPU的制造和概念"><a href="#CPU的制造和概念" class="headerlink" title="CPU的制造和概念"></a><a href="/2021/06/01/CPU%E7%9A%84%E5%88%B6%E9%80%A0%E5%92%8C%E6%A6%82%E5%BF%B5/">CPU的制造和概念</a></h4><h4 id="十年后数据库还是不敢拥抱NUMA？"><a href="#十年后数据库还是不敢拥抱NUMA？" class="headerlink" title="十年后数据库还是不敢拥抱NUMA？"></a><a href="/2021/05/14/%E5%8D%81%E5%B9%B4%E5%90%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%98%E6%98%AF%E4%B8%8D%E6%95%A2%E6%8B%A5%E6%8A%B1NUMA/">十年后数据库还是不敢拥抱NUMA？</a></h4><h4 id="Intel-PAUSE指令变化是如何影响自旋锁以及MySQL的性能的-x2F-2019-x2F-12-x2F-16-x2F-Intel-PAUSE指令变化是如何影响自旋锁以及MySQL的性能的-x2F"><a href="#Intel-PAUSE指令变化是如何影响自旋锁以及MySQL的性能的-x2F-2019-x2F-12-x2F-16-x2F-Intel-PAUSE指令变化是如何影响自旋锁以及MySQL的性能的-x2F" class="headerlink" title="[Intel PAUSE指令变化是如何影响自旋锁以及MySQL的性能的](&#x2F;2019&#x2F;12&#x2F;16&#x2F;Intel PAUSE指令变化是如何影响自旋锁以及MySQL的性能的&#x2F;)"></a>[Intel PAUSE指令变化是如何影响自旋锁以及MySQL的性能的](&#x2F;2019&#x2F;12&#x2F;16&#x2F;Intel PAUSE指令变化是如何影响自旋锁以及MySQL的性能的&#x2F;)</h4><h4 id="Perf-IPC以及CPU性能-x2F-2021-x2F-05-x2F-16-x2F-Perf-IPC以及CPU利用率-x2F"><a href="#Perf-IPC以及CPU性能-x2F-2021-x2F-05-x2F-16-x2F-Perf-IPC以及CPU利用率-x2F" class="headerlink" title="[Perf IPC以及CPU性能](&#x2F;2021&#x2F;05&#x2F;16&#x2F;Perf IPC以及CPU利用率&#x2F;)"></a>[Perf IPC以及CPU性能](&#x2F;2021&#x2F;05&#x2F;16&#x2F;Perf IPC以及CPU利用率&#x2F;)</h4><h4 id="CPU性能和CACHE"><a href="#CPU性能和CACHE" class="headerlink" title="CPU性能和CACHE"></a><a href="https://plantegg.github.io/2021/07/19/CPU%E6%80%A7%E8%83%BD%E5%92%8CCACHE/">CPU性能和CACHE</a></h4><h4 id="CPU-性能和Cache-Line-x2F-2021-x2F-05-x2F-16-x2F-CPU-Cache-Line-和性能-x2F"><a href="#CPU-性能和Cache-Line-x2F-2021-x2F-05-x2F-16-x2F-CPU-Cache-Line-和性能-x2F" class="headerlink" title="[CPU 性能和Cache Line](&#x2F;2021&#x2F;05&#x2F;16&#x2F;CPU Cache Line 和性能&#x2F;)"></a>[CPU 性能和Cache Line](&#x2F;2021&#x2F;05&#x2F;16&#x2F;CPU Cache Line 和性能&#x2F;)</h4><h4 id="AMD-Zen-CPU-架构-以及-AMD、海光、Intel、鲲鹏的性能对比"><a href="#AMD-Zen-CPU-架构-以及-AMD、海光、Intel、鲲鹏的性能对比" class="headerlink" title="AMD Zen CPU 架构 以及 AMD、海光、Intel、鲲鹏的性能对比"></a><a href="/2021/08/13/AMD_Zen_CPU%E6%9E%B6%E6%9E%84/">AMD Zen CPU 架构 以及 AMD、海光、Intel、鲲鹏的性能对比</a></h4><h4 id="Intel、海光、鲲鹏920、飞腾2500-CPU性能对比"><a href="#Intel、海光、鲲鹏920、飞腾2500-CPU性能对比" class="headerlink" title="Intel、海光、鲲鹏920、飞腾2500 CPU性能对比"></a><a href="/2021/06/18/%E5%87%A0%E6%AC%BECPU%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94/">Intel、海光、鲲鹏920、飞腾2500 CPU性能对比</a></h4><h2 id="网络相关基础知识（2017年完成）"><a href="#网络相关基础知识（2017年完成）" class="headerlink" title="网络相关基础知识（2017年完成）"></a>网络相关基础知识（2017年完成）</h2><h4 id="就是要你懂网络–一个网络包的旅程"><a href="#就是要你懂网络–一个网络包的旅程" class="headerlink" title="就是要你懂网络–一个网络包的旅程"></a><a href="/2019/05/15/%E5%B0%B1%E6%98%AF%E8%A6%81%E4%BD%A0%E6%87%82%E7%BD%91%E7%BB%9C--%E4%B8%80%E4%B8%AA%E7%BD%91%E7%BB%9C%E5%8C%85%E7%9A%84%E6%97%85%E7%A8%8B/">就是要你懂网络–一个网络包的旅程</a></h4><h4 id="通过案例来理解MSS、MTU等相关TCP概念"><a href="#通过案例来理解MSS、MTU等相关TCP概念" class="headerlink" title="通过案例来理解MSS、MTU等相关TCP概念"></a><a href="/2018/05/07/%E5%B0%B1%E6%98%AF%E8%A6%81%E4%BD%A0%E6%87%82TCP--%E9%80%9A%E8%BF%87%E6%A1%88%E4%BE%8B%E6%9D%A5%E5%AD%A6%E4%B9%A0MSS%E3%80%81MTU/">通过案例来理解MSS、MTU等相关TCP概念</a></h4><h4 id="就是要你懂TCP–握手和挥手"><a href="#就是要你懂TCP–握手和挥手" class="headerlink" title="就是要你懂TCP–握手和挥手"></a><a href="/2017/06/02/%E5%B0%B1%E6%98%AF%E8%A6%81%E4%BD%A0%E6%87%82TCP--%E8%BF%9E%E6%8E%A5%E5%92%8C%E6%8F%A1%E6%89%8B/">就是要你懂TCP–握手和挥手</a></h4><h4 id="wireshark-dup-ack-issue-and-keepalive"><a href="#wireshark-dup-ack-issue-and-keepalive" class="headerlink" title="wireshark-dup-ack-issue and keepalive"></a><a href="/2017/06/02/%E5%B0%B1%E6%98%AF%E8%A6%81%E4%BD%A0%E6%87%82TCP--wireshark-dup-ack-issue/">wireshark-dup-ack-issue and keepalive</a></h4><h4 id="一个没有遵守tcp规则导致的问题"><a href="#一个没有遵守tcp规则导致的问题" class="headerlink" title="一个没有遵守tcp规则导致的问题"></a><a href="/2018/11/26/%E4%B8%80%E4%B8%AA%E6%B2%A1%E6%9C%89%E9%81%B5%E5%AE%88tcp%E8%A7%84%E5%88%99%E5%AF%BC%E8%87%B4%E7%9A%84%E9%97%AE%E9%A2%98/">一个没有遵守tcp规则导致的问题</a></h4><h4 id="kubernetes-service-和-kube-proxy详解-x2F-2020-x2F-09-x2F-22-x2F-kubernetes-service-和-kube-proxy详解-x2F"><a href="#kubernetes-service-和-kube-proxy详解-x2F-2020-x2F-09-x2F-22-x2F-kubernetes-service-和-kube-proxy详解-x2F" class="headerlink" title="[kubernetes service 和 kube-proxy详解](&#x2F;2020&#x2F;09&#x2F;22&#x2F;kubernetes service 和 kube-proxy详解&#x2F;)"></a>[kubernetes service 和 kube-proxy详解](&#x2F;2020&#x2F;09&#x2F;22&#x2F;kubernetes service 和 kube-proxy详解&#x2F;)</h4><h2 id="DNS相关"><a href="#DNS相关" class="headerlink" title="DNS相关"></a>DNS相关</h2><h4 id="就是要你懂DNS–一文搞懂域名解析相关问题"><a href="#就是要你懂DNS–一文搞懂域名解析相关问题" class="headerlink" title="就是要你懂DNS–一文搞懂域名解析相关问题"></a><a href="/2019/06/09/%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/">就是要你懂DNS–一文搞懂域名解析相关问题</a></h4><h4 id="nslookup-OK-but-ping-fail"><a href="#nslookup-OK-but-ping-fail" class="headerlink" title="nslookup OK but ping fail"></a><a href="/2019/01/09/nslookup-OK-but-ping-fail/">nslookup OK but ping fail</a></h4><h4 id="Docker中的DNS解析过程"><a href="#Docker中的DNS解析过程" class="headerlink" title="Docker中的DNS解析过程"></a><a href="/2019/01/12/Docker%E4%B8%AD%E7%9A%84DNS%E8%A7%A3%E6%9E%90%E8%BF%87%E7%A8%8B/">Docker中的DNS解析过程</a></h4><h4 id="windows7的wifi总是报DNS域名异常无法上网"><a href="#windows7的wifi总是报DNS域名异常无法上网" class="headerlink" title="windows7的wifi总是报DNS域名异常无法上网"></a><a href="/2019/01/10/windows7%E7%9A%84wifi%E6%80%BB%E6%98%AF%E6%8A%A5DNS%E5%9F%9F%E5%90%8D%E5%BC%82%E5%B8%B8%E6%97%A0%E6%B3%95%E4%B8%8A%E7%BD%91/">windows7的wifi总是报DNS域名异常无法上网</a></h4><h2 id="LVS-负载均衡"><a href="#LVS-负载均衡" class="headerlink" title="LVS 负载均衡"></a>LVS 负载均衡</h2><h4 id="就是要你懂负载均衡–lvs和转发模式"><a href="#就是要你懂负载均衡–lvs和转发模式" class="headerlink" title="就是要你懂负载均衡–lvs和转发模式"></a><a href="/2019/06/20/%E5%B0%B1%E6%98%AF%E8%A6%81%E4%BD%A0%E6%87%82%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1--lvs%E5%92%8C%E8%BD%AC%E5%8F%91%E6%A8%A1%E5%BC%8F/">就是要你懂负载均衡–lvs和转发模式</a></h4><h4 id="就是要你懂负载均衡–负载均衡调度算法和为什么不均衡"><a href="#就是要你懂负载均衡–负载均衡调度算法和为什么不均衡" class="headerlink" title="就是要你懂负载均衡–负载均衡调度算法和为什么不均衡"></a><a href="/2019/07/19/%E5%B0%B1%E6%98%AF%E8%A6%81%E4%BD%A0%E6%87%82%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1--%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95%E5%92%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E5%9D%87%E8%A1%A1/">就是要你懂负载均衡–负载均衡调度算法和为什么不均衡</a></h4><h2 id="网络工具"><a href="#网络工具" class="headerlink" title="网络工具"></a>网络工具</h2><h4 id="就是要你懂Unix-Socket-进行抓包解析"><a href="#就是要你懂Unix-Socket-进行抓包解析" class="headerlink" title="就是要你懂Unix Socket 进行抓包解析"></a><a href="/2018/01/01/%E9%80%9A%E8%BF%87tcpdump%E5%AF%B9Unix%20Socket%20%E8%BF%9B%E8%A1%8C%E6%8A%93%E5%8C%85%E8%A7%A3%E6%9E%90/">就是要你懂Unix Socket 进行抓包解析</a></h4><h4 id="就是要你懂网络监控–ss用法大全"><a href="#就是要你懂网络监控–ss用法大全" class="headerlink" title="就是要你懂网络监控–ss用法大全"></a><a href="/2016/10/12/ss%E7%94%A8%E6%B3%95%E5%A4%A7%E5%85%A8/">就是要你懂网络监控–ss用法大全</a></h4><h4 id="就是要你懂抓包–WireShark之命令行版tshark"><a href="#就是要你懂抓包–WireShark之命令行版tshark" class="headerlink" title="就是要你懂抓包–WireShark之命令行版tshark"></a><a href="/2019/06/21/%E5%B0%B1%E6%98%AF%E8%A6%81%E4%BD%A0%E6%87%82%E6%8A%93%E5%8C%85--WireShark%E4%B9%8B%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%89%88tshark/">就是要你懂抓包–WireShark之命令行版tshark</a></h4><h4 id="netstat-timer-keepalive-explain"><a href="#netstat-timer-keepalive-explain" class="headerlink" title="netstat timer keepalive explain"></a><a href="/2017/08/28/netstat%20%E7%AD%89%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7/">netstat timer keepalive explain</a></h4><h4 id="Git-HTTP-Proxy-and-SSH-Proxy"><a href="#Git-HTTP-Proxy-and-SSH-Proxy" class="headerlink" title="Git HTTP Proxy and SSH Proxy"></a><a href="/2018/03/14/%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AEgit%20Proxy/">Git HTTP Proxy and SSH Proxy</a></h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;关于本博&quot;&gt;&lt;a href=&quot;#关于本博&quot; class=&quot;headerlink&quot; title=&quot;关于本博&quot;&gt;&lt;/a&gt;关于本博&lt;/h2&gt;&lt;p&gt;find me on twitter: &lt;a href=&quot;https://twitter.com/plantegg&quot; tar
      
    
    </summary>
    
      <category term="others" scheme="https://plantegg.github.io/categories/others/"/>
    
    
      <category term="performance" scheme="https://plantegg.github.io/tags/performance/"/>
    
      <category term="LVS" scheme="https://plantegg.github.io/tags/LVS/"/>
    
      <category term="network" scheme="https://plantegg.github.io/tags/network/"/>
    
      <category term="tcpdump" scheme="https://plantegg.github.io/tags/tcpdump/"/>
    
      <category term="TCP queue" scheme="https://plantegg.github.io/tags/TCP-queue/"/>
    
  </entry>
  
  <entry>
    <title>tcp会偶尔3秒timeout的分析以及如何用php规避这个问题</title>
    <link href="https://plantegg.github.io/2024/11/02/tcp%E4%BC%9A%E5%81%B6%E5%B0%943%E7%A7%92timeout/"/>
    <id>https://plantegg.github.io/2024/11/02/tcp会偶尔3秒timeout/</id>
    <published>2024-11-02T09:30:03.000Z</published>
    <updated>2024-11-20T07:08:06.252Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tcp会偶尔3秒timeout的分析以及如何用php规避这个问题"><a href="#tcp会偶尔3秒timeout的分析以及如何用php规避这个问题" class="headerlink" title="tcp会偶尔3秒timeout的分析以及如何用php规避这个问题"></a><a href="https://web.archive.org/web/20170317084941/http://mogu.io/tcp-three-second-timeout-with-php-3" target="_blank" rel="noopener">tcp会偶尔3秒timeout的分析以及如何用php规避这个问题</a></h1><blockquote><p>这是一篇好文章，随着蘑菇街的完蛋，蘑菇街技术博客也没了，所以特意备份一下这篇</p></blockquote><ul><li><p>作者：蚩尤 </p></li><li><p>时间：May 27, 2014</p></li></ul><p>2年前做一个cache中间件调用的时候，发现很多通过php的curl调用一个的服务会出现偶尔的connect_time超时, 表现为get_curlinfo的connect_time在3秒左右, 本来没怎么注意, 因为客户端的curl_timeout设置的就是3秒, 某天, 我把这个timeout改到了5秒后, 发现了一个奇怪的现象, 很多慢请求依旧表现为connect_time在3秒左右..看来这个3秒并不是因为客户端设置的timeout引起的.于是开始查找这个原因.</p><hr><p>首先, 凭借经验调整了linux内核关于tcp的几个参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net.core.netdev_max_backlog = 862144</span><br><span class="line">net.core.somaxconn = 262144</span><br></pre></td></tr></table></figure><p>经过观察发现依旧会有3秒超时, 而且数量并没有减少.</p><p>第二步, 排除是大并发导致的问题, 在一台空闲机器上也部署同样的服务, 仅让线上一台机器跑空闲机器的服务, 结果发现依旧会有报错.排除并发导致的问题.</p><p>最后, 通过查了大量的资料才发现并不是我们才遇到过这个问题, 而且这个问题并不是curl的问题, 它影响到所有tcp的调用, 网上各种说法, 但结论都指向linux内核对于tcp的实现.(某些版本会出现这些问题), 有兴趣的可以看下下面这两个资料.<br><a href="https://web.archive.org/web/20170317084941/http://www.spinics.net/lists/linux-net/msg17545.html" target="_blank" rel="noopener">资料1</a><br><a href="https://web.archive.org/web/20170317084941/http://marc.info/?t=120655182600018&r=1&w=2" target="_blank" rel="noopener">资料2</a></p><p>一看深入到linux内核..不管怎样修改的成本一定很大..于是乎, 发挥我们手中的php来规避这个问题的时间到了.</p><p>原本的代码, 简单实现，常规curl调用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function curl_call($p1, $p2 ...) &#123;</span><br><span class="line">   $ch = curl_init();</span><br><span class="line">   curl_setopt($ch, CURLOPT_TIMEOUT, 5);</span><br><span class="line">   curl_setopt($ch, CURLOPT_URL, &apos;http://demon.at&apos;);</span><br><span class="line">   $res = curl_exec($ch);</span><br><span class="line">   if (false === $res) &#123;</span><br><span class="line">      //失败..抛异常..</span><br><span class="line">   &#125;</span><br><span class="line">   return $res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出, 如果用上面的代码, 无法避免3秒connect_time的问题..这种实现对curl版本会有要求(CURLOPT_CONNECTTIMEOUT_MS)，主要的思路是，通过对链接时间进行毫秒级的控制(因为超时往往发生在connect的时候)，加上失败重试机制，来最大限度保证调用的正确性。所以,下面的代码就诞生了:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">function curl_call($p1, $p2, $times = 1) &#123;</span><br><span class="line">   $ch = curl_init();</span><br><span class="line">   curl_setopt($ch, CURLOPT_TIMEOUT, 5);</span><br><span class="line">   curl_setopt($ch, CURLOPT_URL, &apos;http://demon.at&apos;);</span><br><span class="line">   $curl_version = curl_version();</span><br><span class="line">   if ($curl_version[&apos;version_number&apos;] &gt;= 462850) &#123;</span><br><span class="line">      curl_setopt($ch, CURLOPT_CONNECTTIMEOUT_MS, 20);</span><br><span class="line">      curl_setopt($ch, CURLOPT_NOSIGNAL, 1);</span><br><span class="line">   &#125; else &#123;</span><br><span class="line">      throw new Exception(&apos;this curl version is too low, version_num : &apos; </span><br><span class="line">                         . $curl_version[&apos;version&apos;]);</span><br><span class="line">   &#125;</span><br><span class="line">   $res = curl_exec($ch);</span><br><span class="line">   curl_close($ch);</span><br><span class="line">   if (false === $res) &#123;</span><br><span class="line">      if (curl_errno($ch) == CURLE_OPERATION_TIMEOUTED</span><br><span class="line">             and $times != 最大重试阀值 ) &#123;</span><br><span class="line">         $times += 1;</span><br><span class="line">         return curl_call($p1, $p2, $times);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   return $res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段代码只是一个规避的简单实例, 一些小细节并没有可以完善..比如抛出异常常以后curl资源的手动释放等等..这里不做讨论..当然还漏了一点要说的是，对重试次数最好加上限制 :)</p><p>说明一下上面几个数字值的含义:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">462850 //因为php的CURLOPT_CONNECTTIMEOUT_MS需要 curl_version 7.16.2,这个值就是这个版本的数字版本号，还需要注意的是, php版本要大于5.2.3</span><br><span class="line">20 //连接超时的时间, 单位:ms</span><br></pre></td></tr></table></figure><hr><p>这样这个问题就这样通过php的代码来规避开了.<br>如果有对这个问题有更好的解决方法，欢迎指教.</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><a href="https://mp.weixin.qq.com/s/-pRA12sLJktbXa-srWn02w" target="_blank" rel="noopener">tcp connect 的流程是这样的</a>：<br>1、tcp发出SYN建链报文后，报文到ip层需要进行路由查询<br>2、路由查询完成后，报文到arp层查询下一跳mac地址<br>3、如果本地没有对应网关的arp缓存，就需要缓存住这个报文，发起arp请求<br>4、arp层收到arp回应报文之后，从缓存中取出SYN报文，完成mac头填写并发送给驱动。</p><p>问题在于，arp层缓存队列长度默认为3。如果你运气不好，刚好赶上缓存已满，这个报文就会被丢弃。</p><p>TCP层发现SYN报文发出去3s（默认值）还没有回应，就会重发一个SYN。这就是为什么少数连接会3s后才能建链。</p><p>幸运的是，arp层缓存队列长度是可配置的，用 sysctl -a | grep unres_qlen 就能看到，默认值为3。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;tcp会偶尔3秒timeout的分析以及如何用php规避这个问题&quot;&gt;&lt;a href=&quot;#tcp会偶尔3秒timeout的分析以及如何用php规避这个问题&quot; class=&quot;headerlink&quot; title=&quot;tcp会偶尔3秒timeout的分析以及如何用php规避
      
    
    </summary>
    
      <category term="TCP" scheme="https://plantegg.github.io/categories/TCP/"/>
    
    
      <category term="TCP" scheme="https://plantegg.github.io/tags/TCP/"/>
    
      <category term="TCP connection" scheme="https://plantegg.github.io/tags/TCP-connection/"/>
    
      <category term="unres_qlen" scheme="https://plantegg.github.io/tags/unres-qlen/"/>
    
      <category term="arp" scheme="https://plantegg.github.io/tags/arp/"/>
    
  </entry>
  
  <entry>
    <title>tcpdump 抓包卡顿分析</title>
    <link href="https://plantegg.github.io/2024/10/13/tcpdump%E6%8A%93%E5%8C%85%E5%8D%A1%E9%A1%BF%E5%88%86%E6%9E%90/"/>
    <id>https://plantegg.github.io/2024/10/13/tcpdump抓包卡顿分析/</id>
    <published>2024-10-13T09:30:03.000Z</published>
    <updated>2024-11-20T10:00:54.801Z</updated>
    
    <content type="html"><![CDATA[<h2 id="tcpdump-抓包卡顿分析"><a href="#tcpdump-抓包卡顿分析" class="headerlink" title="tcpdump 抓包卡顿分析"></a>tcpdump 抓包卡顿分析</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>从 192.168.104.1 上执行 ping 192.168.104.4 -c 1 ping 命令很快通了, 同时在ubuntu 机(192.168.104.4) 上抓包</p><p>在192.168.104.4 上的 tcpdump 要卡很久(几十秒)后才输出几十秒前抓到的包 :(，最一开始以为是自己通过 lima 虚拟化的 ubuntu 机器慢 or tcpdump 初始化慢导致的，但是发现等了几十秒后能看到几十秒前抓到的包，感觉有点诡异，所以分析了一下原因。</p><p>既然几十秒后能看到几十秒前的包，说明抓包正常，只是哪里卡了，所以用 strace 看看卡在了哪里。</p><p>下文用到的主要的 Debug 命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//-r 打印相对时间</span><br><span class="line">//-s 256 表示--string-limit，设置 limit 为 256，可以显示 sendto(下图黄底) 系统调用完整的 DNS 查询字符串(下图绿线)</span><br><span class="line">strace -r -s 256 tcpdump -i eth0 icmp</span><br></pre></td></tr></table></figure><p>分析步骤如下：</p><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤 1"></a>步骤 1</h3><p>如下图是 strace -r -s 256 tcpdump -i eth0 icmp 命令的输出 ，发现抓到包后对 IP 192.168.104.4 去做了 DNS 解析，而这个解析发给 127.0.0.53 后长时间没有响应，5 秒超时后并重试(下图红框)，导致多次 5 秒超时卡顿：</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20241008144023596.png" alt="image-20241008144023596"></p><p>于是在 &#x2F;etc&#x2F;hosts 添加 192.168.104.4 localhost 后不再对 192.168.104.4 进行解析，但是仍然会对对端的 IP 192.168.104.1 进行解析：</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20241008144145663.png" alt="image-20241008144145663"></p><p>上图说明：</p><ul><li>上图最后一个绿线表示 tcpdump 抓到了 ping 包(ICMP 协议包)</li><li>\0011\003104\003168\003192 表示：192.168.104.1 ，\0011 前面的 \001 表示 1 位，1 表示 ip 地址值的最后一个 &#x2F;&#x2F;把整个双引号内容丢给 GPT 会给你一个很好的解释</li></ul><h3 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤 2"></a>步骤 2</h3><p>从上面两个图中的 connect 内核函数可以看到每次都把 ip 丢给了 127.0.0.53 这个特殊 IP 来解析，下面是 GPT 给出的解释，我试了下将 DNSStubListener&#x3D;no(修改配置文件：&#x2F;etc&#x2F;systemd&#x2F;resolved.conf 后执行 systemctl restart systemd-resolved） 后 tcpdump 完全不卡了：</p><p>systemd-resolved:</p><ol><li>systemd-resolved 是一个系统服务，负责为本地应用程序提供网络名称解析。</li><li>它作为一个本地 DNS 解析器和缓存，可以提高 DNS 查询的效率。</li><li>systemd-resolved 支持多种 DNS 协议，如 DNSSEC、DNS over TLS 等。</li><li>它可以管理多个网络接口的 DNS 设置，适合复杂的网络环境。</li></ol><p>DNSStubListener 参数:</p><ol><li>DNSStubListener 是 systemd-resolved 的一个功能，默认情况下是启用的（yes）。</li><li>当启用时，systemd-resolved 会在本地 127.0.0.53 地址上运行一个 DNS 存根监听器。</li><li>这个存根监听器会接收本地应用程序的 DNS 查询请求，然后转发给实际的 DNS 服务器。</li><li>当设置 DNSStubListener&#x3D;no 时：<ul><li>存根监听器被禁用。</li><li>本地应用程序的 DNS 查询将直接发送到配置的 DNS 服务器，而不经过 systemd-resolved</li></ul></li></ol><p>现在 tcpdump 虽然不卡了，但是抓包的时候通过 strace 看到还是会走 DNS 解析流程，这个时候的 DNS 解析都发给了 192.168.104.2:53 (配置在 &#x2F;etc&#x2F;resolv.conf 中)，也就是 systemd-resolved 的 127.0.0.53:53 udp 端口虽然在监听，但是不响应任何查询导致了超时，而 192.168.104.2:53 服务正常</p><p>这个时候的 strace 日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">     0.000308 socket(AF_INET, SOCK_DGRAM|SOCK_CLOEXEC|SOCK_NONBLOCK, IPPROTO_IP) = 5 //SOCK_DGRAM UDP 模式</span><br><span class="line">     0.000134 setsockopt(5, SOL_IP, IP_RECVERR, [1], 4) = 0</span><br><span class="line">     0.000414 connect(5, &#123;sa_family=AF_INET, sin_port=htons(53), sin_addr=inet_addr(&quot;192.168.104.2&quot;)&#125;, 16) = 0 //目标主机 192.168.104.2</span><br><span class="line">     0.000373 ppoll([&#123;fd=5, events=POLLOUT&#125;], 1, &#123;tv_sec=0, tv_nsec=0&#125;, NULL, 0) = 1 ([&#123;fd=5, revents=POLLOUT&#125;], left &#123;tv_sec=0, tv_nsec=0&#125;)</span><br><span class="line">     0.000348 sendto(5, &quot;e\323\1\0\0\1\0\0\0\0\0\0\0014\003104\003168\003192\7in-addr\4arpa\0\0\f\0\1&quot;, 44, MSG_NOSIGNAL, NULL, 0) = 44 //发送 DNS 查询，这里可能会超时等待</span><br><span class="line">     0.000610 ppoll([&#123;fd=5, events=POLLIN&#125;], 1, &#123;tv_sec=5, tv_nsec=0&#125;, NULL, 0) = 1 ([&#123;fd=5, revents=POLLIN&#125;], left &#123;tv_sec=4, tv_nsec=999999042&#125;)</span><br><span class="line">     0.000203 ioctl(5, FIONREAD, [44])  = 0</span><br><span class="line">     //这次 0.000136 秒后收到了响应</span><br><span class="line">     0.000136 recvfrom(5, &quot;e\323\201\200\0\1\0\0\0\0\0\0\0014\003104\003168\003192\7in-addr\4arpa\0\0\f\0\1&quot;, 1024, 0, &#123;sa_family=AF_INET, sin_port=htons(53), sin_addr=inet_addr(&quot;192.168.104.2&quot;)&#125;, [28 =&gt; 16]) = 44</span><br><span class="line">     0.000462 close(5)                  = 0</span><br><span class="line">     0.000249 write(1, &quot;17:01:20.316738 IP 192.168.104.1 &gt; 192.168.104.4: ICMP echo request, id 31, seq 1, length 64\n&quot;, 9317:01:20.316738 IP 192.168.104.1 &gt; 192.168.104.4: ICMP echo request, id 31, seq 1, length 64</span><br><span class="line">) = 93</span><br><span class="line">     0.000306 newfstatat(AT_FDCWD, &quot;/etc/localtime&quot;, &#123;st_mode=S_IFREG|0644, st_size=561, ...&#125;, 0) = 0</span><br><span class="line">     0.000269 write(1, &quot;17:01:20.316795 IP 192.168.104.4 &gt; 192.168.104.1: ICMP echo reply, id 31, seq 1, length 64\n&quot;, 9117:01:20.316795 IP 192.168.104.4 &gt; 192.168.104.1: ICMP echo reply, id 31, seq 1, length 64</span><br></pre></td></tr></table></figure><h3 id="步骤-3"><a href="#步骤-3" class="headerlink" title="步骤 3"></a>步骤 3</h3><p>到这里大概理解这是 tcpdump 引入的 DNS 反查，看了下 tcpdump 帮助完全可以用 -n 参数彻底关闭 DNS 反查 IP：</p><blockquote><p>tcpdump 命令可以关闭 DNS 反查功能。要禁用 DNS 反查,你可以使用 <code>-n</code> 选项;&#x2F;&#x2F; 我用 tcpdump -n 这么久真没留意这个 -n 具体干啥的，每次都是条件反射写上去的 :(  </p></blockquote><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>其实很多应用中会偶尔卡顿，网络操作超时就是典型的导致这种卡顿的原因，从 CPU 资源使用率上还发现不了。比如<a href="https://plantegg.github.io/2019/06/02/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8_SSH_%E6%9A%97%E9%BB%91%E6%8A%80%E5%B7%A7%E8%AF%A6%E8%A7%A3--%E6%94%B6%E8%97%8F%E4%BF%9D%E5%B9%B3%E5%AE%89/#%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%89%E6%97%B6%E5%80%99ssh-%E6%AF%94%E8%BE%83%E6%85%A2%EF%BC%8C%E6%AF%94%E5%A6%82%E6%80%BB%E6%98%AF%E9%9C%80%E8%A6%8130%E7%A7%92%E9%92%9F%E5%90%8E%E6%89%8D%E8%83%BD%E6%AD%A3%E5%B8%B8%E7%99%BB%E5%BD%95">日常 ssh 连服务器有时候就会卡 30 秒</a></p><p>关于 GSSAPIAuthentication 解释如下，一看也是需要走网络进行授权认证，如果没有配置 kerberos 服务就会卡在网络等待上：</p><blockquote><p>[!TIP]</p><p>SSH 中的 GSSAPIAuthentication（Generic Security Services Application Program Interface Authentication）是一种身份验证机制，主要用于实现单点登录（Single Sign-On, SSO）功能。它允许用户在已经通过 Kerberos 认证的环境中，无需再次输入密码就可以登录到支持 GSSAPI 的 SSH 服务器。</p></blockquote><p>类似的网络卡顿&#x2F;DNS 解析卡顿是很常见的，大家掌握好 Debug 手段。</p><p>实际生产中可能没这么好重现也不太好分析，比如我就碰到过 Java 程序都卡在 DNS 解析的问题，Java 中这个 DNS 解析是串行的，所以一般可以通过 jstack 看看堆栈，多个锁窜行等待肯定不正常；多次抓到 DNS 解析肯定也不正常</p><p>比如下面这个 jstack 堆栈正常是不应该出现的，如果频繁出现就说明在走 DNS 查机器名啥的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&quot;Diagnose@diagnose-2-61&quot; #616 daemon prio=5 os_prio=0 tid=0x00007f7668ba6000 nid=0x2fc runnable [0x00007f75dbea8000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line">    at java.net.Inet4AddressImpl.lookupAllHostAddr(Native Method)</span><br><span class="line">    at java.net.InetAddress$2.lookupAllHostAddr(InetAddress.java:870)</span><br><span class="line">    at java.net.InetAddress.getAddressesFromNameService(InetAddress.java:1312)</span><br><span class="line">    at java.net.InetAddress$NameServiceAddresses.get(InetAddress.java:818)</span><br><span class="line">    - locked &lt;0x0000000500340c10&gt; (a java.net.InetAddress$NameServiceAddresses)</span><br><span class="line">    at java.net.InetAddress.getAllByName0(InetAddress.java:1301)</span><br><span class="line">    at java.net.InetAddress.getAllByName0(InetAddress.java:1221)</span><br><span class="line">    at java.net.InetAddress.getHostFromNameService(InetAddress.java:640)</span><br><span class="line">    at java.net.InetAddress.getHostName(InetAddress.java:565)</span><br><span class="line">    at java.net.InetAddress.getHostName(InetAddress.java:537)</span><br><span class="line">    at java.net.InetSocketAddress$InetSocketAddressHolder.getHostName(InetSocketAddress.java:82)</span><br><span class="line">    at java.net.InetSocketAddress$InetSocketAddressHolder.access$600(InetSocketAddress.java:56)</span><br><span class="line">    at java.net.InetSocketAddress.getHostName(InetSocketAddress.java:345)</span><br><span class="line">    at io.grpc.internal.ProxyDetectorImpl.detectProxy(ProxyDetectorImpl.java:127)</span><br><span class="line">    at io.grpc.internal.ProxyDetectorImpl.proxyFor(ProxyDetectorImpl.java:118)</span><br><span class="line">    at io.grpc.internal.InternalSubchannel.startNewTransport(InternalSubchannel.java:207)</span><br><span class="line">    at io.grpc.internal.InternalSubchannel.obtainActiveTransport(InternalSubchannel.java:188)</span><br><span class="line">    - locked &lt;0x0000000500344d38&gt; (a java.lang.Object)</span><br><span class="line">    at io.grpc.internal.ManagedChannelImpl$SubchannelImpl.requestConnection(ManagedChannelImpl.java:1130)</span><br><span class="line">    at io.grpc.PickFirstBalancerFactory$PickFirstBalancer.handleResolvedAddressGroups(PickFirstBalancerFactory.java:79)</span><br><span class="line">    at io.grpc.internal.ManagedChannelImpl$NameResolverListenerImpl$1NamesResolved.run(ManagedChannelImpl.java:1032)</span><br><span class="line">    at io.grpc.internal.ChannelExecutor.drain(ChannelExecutor.java:73)</span><br><span class="line">    at io.grpc.internal.ManagedChannelImpl$4.get(ManagedChannelImpl.java:403)</span><br><span class="line">    at io.grpc.internal.ClientCallImpl.start(ClientCallImpl.java:238)</span><br><span class="line"></span><br><span class="line">&quot;Check@diagnose-1-107&quot; #849 daemon prio=5 os_prio=0 tid=0x00007f600ee44200 nid=0x3e5 runnable [0x00007f5f12545000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line">        at java.net.Inet4AddressImpl.lookupAllHostAddr(Native Method)</span><br><span class="line">        at java.net.InetAddress$2.lookupAllHostAddr(InetAddress.java:870)</span><br><span class="line">        at java.net.InetAddress.getAddressesFromNameService(InetAddress.java:1312)</span><br><span class="line">        at java.net.InetAddress$NameServiceAddresses.get(InetAddress.java:818)</span><br><span class="line">        - locked &lt;0x000000063ee00098&gt; (a java.net.InetAddress$NameServiceAddresses)</span><br><span class="line">        at java.net.InetAddress.getAllByName0(InetAddress.java:1301)</span><br><span class="line">        at java.net.InetAddress.getAllByName(InetAddress.java:1154)</span><br><span class="line">        at java.net.InetAddress.getAllByName(InetAddress.java:1075)</span><br><span class="line">        at java.net.InetAddress.getByName(InetAddress.java:1025)</span><br><span class="line">        at *.*.*.*.*.check.Utils.isIPv6(Utils.java:59)</span><br><span class="line">        at *.*.*.*.*.check.checker.AbstractCustinsChecker.getVipCheckPoint(AbstractCustinsChecker.java:189)</span><br><span class="line">        at *.*.*.*.*.*.*.MySQLCustinsChecker.getVipCheckPoint(MySQLCustinsChecker.java:160)</span><br><span class="line">        at *.*.*.*.*.*.*.MySQLCustinsChecker.getCheckPoints(MySQLCustinsChecker.java:133)</span><br><span class="line">        at *.*.*.*.*.check.checker.AbstractCustinsChecker.checkNormal(AbstractCustinsChecker.java:314)</span><br><span class="line">        at *.*.*.*.*.check.checker.CheckExecutorImpl.check(CheckExecutorImpl.java:186)</span><br><span class="line">        at *.*.*.*.*.check.checker.CheckExecutorImpl.lambda$0(CheckExecutorImpl.java:118)</span><br><span class="line">        at *.*.*.*.*.check.checker.CheckExecutorImpl$$Lambda$302/130696248.call(Unknown Source)</span><br><span class="line">        at com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleTask.runInterruptibly(TrustedListenableFutureTask.java:111)</span><br><span class="line">        at com.google.common.util.concurrent.InterruptibleTask.run(InterruptibleTask.java:58)</span><br><span class="line">        at com.google.common.util.concurrent.TrustedListenableFutureTask.run(TrustedListenableFutureTask.java:75)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:879)</span><br></pre></td></tr></table></figure><p>这里以后可以加更多的 DNS 解析卡顿&#x2F;网络卡顿导致的问题案例……</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;tcpdump-抓包卡顿分析&quot;&gt;&lt;a href=&quot;#tcpdump-抓包卡顿分析&quot; class=&quot;headerlink&quot; title=&quot;tcpdump 抓包卡顿分析&quot;&gt;&lt;/a&gt;tcpdump 抓包卡顿分析&lt;/h2&gt;&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot;
      
    
    </summary>
    
      <category term="tcpdump" scheme="https://plantegg.github.io/categories/tcpdump/"/>
    
    
      <category term="performance" scheme="https://plantegg.github.io/tags/performance/"/>
    
      <category term="Linux" scheme="https://plantegg.github.io/tags/Linux/"/>
    
      <category term="tcpdump" scheme="https://plantegg.github.io/tags/tcpdump/"/>
    
      <category term="strace" scheme="https://plantegg.github.io/tags/strace/"/>
    
  </entry>
  
  <entry>
    <title>教科书级的根因推导——必做题</title>
    <link href="https://plantegg.github.io/2024/10/12/%E6%95%99%E7%A7%91%E4%B9%A6%E7%BA%A7%E7%9A%84%E6%A0%B9%E5%9B%A0%E6%8E%A8%E5%AF%BC%E2%80%94%E2%80%94%E5%BF%85%E5%81%9A%E9%A2%98/"/>
    <id>https://plantegg.github.io/2024/10/12/教科书级的根因推导——必做题/</id>
    <published>2024-10-12T09:30:03.000Z</published>
    <updated>2024-11-20T10:00:55.574Z</updated>
    
    <content type="html"><![CDATA[<h1 id="教科书级的根因推导——必做题"><a href="#教科书级的根因推导——必做题" class="headerlink" title="教科书级的根因推导——必做题"></a>教科书级的根因推导——必做题</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>A服务访问 B 服务，突然在某个时间点有个访问毛刺，RT 从50 ms飙到了80 ms，如下图</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20240607210416189.png" alt="image-20240607210416189"></p><p>这个时候发现网络连接数也从10000 涨到了 11000</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20240607210602281.png" alt="image-20240607210602281"></p><p>当时的QPS 一直是 2万，没有任何明显变化，任何其它指标都没有变化</p><h2 id="请回答问题"><a href="#请回答问题" class="headerlink" title="请回答问题"></a>请回答问题</h2><ol><li>到底是 B服务慢了所以 RT 上涨，RT 上涨后触发了新建连接，还是突然大量新建导致 B服务慢了，请写出你的详细推导</li><li>你如何在A 端来验证这个问题；你又如何在 B段来证明这个问题</li></ol><h2 id="我的分析"><a href="#我的分析" class="headerlink" title="我的分析"></a>我的分析</h2><p>首先是所有其他指标都正常，查下来看到的变化就是RT、总连接数同时抖了，所以以下分析都是基于在这个情形下，这两个指标到底谁是因、谁是果</p><p>分析的基本原则就是星球里最重要的概念：<a href="https://wx.zsxq.com/dweb2/index/topic_detail/814282542228452" target="_blank" rel="noopener">QPS、并发、RT 的关系</a></p><h3 id="为什么说连接数上涨是根因？"><a href="#为什么说连接数上涨是根因？" class="headerlink" title="为什么说连接数上涨是根因？"></a><strong>为什么说连接数上涨是根因？</strong></h3><p>抖动前 rt 50ms，QPS 2万，计算下来一个连接能扛的 QPS 是20( 1000ms&#x2F;50ms &#x3D;20 QPS   1秒等于1000ms)</p><p>1000个活跃连接就可以扛住这 2万的QPS，而总连接数在抖动前是10000，也就是连接数的水位只需要10% 就够了。按照抖动时的rt 80ms 则这10000个连接是可以扛 12.5万QPS 才会触发连接数不够创建新连接(理想值，也就是在QPS 到12.5万的80% 之前触发连接数不够的概率极小极小)</p><p>一个很关键的点：新建连接是业务端的行为，除非服务端太慢导致连接不够才会触发客户端新建，否则都是业务端的锅</p><p>几个注意的地方：</p><ul><li>另外一个注意下抖动的时候也没有触发业务端有超时报错(80ms 只是平均值)，如果真有超时报错可能会丢掉老连接，创建或者取新连接重试</li><li>实际上连接有总连接数、活跃连接数，总连接就是我们这里说的1万，活跃连接对应的就是 1000——也就是你随机去看业务状态，有1000个连接在忙着做业务处理&#x2F;查询，还有9000个连接在睡大觉</li></ul><h3 id="如何验证？"><a href="#如何验证？" class="headerlink" title="如何验证？"></a><strong>如何验证？</strong></h3><ol><li>让客户建1000-2000 个新连接看看——应该会触发RT 飚一下，但不一定是充分条件，实际在同一个客户的其他实例上也有抖动的场景里没有触发新建连接——相当于间接验证</li><li>或者让客户在他们的网卡上加 30ms模拟抖动从50ms加到80ms，看会不会触发新建几百个连接，如果没有触发新建说明RT 这个幅度的上涨不会触发新建连接</li></ol><p>不知道我解释清楚了没有</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;教科书级的根因推导——必做题&quot;&gt;&lt;a href=&quot;#教科书级的根因推导——必做题&quot; class=&quot;headerlink&quot; title=&quot;教科书级的根因推导——必做题&quot;&gt;&lt;/a&gt;教科书级的根因推导——必做题&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问
      
    
    </summary>
    
      <category term="performance" scheme="https://plantegg.github.io/categories/performance/"/>
    
    
      <category term="performance" scheme="https://plantegg.github.io/tags/performance/"/>
    
      <category term="network" scheme="https://plantegg.github.io/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>为什么你的连接不均衡了？</title>
    <link href="https://plantegg.github.io/2024/10/11/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%A0%E7%9A%84%E8%BF%9E%E6%8E%A5%E4%B8%8D%E5%9D%87%E8%A1%A1%E4%BA%86/"/>
    <id>https://plantegg.github.io/2024/10/11/为什么你的连接不均衡了/</id>
    <published>2024-10-11T09:30:03.000Z</published>
    <updated>2024-11-20T10:00:55.418Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么你的连接不均衡了？"><a href="#为什么你的连接不均衡了？" class="headerlink" title="为什么你的连接不均衡了？"></a>为什么你的连接不均衡了？</h1><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>假如你有两个Redis 服务，挂载在一个LVS 下，然后客户端使用的Jedis，Jedis 配置的最大连接池是200个连接，最小是100个(也就是超过100个，当闲置一段时间后就释放掉)。然后过一阵假设来了一个访问高峰，把连接数打到200，过一会高峰过去连接就会释放到100，客户端每次取连接然后随便 get 以下就归还连接</p><p><strong>场景构造小提示</strong>：</p><ol><li>用Jedis；</li><li>构造流量一波一波，就是有流量高峰(触发新建连接)、有流量低峰(触发连接释放)，如此反复</li><li>不需要太大流量把Redis 节点打到出现瓶颈</li></ol><p>如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20240618202012463.png" alt="image-20240618202012463"></p><p>期待场景：在这个过程中，Jedis 每次取一个连接随便get 一个key 就行了，无论怎么折腾两个Redis Service 的连接数基本是均衡的，实际也确实是这样</p><p>比如可以这样设置Jedis 参数(你也可以随便改)，也可以用你们生产环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">JedisPoolConfig config = new JedisPoolConfig();</span><br><span class="line">config.setMaxIdle(100);</span><br><span class="line">config.setMaxTotal(200);</span><br><span class="line">config.setMinEvictableIdleTimeMillis(3000);</span><br><span class="line">config.setTimeBetweenEvictionRunsMillis(1000);</span><br><span class="line">config.setTestOnBorrow(false);</span><br><span class="line">config.setTestOnReturn(false);</span><br><span class="line">config.setTestWhileIdle(false);</span><br><span class="line">config.setTestOnCreate(false);</span><br></pre></td></tr></table></figure><p>验证代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">import com.taobao.eagleeye.redis.clients.jedis.Jedis;</span><br><span class="line">import com.taobao.eagleeye.redis.clients.jedis.JedisPool;</span><br><span class="line">import com.taobao.eagleeye.redis.clients.jedis.JedisPoolConfig;</span><br><span class="line"></span><br><span class="line">public class JedisPoolTest &#123;</span><br><span class="line">    // 初始化连接超时时间</span><br><span class="line">    private static final int DEFAULT_CONNECTION_TIMEOUT = 5000;</span><br><span class="line">    // 查询超时时间</span><br><span class="line">    private static final int DEFAULT_SO_TIMEOUT = 2000;</span><br><span class="line">    private static final JedisPoolConfig config = new JedisPoolConfig();</span><br><span class="line">    private static JedisPool jedisPool = null;</span><br><span class="line"></span><br><span class="line">    public static void main(String args[]) &#123;</span><br><span class="line">        // 代理连接地址，用控制台上的&quot;代理地址&quot;。</span><br><span class="line">        String host = &quot;redis&quot;;</span><br><span class="line">        int port = 6379;</span><br><span class="line">        //String password = &quot;1234&quot;;</span><br><span class="line"></span><br><span class="line">        // 设置参考上面</span><br><span class="line">        config.setMaxTotal(xx);</span><br><span class="line">        config.setMaxIdle(xx);</span><br><span class="line">        config.setMinIdle(xx);</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        // 只需要初始化一次</span><br><span class="line">        try &#123;</span><br><span class="line">            jedisPool = new JedisPool(config, host, port, </span><br><span class="line">            DEFAULT_CONNECTION_TIMEOUT, DEFAULT_SO_TIMEOUT, password, 0, null);</span><br><span class="line">            try (Jedis jedis = jedisPool.getResource()) &#123;</span><br><span class="line">                if (!&quot;PONG&quot;.equals(jedis.ping())) &#123;</span><br><span class="line">                    throw new RuntimeException(&quot;Init Failed&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            // 如果有exception，说明初始化失败。</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 每次 API 查询都像下面这么写</span><br><span class="line">        Jedis jedis = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            jedis = jedisPool.getResource(); // 查询前获取一个连接</span><br><span class="line">            String ret = jedis.set(&quot;key&quot;, &quot;value&quot;);</span><br><span class="line">            if (&quot;OK&quot;.equals(ret)) &#123;</span><br><span class="line">                System.out.println(ret);</span><br><span class="line">                // SET success</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            // 连接错误，超时等情况</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            if (jedis != null) &#123;</span><br><span class="line">                // 查询结束后还回连接池，不是销毁连接</span><br><span class="line">                // 必须尽快还回，否则会导致连接池资源不够</span><br><span class="line">                jedis.close(); </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 只需要最后程序退出时调用一次，不需要每次查询完之后都调用</span><br><span class="line">        jedisPool.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行如上代码，应该看到一个负载均衡正常环境——符合预期</p><h2 id="不均衡重现"><a href="#不均衡重现" class="headerlink" title="不均衡重现"></a>不均衡重现</h2><p>背景里描述的是完全符合预期的，假设实际使用中两个 Redis中的一个节点的CPU有一个降频了&#x2F;争抢&#x2F;温度高 等种种原因，导致这个节点处理更慢了</p><p>如何模拟其中一个节点突然慢了(这些手段在之前的星球案例重现里都反复使用过了)</p><ol><li>你可以把Redis 进程绑到一个核上，然后在这这个核上跑一个死循环故意让；</li><li>或者，也可以在这个节点上给网络延迟加200ms 进去</li></ol><p>这个时候你再重新跑背景描述里的代码，一段时间后你会看到下图中红线对应的 Redis 节点上的连接数越来越高，QPS 越来越高(别用太大的压力，导致这个节点的访问超时哈)</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20240618203121532.png" alt="image-20240618203121532"></p><p>到这里就算是问题重现出来了</p><p><strong>重现确认注意：</strong></p><p>如果只是看到瞬间连接数不均衡这应该没有重现出来，因为节点慢了所以 active 要变高才会维系住同样的QPS，这是符合预期的。</p><p>期望的是长期运行后慢的节点上统计意义上的<strong>连接数越来越多、QPS 越来越大</strong></p><p>比如下图是重现过程中的连接数监控，可以看到橙色线对应的Redis 节点上的连接越来越多：</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/FqdkiFCrWvrfNTY3CtmRSZNpa9Ju.jpeg" alt="img"></p><p>下图是对应的QPS 监控，问题Redis 节点(黄色线)的QPS 比另外一个节点大很多，长期下去会导致问题节点成为瓶颈：</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/Fk0WyAcGQeTrlhcgZzlF9wJP9Ria.jpeg" alt="img"></p><h2 id="重现脚本和代码"><a href="#重现脚本和代码" class="headerlink" title="重现脚本和代码"></a>重现脚本和代码</h2><p>以下涉及的脚本、代码提交到 github，这些脚本、手段在我们之前的实验、案例都反复出现过了，我就不给了</p><p>参考星球里扒老师的操作(不含客户端Java代码)：<a href="https://malleable-elbow-b9f.notion.site/redis-f7dfcecb7f7441e1ba96f4da3ca8aee8?pvs=4" target="_blank" rel="noopener">https://malleable-elbow-b9f.notion.site/redis-f7dfcecb7f7441e1ba96f4da3ca8aee8?pvs=4</a> </p><p>星球里橘橘球用python 3.8 实现了一个python 版本的：<a href="https://github.com/gongyisheng/playground/blob/dev/network/lvs_case/readme.md" target="_blank" rel="noopener">https://github.com/gongyisheng/playground/blob/dev/network/lvs_case/readme.md</a> </p><p>好奇同学用Java&#x2F;Jedis 和Go两个版本(Go 版本是没有Jedis，也能重现问题)的实现代码：<a href="https://github.com/haoqixu/case-reproduction-240618" target="_blank" rel="noopener">https://github.com/haoqixu/case-reproduction-240618</a> </p><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><p>用 docker起两个Redis 节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//这里提供Redis docker run脚本</span><br></pre></td></tr></table></figure><h3 id="ipvsadm"><a href="#ipvsadm" class="headerlink" title="ipvsadm"></a>ipvsadm</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//创建一个 LVS，将上面的两个Redis 加入到负载均衡里面</span><br></pre></td></tr></table></figure><h3 id="Java-客户端代码"><a href="#Java-客户端代码" class="headerlink" title="Java 客户端代码"></a>Java 客户端代码</h3><p>完整代码应该很简单，就是一个Java + Jedis 的HelloWorld 上传到 github，别人下载代码后，自己配置一个 LVS + Redis 的负载均衡环境就能重现以上问题</p><h3 id="tc-qdisc"><a href="#tc-qdisc" class="headerlink" title="tc qdisc"></a>tc qdisc</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//给其中的一个 节点构造 200ms 的延时</span><br></pre></td></tr></table></figure><p>也可以跑死循环抢 CPU </p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>原因：Jedis 连接池使用的是 <a href="https://github.com/apache/commons-pool" target="_blank" rel="noopener">apache commons-pool</a> 这个组件，默认从连接池取连接使用的是 LIFO(last in first out) ，如果两个节点负载正常两个节点上的连接基本能保持在队列里交叉均衡；如果连接闲置久了释放的时候就是均衡释放的</p><p>但如果有一个节点处理慢了，那么这个节点的连接被取出来使用的时候必然需要更多的时间在连接池外面处理请求，用完归还的时候就会更高概率出现在队列的顶部，导致下次首先被取出来使用，长期下去就会出现快的节点上的连接慢慢被释放，慢的节点的连接越来越多，进而慢的节点的QPS 越来越高，最后这个节点崩了</p><h3 id="泛化问题"><a href="#泛化问题" class="headerlink" title="泛化问题"></a>泛化问题</h3><p>针对这个问题就一定是Jedis 和 Redis 才有吗？本质是我们没法期望所有节点一样快，导致连接归还一定有慢的，进而只要是取连接用 LIFO(last in first out)  就会有这个问题，Jedis&#x2F;Lettuce&#x2F;MySQL dbcp 都用了 <a href="https://github.com/apache/commons-pool" target="_blank" rel="noopener">apache commons-pool</a> 这个组件来实现连接池功能，而  apache commons-pool 默认就是 LIFO ，所以这些组件全部中枪。应该是用的 LinkedBlockingDeque 队列，它有有 FIFO 和 FILO 两种策略</p><p>那么没有用 apache-commons-pools 的就安全吗？也不一定，得看取连接的逻辑，一般都是 LIFO，比如 Druid 连接池的实现用的 stack ，也就是 stack 顶部的几个连接被反复使用，可能底部连接完全用不到的情况。 且Druid 还不提供接口去设置是不是 stack&#x2F;queue（LIFO&#x2F;FIFO)</p><p>你们的微服务只要是用连接池大概率也会有同样的问题</p><p>那么有什么好办法来解决类似的问题吗？<a href="https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8" target="_blank" rel="noopener">Druid 有个设置</a> phyTimeoutMillis 和 phyMaxUseCount (就是一个长连接用多久、或者执行了多少次SQL ) 来将长连接主动断开，这就有概率修复这个问题；</p><p>另外如果LVS 用的 WLC 均衡算法也可以fix 这个问题，见参考资料。</p><p>php听说有个功能，进程跑一段时间后自行销毁重建；担心内存泄漏啥的 —— 是不是很像遇到问题就重启，又不是不work，不优雅但是管用，有点像通信基站半夜重启</p><p>你看虽然是一次 Jedis 客户端在某些条件下导致的问题，只要你去通用化问题的本质就可以发现很容易地跳出来看到各个不同场景下同样会引起的问题，无招胜有招啊</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://plantegg.github.io/categories/LVS">https://plantegg.github.io/categories/LVS/</a>  强调下这次的不均衡和我这个链接里的两篇文章描述的毫无关系，只是接着这个机会可以重温一下导致不均衡的其它原因，做个汇总</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;为什么你的连接不均衡了？&quot;&gt;&lt;a href=&quot;#为什么你的连接不均衡了？&quot; class=&quot;headerlink&quot; title=&quot;为什么你的连接不均衡了？&quot;&gt;&lt;/a&gt;为什么你的连接不均衡了？&lt;/h1&gt;&lt;h2 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;
      
    
    </summary>
    
      <category term="LVS" scheme="https://plantegg.github.io/categories/LVS/"/>
    
    
      <category term="Linux" scheme="https://plantegg.github.io/tags/Linux/"/>
    
      <category term="LVS" scheme="https://plantegg.github.io/tags/LVS/"/>
    
      <category term="network" scheme="https://plantegg.github.io/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>一次抓包分析过程——Wireshark 新手上车</title>
    <link href="https://plantegg.github.io/2024/10/10/%E4%B8%80%E6%AC%A1%E6%8A%93%E5%8C%85%E5%88%86%E6%9E%90%E8%BF%87%E7%A8%8B/"/>
    <id>https://plantegg.github.io/2024/10/10/一次抓包分析过程/</id>
    <published>2024-10-10T02:30:03.000Z</published>
    <updated>2024-11-20T10:00:55.449Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一次抓包分析过程——Wireshark-新手上车"><a href="#一次抓包分析过程——Wireshark-新手上车" class="headerlink" title="一次抓包分析过程——Wireshark 新手上车"></a>一次抓包分析过程——Wireshark 新手上车</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>网友尝试做星球第一个必做实验的时候，什么内核参数都没改，发现请求经常会停滞 100ms，这种要怎么判断是局域网的网络问题还是应用问题呢？ 服务是 python3 -m http.server 启动的，看上去没有出现什么重传、窗口也没看到什么问题</p><p>因为不能提供环境给我，我尝试对这个抓包进行了分析，因为只有客户端抓包，所以分析结果是没有结论的，但分析过程比较适合入门 Wireshark，适合刚加入星球的、没分析过网络包的同学可以参考，熟手请忽略</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>整个抓包 28MB，跨度 600 毫秒，看得出带宽很大、RTT 极小(到Wireshark 里看看前几个包的交互 RT 就知道了)</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20240715093847359.png" alt="image-20240715093847359"></p><h3 id="详细分析"><a href="#详细分析" class="headerlink" title="详细分析"></a>详细分析</h3><p>看第一次卡 100ms 之前的抓包，在100ms 以前客户端ack 了所有Server 发出来的的tcp包(红框)，也就是说每一个发给客户端的包客户端都ack 完毕，证明客户端处理足够快，但是 8089端口不继续发包而是等了100ms再继续发，如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20240715094218182.png" alt="image-20240715094218182"></p><p>到这里的结论：</p><p>不是因为发送buffer、接收buffer太小导致的卡；也不是因为拥塞窗口导致的，就是Server 端没有发包。大概率是Server 进程卡了，或者Server 进程读取物理文件往OS buffer 写这些环节卡了（可以在服务端通过 strace -tt 看看进程在这 100 毫秒有没有往内核怼数据）</p><p>所以要继续在 Server 端来分析这个问题</p><p>怎么快速定位到红框、红线这里的包？</p><blockquote><p>到 Time Sequence 图上点平台两边的点都可以自动跳转到这里，每个点代表一个网络包，横坐标代表时间</p></blockquote><h2 id="其它分析"><a href="#其它分析" class="headerlink" title="其它分析"></a>其它分析</h2><p>将如下 Time Sequence 图使劲放大，从第一个包开始看，可以观察到教科书所说的慢启动</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20240715095134352.png" alt="image-20240715095134352"></p><p>整体看的话，慢启动几乎可以忽略，毕竟这个抓包是下载一个巨大的文件，如果是一个小文件这个慢启动还是影响很大的，如下图，红框部分看起来微不足道</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20240715095506381.png" alt="image-20240715095506381"></p><p>把时间范围放大，继续看，在卡之前红色箭头很长的，代表带宽、buffer有能力一次发送很多网络包，但是后面每次只发一点点网络包(绿色箭头长度)就卡了</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20240715095647702.png" alt="image-20240715095647702"></p><h2 id="重现"><a href="#重现" class="headerlink" title="重现"></a>重现</h2><p>我用 python3 当服务端未能重现这个卡100ms 的现象，拉取都很丝滑</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20240715101505977.png" alt="image-20240715101505977"></p><p>非常细节地去分析的话，也是能看到一些小问题的，比如1.9ms的卡顿、比如zero_window</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20240715103928266.png" alt="image-20240715103928266"></p><p>重现的时候，有1.9ms 这样的卡顿，但是不算有规律，因为这么小在整个传输过程中影响不大</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20240715103708750.png" alt="image-20240715103708750"></p><p>我重现的时候正好抓到了 seq 回绕，seq 是个 32位的无符号整数，到了最大值就从0又开始：</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20240715115500312.png" alt="image-20240715115500312"></p><p>此时的 Time Sequence: </p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20240715115655516.png" alt="image-20240715115655516"></p><h2 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h2><p>可以用实验1里面的一些手段debug 一下Server 为什么卡了，除了 strace -tt 还可以用 ebpf 试试看看 Server 的调度上哪里顿了 100ms</p><p>新手如何通过Wireshark 来看抓包？</p><p>首先不要纯粹为了学习去看，而是要问你的问题是什么？如果网络传输速度慢，我们就看  Time Sequence(斜率越陡速度越快)，去看为什么发送端不发包了</p><ul><li>如正文里的卡顿平台，在250ms内差不多要卡240ms 不发包，速度自然不行</li><li>我重现抓包中的zero Windows</li><li>达到网络BDP 瓶颈了，去看拥塞窗口在最大值的时候会丢包，触发降速</li></ul><p>里面可以看、要看的东西太多，所以我也说不上要看什么，而是要问你的问题是什么</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一次抓包分析过程——Wireshark-新手上车&quot;&gt;&lt;a href=&quot;#一次抓包分析过程——Wireshark-新手上车&quot; class=&quot;headerlink&quot; title=&quot;一次抓包分析过程——Wireshark 新手上车&quot;&gt;&lt;/a&gt;一次抓包分析过程——Wire
      
    
    </summary>
    
      <category term="tcpdump" scheme="https://plantegg.github.io/categories/tcpdump/"/>
    
    
      <category term="tcpdump" scheme="https://plantegg.github.io/tags/tcpdump/"/>
    
      <category term="wireshark" scheme="https://plantegg.github.io/tags/wireshark/"/>
    
  </entry>
  
  <entry>
    <title>一次故障的诊断过程</title>
    <link href="https://plantegg.github.io/2024/10/03/%E4%B8%80%E6%AC%A1%E6%95%85%E9%9A%9C%E7%9A%84%E8%AF%8A%E6%96%AD%E8%BF%87%E7%A8%8B--Sysbench%20%E9%87%8D%E8%BF%9E/"/>
    <id>https://plantegg.github.io/2024/10/03/一次故障的诊断过程--Sysbench 重连/</id>
    <published>2024-10-03T09:30:03.000Z</published>
    <updated>2024-11-20T10:00:53.686Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一次故障的诊断过程–Sysbench"><a href="#一次故障的诊断过程–Sysbench" class="headerlink" title="一次故障的诊断过程–Sysbench"></a>一次故障的诊断过程–Sysbench</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>我们的数据库需要做在线升级丝滑的验证，所以构造了一个测试环境，客户端Sysbench 用长连接一直打压力，Server 端的数据库做在线升级，这个在线升级会让 MySQL Server进程重启，毫无疑问连接会断开重连，所以期望升级的时候 Sysbench端 QPS 跌0几秒钟然后快速恢复</p><p>但是每次升级都是 Sysbench端 QPS 永久跌0，再也不能恢复，所以需要分析为什么，问题出在哪里？有人说是服务端的问题因为只有服务端做了变更</p><p>整个测试过程中 Sysbench 是配置的1-2个连接去压 MySQL Server</p><h2 id="Sysbench-介绍"><a href="#Sysbench-介绍" class="headerlink" title="Sysbench 介绍"></a>Sysbench 介绍</h2><p>以下介绍来自 ChatGPT-4，用过Sysbench的同学可以跳过这节：</p><p>Sysbench 是一个适用于多个系统的多线程基准测试工具，被广泛用于评估不同系统服务的性能，包括数据库系统（如 MySQL、PostgreSQL）、文件I&#x2F;O、CPU性能以及线程调度。</p><p>对于MySQL数据库，Sysbench 可以执行包括但不限于以下类型的测试：</p><ul><li><strong>OLTP (Online Transaction Processing) 测试</strong>: 这是最常见的数据库基准测试类型，模拟在线事务处理工作负载，包括事务性的Insert、Update、Delete和Select操作。</li><li><strong>点查找测试</strong>: 测试数据库针对特定索引的单行查找性能。</li><li><strong>简单写测试</strong>: 测试数据库进行插入操作的性能。</li><li><strong>复杂的选择查询测试</strong>: 运行复杂的Select查询，包含多个表和多个条件，测试数据库的读取性能。</li><li><strong>非事务性查询测试</strong>: 类似于事务查询测试，但不在事务框架内进行。</li></ul><p>Sysbench使用Lua脚本语言进行测试案例的开发，它预置了一些标准的测试模板如<code>oltp_read_only</code>、<code>oltp_read_write</code>、<code>oltp_write_only</code>等，这些可以针对数据库执行标准的过程以及自定义的工作负载。</p><p>进行Sysbench压力测试的基本步骤包括：</p><ol><li>安装Sysbench。</li><li>准备测试数据集，这通常涉及Sysbench创建数据库及表，然后填充数据。</li><li>执行测试，Sysbench以定义的并发线程数向数据库发送请求。</li><li>收集并分析结果，例如吞吐量（每秒事务数）、延迟以及一致性。</li></ol><p>一个简单的Sysbench测试命令可以是这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/bin/sysbench --debug=on --mysql-user=&apos;root&apos; --mysql-password=&apos;123&apos; --mysql-db=&apos;test&apos; --mysql-host=&apos;127.0.0.1&apos; --mysql-port=&apos;3307&apos; --tables=&apos;16&apos;  --table-size=&apos;10000&apos; --range-size=&apos;5&apos; --db-ps-mode=&apos;disable&apos; --skip-trx=&apos;on&apos; --mysql-ignore-errors=&apos;all&apos; --time=&apos;11080&apos; --report-interval=&apos;1&apos; --histogram=&apos;on&apos; --threads=2 oltp_read_write prepare</span><br><span class="line"></span><br><span class="line">/usr/local/bin/sysbench --debug=on --mysql-user=&apos;root&apos; --mysql-password=&apos;123&apos; --mysql-db=&apos;test&apos; --mysql-host=&apos;127.0.0.1&apos; --mysql-port=&apos;3307&apos; --tables=&apos;16&apos;  --table-size=&apos;10000&apos; --range-size=&apos;5&apos; --db-ps-mode=&apos;disable&apos; --skip-trx=&apos;on&apos; --mysql-ignore-errors=&apos;all&apos; --time=&apos;11080&apos; --report-interval=&apos;1&apos; --histogram=&apos;on&apos; --threads=2 oltp_read_write run</span><br><span class="line"></span><br><span class="line">sysbench oltp_read_write --table-size=100000 --mysql-db=testdb --mysql-user=root --mysql-password=password cleanup</span><br></pre></td></tr></table></figure><p>这个命令序列分别准备数据、运行测试和清理环境。运行测试部分变量<code>--threads=4</code>表示使用4个线程，<code>--time=60</code>表示测试持续时间60秒。</p><p>使用Sysbench时，请确保执行的测试与你的用例相关，并考虑到可能的性能差异。例如，如果目标是测试Web应用程序的数据库后端，确保测试的查询和事务能够反映真实的使用案例。</p><p>Sysbench的使用可以<a href="https://www.alibabacloud.com/help/zh/polardb/polardb-for-xscale/sysbench-test" target="_blank" rel="noopener">参考这个链接</a></p><h3 id="Sysbench-编译"><a href="#Sysbench-编译" class="headerlink" title="Sysbench 编译"></a>Sysbench 编译</h3><p>从 <a href="https://github.com/akopytov/sysbench.git" target="_blank" rel="noopener">github 下载源代码</a></p><p>以5.10(ALinux3&#x2F;CentOS8) 为例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yum install libtool -y //configure.ac:61: error: possibly undefined macro: AC_PROG_LIBTOOL</span><br><span class="line">yum install mysql-devel -y </span><br><span class="line"></span><br><span class="line">然后：</span><br><span class="line">./autogen.sh ; ./configure ; make ; make install </span><br><span class="line"></span><br><span class="line">起压力重现命令：</span><br><span class="line">sysbench --mysql-user=&apos;root&apos; --mysql-password=&apos;123&apos; --mysql-db=&apos;test&apos; --mysql-host=&apos;127.0.0.1&apos; --mysql-port=&apos;3306&apos; --tables=&apos;16&apos;  --table-size=&apos;10000&apos; --range-size=&apos;5&apos; --db-ps-mode=&apos;disable&apos; --skip-trx=&apos;on&apos; --mysql-ignore-errors=&apos;all&apos; --time=&apos;1180&apos; --report-interval=&apos;1&apos; --histogram=&apos;on&apos; --threads=1 oltp_read_only run --verbosity=5</span><br></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>研发人员第一反应重启了Sysbench 所在的ECS 然后恢复了，但是也没有了现场，我告诉他们等有了现场通知我，不要重启。今天终于再次重现了，我连上ECS 速度看了几个指标，通过 top 看到Sysbench 进程占用CPU 400%(整个 ECS 是4核)，如图：</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20240320173723799.png" alt="image-20240320173723799"></p><p>再进一步看看 sys 都在干什么，用 perf top -p 16329 可以看到：</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/FiI8oMUdJ4hVcAAJp_TgYA_pRcUh.png" alt="img"></p><p>确实是内核态在网络里面有网络方面的函数占比很高，且 spin_lock 严重，所以速度用 ss -s 和 netstat -anto 看看网络连接情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># ss -s</span><br><span class="line">Total: 41682</span><br><span class="line">TCP:   41498 (estab 5241, closed 1, orphaned 0, timewait 0)</span><br><span class="line"></span><br><span class="line">Transport Total     IP        IPv6</span><br><span class="line">RAW  0         0         0</span><br><span class="line">UDP  8         5         3</span><br><span class="line">TCP  41497     41495     2     //用了几万个连接了，这不正常</span><br><span class="line">INET  41505     41500     5</span><br><span class="line">FRAG  0         0         0</span><br><span class="line"></span><br><span class="line"># netstat -anto | head -30 //确实可以看到几万个连接，几乎都是 CLOSE_WAIT 状态</span><br><span class="line">Active Internet connections (servers and established)</span><br><span class="line">     注意第二列一直都是——79，Recv-Q的意思是3306端发给Sysbench的内容79字节，但这79自己还在 OS 的tcp buffer 中，等待Sysbench 读走</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       Timer</span><br><span class="line">tcp       79      0 192.168.0.1:48743       192.168.20.220:3306     CLOSE_WAIT  off (0.00/0/0)</span><br><span class="line">tcp       79      0 192.168.0.1:32747       192.168.20.220:3306     CLOSE_WAIT  off (0.00/0/0)</span><br><span class="line">tcp       79      0 192.168.0.1:40838       192.168.20.220:3306     CLOSE_WAIT  off (0.00/0/0)</span><br><span class="line">tcp       79      0 192.168.0.1:40190       192.168.20.220:3306     CLOSE_WAIT  off (0.00/0/0)</span><br><span class="line">tcp       79      0 192.168.0.1:58337       192.168.20.220:3306     CLOSE_WAIT  off (0.00/0/0)</span><br><span class="line">tcp       79      0 192.168.0.1:23976       192.168.20.220:3306     CLOSE_WAIT  off (0.00/0/0)</span><br><span class="line">tcp       79      0 192.168.0.1:41687       192.168.20.220:3306     CLOSE_WAIT  off (0.00/0/0)</span><br><span class="line">tcp       79      0 192.168.0.1:57214       192.168.20.220:3306     CLOSE_WAIT  off (0.00/0/0)</span><br><span class="line">tcp       79      0 192.168.0.1:30464       192.168.20.220:3306     CLOSE_WAIT  off (0.00/0/0)</span><br><span class="line">tcp       79      0 192.168.0.1:2015        192.168.20.220:3306     CLOSE_WAIT  off (0.00/0/0)</span><br><span class="line">tcp       79      0 192.168.0.1:16032       192.168.20.220:3306     CLOSE_WAIT  off (0.00/0/0)</span><br><span class="line">tcp       79      0 192.168.0.1:47188       192.168.20.220:3306     CLOSE_WAIT  off (0.00/0/0)</span><br><span class="line">tcp       79      0 192.168.0.1:3054        192.168.20.220:3306     CLOSE_WAIT  off (0.00/0/0)</span><br><span class="line">tcp       79      0 192.168.0.1:46344       192.168.20.220:3306     CLOSE_WAIT  off (0.00/0/0)</span><br></pre></td></tr></table></figure><p>延伸：Recv-Q 和 netstat <a href="https://plantegg.github.io/2019/04/21/netstat%E5%AE%9A%E4%BD%8D%E6%80%A7%E8%83%BD%E6%A1%88%E4%BE%8B/">定位性能案例可以看这篇</a></p><h3 id="内核代码"><a href="#内核代码" class="headerlink" title="内核代码"></a>内核代码</h3><p>前文通过 perf top 可以看到 __inet_check_established 这个函数占用非常高</p><p>不符合正常逻辑，<a href="https://github.com/plantegg/linux/blob/3157b476f8216d2655c1c85bad53c975190689ba/net/ipv4/inet_hashtables.c#L447" target="_blank" rel="noopener">github 内核源码地址</a>(我只加了注释)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">//connect()时进行随机端口四元组可用性的判断</span><br><span class="line">//如果本地地址和目标地址组成的元组之前已经存在了，则返回错误码EADDRNOTAVAIL: Cannot assign requested address</span><br><span class="line">//这个时候即使设置了REUSEADDR也要报错</span><br><span class="line">/* called with local bh disabled */</span><br><span class="line">static int __inet_check_established(struct inet_timewait_death_row *death_row,</span><br><span class="line">    struct sock *sk, __u16 lport,</span><br><span class="line">    struct inet_timewait_sock **twp)</span><br><span class="line">&#123;</span><br><span class="line">struct inet_hashinfo *hinfo = death_row-&gt;hashinfo;</span><br><span class="line">struct inet_sock *inet = inet_sk(sk);</span><br><span class="line">__be32 daddr = inet-&gt;inet_rcv_saddr;</span><br><span class="line">__be32 saddr = inet-&gt;inet_daddr;</span><br><span class="line">int dif = sk-&gt;sk_bound_dev_if;</span><br><span class="line">struct net *net = sock_net(sk);</span><br><span class="line">int sdif = l3mdev_master_ifindex_by_index(net, dif);</span><br><span class="line">INET_ADDR_COOKIE(acookie, saddr, daddr);</span><br><span class="line">const __portpair ports = INET_COMBINED_PORTS(inet-&gt;inet_dport, lport);</span><br><span class="line">unsigned int hash = inet_ehashfn(net, daddr, lport,</span><br><span class="line"> saddr, inet-&gt;inet_dport);</span><br><span class="line">//inet_ehash_bucket存放ESTABLISHED状态的socket 哈希表</span><br><span class="line">struct inet_ehash_bucket *head = inet_ehash_bucket(hinfo, hash);</span><br><span class="line">spinlock_t *lock = inet_ehash_lockp(hinfo, hash);</span><br><span class="line">struct sock *sk2;</span><br><span class="line">const struct hlist_nulls_node *node;</span><br><span class="line">struct inet_timewait_sock *tw = NULL;</span><br><span class="line"></span><br><span class="line">spin_lock(lock);</span><br><span class="line">//遍历检查四元组是否冲突</span><br><span class="line">sk_nulls_for_each(sk2, node, &amp;head-&gt;chain) &#123;</span><br><span class="line">if (sk2-&gt;sk_hash != hash)</span><br><span class="line">continue;</span><br><span class="line">//INET_MATCH 执行四元组比较</span><br><span class="line">if (likely(INET_MATCH(sk2, net, acookie,</span><br><span class="line"> saddr, daddr, ports, dif, sdif))) &#123;</span><br><span class="line">if (sk2-&gt;sk_state == TCP_TIME_WAIT) &#123;</span><br><span class="line">tw = inet_twsk(sk2);</span><br><span class="line">if (twsk_unique(sk, sk2, twp))</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">goto not_unique;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">……</span><br><span class="line">   </span><br><span class="line">not_unique:</span><br><span class="line">spin_unlock(lock);</span><br><span class="line">return -EADDRNOTAVAIL;   //Cannot assign requested address错误，在510行看到了下一节 telnet/strace 中的错误信息</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// #defineEADDRNOTAVAIL227/* Cannot assign requested address */</span><br></pre></td></tr></table></figure><p>到这里可以很清楚说明问题在客户端而不是服务端，但是要回答：</p><ol><li>为什么CPU这么高，CPU都在忙什么</li><li>什么原因会导致 CLOSE_WAIT 状态</li><li>为什么Sysbench 要疯狂创建4万多个连接；</li></ol><p>所以接下来我们就来分别回答这三个问题</p><h3 id="为什么CPU这么高，CPU都在忙什么"><a href="#为什么CPU这么高，CPU都在忙什么" class="headerlink" title="为什么CPU这么高，CPU都在忙什么"></a>为什么CPU这么高，CPU都在忙什么</h3><p>首先用 strace -p Sysbench-pid 看看 Sysbench 进程都在忙什么，下图最上面是 Sysbench 在疯狂不断地 connect：</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20240320174806093.png" alt="image-20240320174806093"></p><p>从上图最上面的Strace 来看 Sysbench在疯狂创建连接，但是在Connect 的时候报错：<strong>无法指定被请求的地址</strong></p><p>那接下来我就要ping 一下 192.168.20.220 这个IP 是OK的，再然后telnet  192.168.20.220 22 发现没报错但是也没有 SSH 让我输密码，于是看了下  cat &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;ip_local_port_range  是4万个Local Port 可用，这个时候可以去看看我<a href="https://plantegg.github.io/2020/11/30/%E4%B8%80%E5%8F%B0%E6%9C%BA%E5%99%A8%E4%B8%8A%E6%9C%80%E5%A4%9A%E8%83%BD%E5%88%9B%E5%BB%BA%E5%A4%9A%E5%B0%91%E4%B8%AATCP%E8%BF%9E%E6%8E%A5/">这篇关于可用端口的经典文章</a> </p><p>于是我改了下Port Range范围多加了1万Port 上去，然后很快看到如图 ss -s 就有5万连接了，说明你给多少Port 都不够用</p><p>同时我也用 telnet 192.168.20.220  3306 报错是：<strong>Cannot assign requested address</strong> —— 这个报错和 <strong>无法指定被请求的地址</strong> 很像了，到这里可以看到做一个基本结论：</p><ol><li>之所以内核 sys CPU 跑高到 100%，是因为当Local Port 用完，又要新建连接的时候内核会用死循环去找可用端口，导致CPU 跑高（这也是为什么telnet 22端口不会报错，也不会正常出来SSH login——因为抢不到CPU 资源去走选端口的流程） </li><li><strong>Cannot assign requested address</strong>  和 <strong>无法指定被请求的地址</strong> 报错是找不到可用端口导致的，还没有走到三次握手，也就是和服务端无关</li></ol><p>继续验证：</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20240320180024067.png" alt="image-20240320180024067"></p><p>上图是先把local port 增多，然后立即 telnet 3306 发现成功了！这更是证明了上面的结论2</p><p>到这里分析清楚了为什么CPU 高—— Sysbench疯狂建连接导致端口用完，内核要用死循环不断去找可用端口导致了CPU使用率高，因为是内核态的行为所以表现出来就是 sys CPU 100%</p><p>而telnet 22端口不报这个错，是因为 22端口的可用端口几万个没有被使用掉，但是22端口也没让我输密码，这里应该是telnet 22时抢不到CPU 造成TCP 三次握手缓慢，但绝对不会报 Cannot assign requested address 错误</p><h3 id="什么原因会导致-CLOSE-WAIT-状态"><a href="#什么原因会导致-CLOSE-WAIT-状态" class="headerlink" title="什么原因会导致 CLOSE_WAIT 状态"></a>什么原因会导致 CLOSE_WAIT 状态</h3><p>在将这个问题前还是请先去看看 CLOSE_WAIT 代表了什么含义：  <a href="https://plantegg.github.io/2021/04/06/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%99%E4%B9%88%E5%A4%9ACLOSE_WAIT/">为什么这么多CLOSE_WAIT</a></p><p>当同事们看到几万个连接的时候第一反应就是能不能改改这两 Linux 的系统参数：tcp_tw_reuse, tcp_tw_recycle 让端口&#x2F;连接快速回收？</p><p>有没有你们都是这种同事，看到一个现象条件反射得出这个结论，这都是<strong>略知皮毛的经验太多了导致</strong>的</p><p>我在 《为什么这么多CLOSE_WAIT》一文中反复提到这张图，以及学霸是怎么从这张图推断原因的：</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/b3d075782450b0c8d2615c5d2b75d923.png" alt="image.png"></p><p>看完上面这个图和我的 《为什么这么多CLOSE_WAIT》就应该知道 <strong>CLOSE_WAIT 就是 Sysbench 没有调 Socket.close 导致的</strong> 和内核没有关系，所以改啥内核参数也没有用，因为在这次问题中很多研发同学看到 CLOSE_WAIT 第一反应是去改这些参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.tcp_tw_recycle = 0</span><br><span class="line">net.ipv4.tcp_tw_reuse = 0</span><br></pre></td></tr></table></figure><p>如何进一步证明是Sysbench的问题呢？可以抓包看看：</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20240320181258965.png" alt="image-20240320181258965">上图是在 Sysbench 所在ECS 上抓包可以看到所有连接都是这样，注意第四个包是 Server端在3次握手成功后发了 Server Greeting 给客户端 Sysbench，此时Sysbench 应该发自己的账号密码来 Login但是抓包永远卡在这里，也就是Sysbench 建立完连接后跑了，不搭理服务端发了什么，这也是为什么最前面的 netstat -anto 看到 Recv-Q 这列总是79，这79长度的内容就是 Server 发给Sysbench 的 Server Greeting 内容，本该Sysbench 去读走 Server Greeting 然后按照MySQL 协议发账号密码，但是不，此时Sysbench 颠了，不管这个连接了，又去创建新连接于是重复上面的过程；直到本地端口用完，sys CPU 干到 100%</p><p>其实上面这个抓包的连接状态是 ESTABLISHED 状态，为什么最终看到的是 CLOSE_WAIT 呢，因为 Server发了 Server Greeting 后有一个超时时间，迟迟等不到Sysbench Client的账号密码就会发 FIN 给Client 端请求断开这个连接，导致Client断的连接状态从 ESTABLISHED 进入 CLOSE_WAIT ，这从上面的 TCP 状态图完全可以推导出来，扩大抓包时间的话会抓到 Server 发过来的 FIN 包</p><p>你要看不懂这个抓包，可以找个正常的MySQL-client 连 Server抓一次包，有个正常的对比会很幸福，我丢一个正常的给大家对比参考，上面错在 Sysbench 没有发如下红框的包：</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/FqnYYzopMqEd98ZTEfhNgCfKJIoI.png" alt="img"></p><p>Server 一重启就去看 netstat 的话确实都是 ESTABLISHED：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># netstat -anto | head -30 |grep -E &quot;State|:3306 &quot;</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       Timer</span><br><span class="line">tcp       78      0 192.168.0.1:46344       192.168.20.220:3306     ESTABLISHED off (0.00/0/0)</span><br><span class="line">tcp       78      0 192.168.0.1:44592       192.168.20.220:3306     ESTABLISHED off (0.00/0/0)</span><br><span class="line">tcp       78      0 192.168.0.1:45908       192.168.20.220:3306     ESTABLISHED off (0.00/0/0)</span><br><span class="line">tcp       78      0 192.168.0.1:44166       192.168.20.220:3306     ESTABLISHED off (0.00/0/0)</span><br><span class="line">tcp       78      0 192.168.0.1:59484       192.168.20.220:3306     ESTABLISHED off (0.00/0/0)</span><br><span class="line">tcp       78      0 192.168.0.1:60720       192.168.20.220:3306     ESTABLISHED off (0.00/0/0)</span><br><span class="line">tcp       78      0 192.168.0.1:53436       192.168.20.220:3306     ESTABLISHED off (0.00/0/0)</span><br><span class="line">tcp       78      0 192.168.0.1:58690       192.168.20.220:3306     ESTABLISHED off (0.00/0/0)</span><br><span class="line">tcp       78      0 192.168.0.1:35932       192.168.20.220:3306     ESTABLISHED off (0.00/0/0)</span><br><span class="line">tcp       78      0 192.168.0.1:53944       192.168.20.220:3306     ESTABLISHED off (0.00/0/0)</span><br><span class="line">tcp       78      0 192.168.0.1:59758       192.168.20.220:3306     ESTABLISHED off (0.00/0/0)</span><br><span class="line">tcp       78      0 192.168.0.1:53676       192.168.20.220:3306     ESTABLISHED off (0.00/0/0)</span><br><span class="line">tcp       78      0 192.168.0.1:59304       192.168.20.220:3306     ESTABLISHED off (0.00/0/0)</span><br><span class="line">tcp       78      0 192.168.0.1:41848       192.168.20.220:3306     ESTABLISHED off (0.00/0/0)</span><br><span class="line">tcp       78      0 192.168.0.1:44312       192.168.20.220:3306     ESTABLISHED off (0.00/0/0)</span><br><span class="line">tcp       78      0 192.168.0.1:56654       192.168.20.220:3306     ESTABLISHED off (0.00/0/0)</span><br><span class="line">tcp       78      0 192.168.0.1:3516        192.168.20.220:3306     ESTABLISHED off (0.00/0/0)</span><br><span class="line">tcp       78      0 192.168.0.1:39316       192.168.20.220:3306     ESTABLISHED off (0.00/0/0)</span><br><span class="line">tcp       78      0 192.168.0.1:55074       192.168.20.220:3306     ESTABLISHED off (0.00/0/0)</span><br><span class="line">tcp       78      0 192.168.0.1:59476       192.168.20.220:3306     ESTABLISHED off (0.00/0/0)</span><br><span class="line">tcp       78      0 192.168.0.1:48854       192.168.20.220:3306     ESTABLISHED off (0.00/0/0)</span><br></pre></td></tr></table></figure><p>此时端口还够的时候去 strace 看到Sysbench 确实在疯狂 connect 建连接，也不像端口不够的时候会报错：</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20240320184307103.png" alt="image-20240320184307103"></p><p>到这里就可以回答：什么原因会导致 CLOSE_WAIT 状态？因为Sysbench 没有去正常 Login MySQL，也没有调用 Socket.close 导致的</p><h3 id="为什么Sysbench-要疯狂创建4万多个连接"><a href="#为什么Sysbench-要疯狂创建4万多个连接" class="headerlink" title="为什么Sysbench 要疯狂创建4万多个连接"></a>为什么Sysbench 要疯狂创建4万多个连接</h3><p>为什么Sysbench 要疯狂创建4万多个连接，且还在不停地创建，这就要涉及到 Sysbench 具体代码逻辑(这个版本的 Sysbench 被我厂同事魔改过) ，在一猛子扎进去看代码逻辑前，我换了个开源的 Sysbench 版本(Update 20240325 其实是换了个压测环境，用了不同的Sysbench而已)，问题就消失了 —— 有时候猛干不去取巧</p><p>到此可以说明问题的原因就是：<strong>这个 Sysbench 版本在连接异常断开(Server升级主动断开连接)后，新建连接逻辑错误，疯狂建连接引起的</strong></p><h4 id="Update-20240327"><a href="#Update-20240327" class="headerlink" title="Update 20240327"></a><a href="https://malleable-elbow-b9f.notion.site/sysbench-kill-9eeaf1bf51b44510a7204de14b953705" target="_blank" rel="noopener">Update 20240327</a></h4><p>后来经过网友 <a href="https://malleable-elbow-b9f.notion.site/sysbench-centos-0445e571d34d40788a237507de34b371" target="_blank" rel="noopener">扒皮哥和 haoqixu的耐心分析</a>，发现这个问题不完是 Sysbench 本身代码的问题，Sysbench 依赖 libmysqlclient.so 包去连MySQL-Server 和处理MySQL 协议等，而这个 Bug 存在 libmysqlclient.so 中，准确来说是MariaDB的 libmysqlclient 中(和版本没关系，最新版还有这个问题)，如果换成MySQL Community的 libmysqlclient 就不存在这个问题了。划重点：无论你怎么更换 Sysbench 版本这个问题也无法解决</p><p>另外 MySQL 社区和 MariaDB 的 libmysqlclient 只是接口一样，实现完全可以不同，<a href="https://mariadb.com/kb/en/mysql_real_connect/" target="_blank" rel="noopener">MariaDB 要求连接重连的时候先 close 再init 后才能使用</a>，而MySQL 社区版本没有这个要求，所以改 Sysbench 重连的代码也可以 fix 这个问题</p><p>这个问题也有人怀疑过OS 的问题，比如换个OS 就好了，但我始终坚持是 Sysbench的问题，因为建连接后不读走TCP buffer里的内容都是业务层面的逻辑(相对于OS Sysbench和libmysqlclient 都是业务层)，所以这个错误肯定不在OS</p><p>但是很多人换了 OS 就正常了，其实这里不是你只换了 OS，而是换 OS 的时候你顺便把 libmysqlclient 也换了你自己都不知道，这就是我们常说的瞎蒙蒙对了，但是这种经验却是错误的</p><p>更换 libmysqlclient 来验证：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">yum remove  mariadb-devel -y //删掉 mariadb-devel 所带的 libmysqlclient 18</span><br><span class="line">rpm -i https://dev.mysql.com/get/mysql80-community-release-el8-9.noarch.rpm</span><br><span class="line">yum install mysql-community-devel -y //安装 mysql-community-deve ,会带上 libmysqlclient 21</span><br><span class="line">./configure</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看依赖</span></span><br><span class="line">objdump -x /usr/local/bin/sysbench |grep libmysqlclient</span><br><span class="line"></span><br><span class="line">  NEEDED               libmysqlclient.so.21</span><br><span class="line">  required from libmysqlclient.so.21:</span><br><span class="line">    0x03532d60 0x00 08 libmysqlclient_21.0</span><br><span class="line">0000000000000000       F *UND*  0000000000000000              mysql_stmt_next_result@@libmysqlclient_21.0</span><br><span class="line">0000000000000000       F *UND*  0000000000000000              mysql_errno@@libmysqlclient_21.0</span><br><span class="line">... 省略若干</span><br><span class="line">0000000000000000       F *UND*  0000000000000000              mysql_server_end@@libmysqlclient_21.0</span><br></pre></td></tr></table></figure><h4 id="自己编译-libmariadb-so"><a href="#自己编译-libmariadb-so" class="headerlink" title="自己编译 libmariadb.so"></a>自己编译 libmariadb.so</h4><p>通过下载 mariadb-connector-c-3.3 源码，自己独立编译，新生成的 so 包不再导致CPU飙高，但是TPS 永远跌零，而通过yum 安装的是mariadb-connector-c-3.2.6</p><p>此时抓包，可以看到3.3 收到Server Greeting 后也不发送账号密码，但是直接 RST 了连接，这样使得连接被释放，占用端口被释放，CPU不会飙高，但是连接永远无法创建成功，TPS 永远跌零</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mariadb-connector-c-3.3 抓包：</span><br><span class="line">15100Mar 27, 2024 17:07:53.422009421 CST0.001052729495483306049548 → 3306 [SYN] Seq=0 Win=65495 Len=0 MSS=65495 SACK_PERM=1 TSval=1021766452 TSecr=0 WS=128</span><br><span class="line">15101Mar 27, 2024 17:07:53.422013946 CST0.00000452533064954803306 → 49548 [SYN, ACK] Seq=0 Ack=1 Win=65483 Len=0 MSS=65495 SACK_PERM=1 TSval=1021766452 TSecr=1021766452 WS=128</span><br><span class="line">15102Mar 27, 2024 17:07:53.422018506 CST0.000004560495483306049548 → 3306 [ACK] Seq=1 Ack=1 Win=65536 Len=0 TSval=1021766452 TSecr=1021766452</span><br><span class="line">15103Mar 27, 2024 17:07:53.422116125 CST0.000097619495483306049548 → 3306 [FIN, ACK] Seq=1 Ack=1 Win=65536 Len=0 TSval=1021766452 TSecr=1021766452</span><br><span class="line">15104Mar 27, 2024 17:07:53.422146191 CST0.00003006633064954877Server Greeting proto=10 version=8.2.0 //Server Greeting</span><br><span class="line">15105Mar 27, 2024 17:07:53.422155229 CST0.000009038495483306049548 → 3306 [RST] Seq=2 Win=0 Len=0</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20240327171929387.png" alt="image-20240327171929387"></p><p>此时：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#ldd /usr/local/bin/sysbench</span><br><span class="line">linux-vdso.so.1 (0x00007ffc3a736000)</span><br><span class="line">libmariadb.so.3 =&gt; /lib64/libmariadb.so.3 (0x00007f3ce6352000)  </span><br><span class="line">libdl.so.2 =&gt; /lib64/libdl.so.2 (0x00007f3ce634b000)</span><br><span class="line">libm.so.6 =&gt; /lib64/libm.so.6 (0x00007f3ce6205000)</span><br><span class="line">libgcc_s.so.1 =&gt; /lib64/libgcc_s.so.1 (0x00007f3ce61ea000)</span><br><span class="line">libpthread.so.0 =&gt; /lib64/libpthread.so.0 (0x00007f3ce61c8000)</span><br><span class="line">libc.so.6 =&gt; /lib64/libc.so.6 (0x00007f3ce5fec000)</span><br><span class="line">libssl.so.1.1 =&gt; /lib64/libssl.so.1.1 (0x00007f3ce5f53000)</span><br><span class="line">libcrypto.so.1.1 =&gt; /lib64/libcrypto.so.1.1 (0x00007f3ce5c58000)</span><br><span class="line">/lib64/ld-linux-x86-64.so.2 (0x00007f3ce63f1000)</span><br><span class="line">libz.so.1 =&gt; /lib64/libz.so.1 (0x00007f3ce5c3e000)</span><br><span class="line"></span><br><span class="line">#objdump -x /usr/local/bin/sysbench |grep libmysqlclient</span><br><span class="line">    0x0f735338 0x00 04 libmysqlclient_18  </span><br><span class="line">    </span><br><span class="line">#rpm -q --whatprovides /lib64/libmariadb.so.3</span><br><span class="line">mariadb-connector-c-3.2.6-1.al8.x86_64</span><br><span class="line"></span><br><span class="line">#yum info mariadb-connector-c-3.2.6-1.al8.x86_64</span><br><span class="line">上次元数据过期检查：0:23:09 前，执行于 2024年03月27日 星期三 16时53分17秒。</span><br><span class="line">已安装的软件包</span><br><span class="line">名称         : mariadb-connector-c</span><br><span class="line">版本         : 3.2.6</span><br><span class="line">发布         : 1.al8</span><br><span class="line">架构         : x86_64</span><br><span class="line">大小         : 545 k</span><br><span class="line">源           : mariadb-connector-c-3.2.6-1.al8.src.rpm</span><br><span class="line">仓库         : @System</span><br><span class="line">来自仓库     : alinux3-updates</span><br><span class="line">概况         : The MariaDB Native Client library (C driver)</span><br><span class="line">URL          : http://mariadb.org/</span><br><span class="line">协议         : LGPLv2+</span><br><span class="line">描述         : The MariaDB Native Client library (C driver) is used to connect</span><br><span class="line">             : applications developed in C/C++ to MariaDB and MySQL databases.</span><br></pre></td></tr></table></figure><p>Sysbench 建连接堆栈，当端口不够的时候很容易抓到 connect 函数，因为connect 需要lookup 可用端口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#pstack 1448113</span><br><span class="line">Thread 3 (Thread 0x7f9a0b23c640 (LWP 1448115)):</span><br><span class="line">#0  0x00007f9a0b9722bb in connect () from /lib64/libpthread.so.0</span><br><span class="line">#1  0x00007f9a0bb02b00 in pvio_socket_internal_connect (pvio=0x7f99fa5db270, name=0x7f99fc0247c0, namelen=16) at /root/mariadb-connector-c-3.2.6/plugins/pvio/pvio_socket.c:642</span><br><span class="line">#2  0x00007f9a0bb02d76 in pvio_socket_connect_sync_or_async (pvio=0x7f99fa5db270, name=0x7f99fc0247c0, namelen=16) at /root/mariadb-connector-c-3.2.6/plugins/pvio/pvio_socket.c:750</span><br><span class="line">#3  0x00007f9a0bb03499 in pvio_socket_connect (pvio=0x7f99fa5db270, cinfo=0x7f9a0b23b3d0) at /root/mariadb-connector-c-3.2.6/plugins/pvio/pvio_socket.c:919</span><br><span class="line">#4  0x00007f9a0bb15277 in ma_pvio_connect (pvio=0x7f99fa5db270, cinfo=0x7f9a0b23b3d0) at /root/mariadb-connector-c-3.2.6/libmariadb/ma_pvio.c:484</span><br><span class="line">#5  0x00007f9a0bb0b59c in mthd_my_real_connect (mysql=0x7f99fc01ff50, host=0x14e4110 &quot;127.0.0.1&quot;, user=0x14e27c0 &quot;root&quot;, passwd=0x14e40c0 &quot;123&quot;, db=0x14e28f0 &quot;test&quot;, port=3306, unix_socket=0x0, client_flag=65536) at /root/mariadb-connector-c-3.2.6/libmariadb/mariadb_lib.c:1462</span><br><span class="line">#6  0x00007f9a0bb0affb in mysql_real_connect (mysql=0x7f99fc01ff50, host=0x14e4110 &quot;127.0.0.1&quot;, user=0x14e27c0 &quot;root&quot;, passwd=0x14e40c0 &quot;123&quot;, db=0x14e28f0 &quot;test&quot;, port=3306, unix_socket=0x0, client_flag=65536) at /root/mariadb-connector-c-3.2.6/libmariadb/mariadb_lib.c:1301</span><br><span class="line">#7  0x000000000041b5d0 in mysql_drv_real_connect (db_mysql_con=0x7f99fc01fbf0) at drv_mysql.c:405</span><br><span class="line">#8  0x000000000041cc6c in mysql_drv_reconnect (sb_con=0x0) at drv_mysql.c:815</span><br><span class="line">#9  check_error (sb_con=sb_con@entry=0x7f99fc0210a0, func=func@entry=0x486637 &quot;mysql_drv_query()&quot;, query=query@entry=0x7f99fc0207f0 &quot;SELECT c FROM sbtest16 WHERE id=5031&quot;, counter=counter@entry=0x7f99fc0210c8) at drv_mysql.c:894</span><br><span class="line">#10 0x000000000041d1d1 in mysql_drv_query (rs=0x7f99fc0210c8, len=&lt;optimized out&gt;, query=0x7f99fc0207f0 &quot;SELECT c FROM sbtest16 WHERE id=5031&quot;, sb_conn=&lt;optimized out&gt;) at drv_mysql.c:1071</span><br><span class="line">#11 mysql_drv_query (rs=0x7f99fc0210c8, len=&lt;optimized out&gt;, query=0x7f99fc0207f0 &quot;SELECT c FROM sbtest16 WHERE id=5031&quot;, sb_conn=&lt;optimized out&gt;) at drv_mysql.c:1051</span><br><span class="line">#12 mysql_drv_execute (stmt=&lt;optimized out&gt;, rs=&lt;optimized out&gt;) at drv_mysql.c:1040</span><br><span class="line">#13 0x000000000040f32a in db_execute (stmt=0x7f99fc021270) at db_driver.c:517</span><br></pre></td></tr></table></figure><h3 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h3><p>改下Sysbench 代码 <a href="https://github.com/akopytov/sysbench/blob/master/src/drivers/mysql/drv_mysql.c" target="_blank" rel="noopener">.&#x2F;src&#x2F;drivers&#x2F;mysql&#x2F;drv_mysql.c </a>加一行就可以解决这个问题：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">mysql_drv_reconnect</span><span class="params">(<span class="keyword">db_conn_t</span> *sb_con)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">db_mysql_conn_t</span> *db_mysql_con = (<span class="keyword">db_mysql_conn_t</span> *) sb_con-&gt;ptr;</span><br><span class="line">  MYSQL *con = db_mysql_con-&gt;mysql;</span><br><span class="line"></span><br><span class="line">  log_text(LOG_DEBUG, <span class="string">"Reconnecting zhejian"</span>);</span><br><span class="line"></span><br><span class="line">  DEBUG(<span class="string">"mysql_close(%p)"</span>, con);</span><br><span class="line">  mysql_close(con);</span><br><span class="line">  mysql_init(con); <span class="comment">//add by ren</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这个死循环在反复创建新连接用光 port range</span></span><br><span class="line">  <span class="keyword">while</span> (mysql_drv_real_connect(db_mysql_con))</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (sb_globals.error)</span><br><span class="line">      <span class="keyword">return</span> DB_ERROR_FATAL;</span><br><span class="line"></span><br><span class="line">    usleep(<span class="number">1000</span>); </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  log_text(LOG_DEBUG, <span class="string">"Reconnected"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> DB_ERROR_IGNORABLE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重现"><a href="#重现" class="headerlink" title="重现"></a>重现</h2><p>只有sysbench 编译时依赖 libmariadb.so 才会有问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#ldd /usr/local/bin/sysbench</span><br><span class="line">linux-vdso.so.1 (0x00007ffee0f93000)</span><br><span class="line">libmariadb.so.3 =&gt; /lib64/libmariadb.so.3 (0x00007fecb3f9d000)</span><br><span class="line"></span><br><span class="line">yum install  mariadb-devel</span><br></pre></td></tr></table></figure><p>卸载掉 mysql-devel 重新安装 mariadb-devel, 再编译 sysbench</p><p>sysbench 源码下载：<a href="https://github.com/akopytov/sysbench" target="_blank" rel="noopener">https://github.com/akopytov/sysbench</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>问题结论：mariadb 的 connect lib库对 libmysql 接口实现得有问题，当连接异常断开后会进入死循环疯狂创建连接导致了这个问题</p><p>这里涉及很多技巧：top&#x2F;ss -s&#x2F;strace&#x2F;netstat&#x2F;telnet 以及很多基础知识 local port range&#x2F; CLOSE_WAIT ，会折腾很重要，折腾的前提是会解锁各种姿势</p><p>难的是如何恰到好处地应用这些技巧和正确应用这些知识，剩下的分析推进就很符合逻辑了</p><p>另外我之前强调的在一个错误面前反复折腾不断缩小范围的能力也很重要，比如换个版本确认总比你看代码快吧</p><p>从这篇文章可以看出我真是个好教练，一次故障诊断涉及2-3个知识点，3-5个小命令，2-4次逻辑推断，最后完美定位问题，把各个知识的解读、各种命令的灵活使用展现的淋漓尽致。</p><p>接下来就是如何在我们的统一实验 ECS 上重现这个问题并保证让大家跟着实际操作</p><p>其实开始的时候问题没有这么清晰，每次升级才能稳定重现，后来想要定位问题就必须降低重现难度，考虑到重启客户端ECS 就能恢复，于是：</p><ul><li>不再重启ECS，只重启 Sysbench —— 能恢复</li><li>不真正升级只重启Server —— 问题能稳定重现，重现容易很多了</li><li>不重启 Server，只是kill掉Sysbench 的一条连接 —— 能重现</li><li>将Sysbench 连接数从最开始100个，改成2个压 Server，然后 kill 掉 Sysbench 的一条连接 —— 能重现</li></ul><p>到最后稳定重现方案就是 Sysbench 用两个连接压 Server，然后到 Server 上随便kill 掉其中一条连接，这个问题能稳定重现；重现后重启Sysbench 就能稳定恢复</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>一个<a href="https://bugs.mysql.com/bug.php?id=94435" target="_blank" rel="noopener">类似的bug</a> 和 <a href="https://bugs.mysql.com/bug.php?id=88428" target="_blank" rel="noopener">https://bugs.mysql.com/bug.php?id=88428</a></p><h2 id="内核笔记"><a href="#内核笔记" class="headerlink" title="内核笔记"></a>内核笔记</h2><p>分人分析得再好也是别人的，自己积累的一点点终究是自己的；端口不够的时候CPU 拉高我之前碰到过，所以在内核的代码里写了点笔记，这次Sysbench 问题又碰到了，所以正好看到我上次的笔记：<a href="https://github.com/plantegg/linux/blob/3157b476f8216d2655c1c85bad53c975190689ba/net/ipv4/inet_hashtables.c#L447" target="_blank" rel="noopener">https://github.com/plantegg/linux/blob/3157b476f8216d2655c1c85bad53c975190689ba/net/ipv4/inet_hashtables.c#L447</a>  </p><p>我的意思是可以拉个Linux 内核较新的代码分支，自己随便哪天学到点啥在上面注释一下，commit，时间久了慢慢就串起来了，如下图错误码和strace 看到的错误信息就是一致的</p><p>直播总结：</p><p>关于可用端口一文，搞懂这个概念(到底有多少可用端口)只是开始；还需要借助案例去理解；天杀的Google 把端口分为奇偶数两部分，简直是神助攻，给了我们无穷Case 来加深端口不够时候系统什么表现的映像；今天直播的案例是端口全不够了，这种非常明显的异常更好发现；如果端口还够只是偶数用完了，但每次都要扫描一遍偶数，发现偶数没有可用端口再去扫描奇数就能找到可用端口，这导致的是每次可能有点卡顿，但是又不报错，因为过于隐晦这在业务层面带来的危害更加大</p><p>同样是学TCP状态流转(ESTABLISHED TIME_WAIT CLOSE_WAIT )，有人看一次就能推理，我们都是普通人，看过了还瞎猜，不管啥都想的是 tcp_reuse&#x2F;tcp_recycle，还处在使劲蒙的状态</p><p>Ping&#x2F;telnet&#x2F;strace&#x2F;tcpdump 几乎都会用，但是如何恰到好处地去用，报错是什么状态、没任何输出是什么状态</p><p>然后就是过程分析中的一些推理。先从最根本的现象QPS 跌0开始撸</p><p>三个版本：</p><table><thead><tr><th>不同的 libmysqlclient 版本</th><th>现象</th></tr></thead><tbody><tr><td>yum install mariadb-devel (libmariadb.so 3.2.6)</td><td>永远跌零，耗尽端口、CPU高</td></tr><tr><td>手工编译 mariadb-connector-c-3.3(libmariadb.so 3.3)</td><td>永远跌零，但是不费端口、不耗CPU</td></tr><tr><td>yum install MySQL-devel（libmysqlclient 哪个版本都行）</td><td>正常</td></tr></tbody></table><p>手工编译 libmariadb.so 后 CPU 不飙高，但是TPS 一直跌0，也会疯狂重建连接(每1ms 去建一次连接), 还是没处理对，不过会reset 连接释放端口</p><p>如果一个分析推理要求很高的逻辑能力(or 智商)，那复制性就不强，没有太大的学习价值(主要是学不会)，我们尽量多去学1+1&#x3D;2这样的逻辑推理，时间久了你就会了1+2&#x3D;3</p><p>真正的高手肯定不只是流于表象：</p><ol><li>啊，连不上了</li><li>啊，服务器有问题</li><li>啊，CPU高</li><li>啊，too many Connection</li></ol><p>天翼云老哥一年前也发现了这个问题并给了解决办法，但是阅读量只有55 <a href="https://www.ctyun.cn/developer/article/405333884604485" target="_blank" rel="noopener">https://www.ctyun.cn/developer/article/405333884604485</a> ——文章过于简单，如果去学习的话只能看到一个结论</p><h2 id="进一步总结"><a href="#进一步总结" class="headerlink" title="进一步总结"></a>进一步总结</h2><h3 id="如果3306-端口被防火墙drop，那么："><a href="#如果3306-端口被防火墙drop，那么：" class="headerlink" title="如果3306 端口被防火墙drop，那么："></a>如果3306 端口被防火墙drop，那么：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@plantegg 11:25 /root]</span><br><span class="line">#mysql -h127.0.0.1 --ssl-mode=DISABLED -uroot -p123 test</span><br><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line"></span><br><span class="line">…… 卡着，不报错</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">strace 看到是这样：</span><br><span class="line">futex(0x55b99f129518, FUTEX_WAKE_PRIVATE, 2147483647) = 0</span><br><span class="line">getpid()                                = 1511313</span><br><span class="line">socket(AF_INET, SOCK_STREAM, IPPROTO_TCP) = 3</span><br><span class="line">connect(3, &#123;sa_family=AF_INET, sin_port=htons(3306), sin_addr=inet_addr(&quot;127.0.0.1&quot;)&#125;, 16</span><br><span class="line"></span><br><span class="line">一直卡在这里</span><br></pre></td></tr></table></figure><h3 id="Too-many-connections"><a href="#Too-many-connections" class="headerlink" title="Too many connections"></a>Too many connections</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">getpid()                                = 1515762</span><br><span class="line">socket(AF_INET, SOCK_STREAM, IPPROTO_TCP) = 3</span><br><span class="line">connect(3, &#123;sa_family=AF_INET, sin_port=htons(3306), sin_addr=inet_addr(&quot;127.0.0.1&quot;)&#125;, 16) = 0</span><br><span class="line">setsockopt(3, SOL_TCP, TCP_NODELAY, [1], 4) = 0</span><br><span class="line">setsockopt(3, SOL_SOCKET, SO_KEEPALIVE, [1], 4) = 0</span><br><span class="line">recvfrom(3, &quot;\27\0\0\0\377\20\4Too many connections&quot;, 16384, 0, NULL, NULL) = 27</span><br><span class="line">shutdown(3, SHUT_RDWR)                  = 0</span><br><span class="line">close(3)                                = 0</span><br><span class="line">fstat(1, &#123;st_mode=S_IFCHR|0620, st_rdev=makedev(0x88, 0), ...&#125;) = 0</span><br><span class="line">write(2, &quot;ERROR 1040 (HY000): &quot;, 20ERROR 1040 (HY000): )    = 20</span><br><span class="line">write(2, &quot;Too many connections&quot;, 20Too many connections)    = 20</span><br><span class="line"></span><br><span class="line">#mysql -h127.0.0.1 --ssl-mode=DISABLED -uroot -p123 test</span><br><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">ERROR 1040 (HY000): Too many connections</span><br><span class="line"></span><br><span class="line">用完端口后：</span><br><span class="line">getpid()                                = 1515928</span><br><span class="line">socket(AF_INET, SOCK_STREAM, IPPROTO_TCP) = 3</span><br><span class="line">connect(3, &#123;sa_family=AF_INET, sin_port=htons(3306), sin_addr=inet_addr(&quot;127.0.0.1&quot;)&#125;, 16) = -1 EADDRNOTAVAIL (Cannot assign requested address)</span><br><span class="line">shutdown(3, SHUT_RDWR)                  = -1 ENOTCONN (Transport endpoint is not connected)</span><br><span class="line">close(3)                                = 0</span><br><span class="line">fstat(1, &#123;st_mode=S_IFCHR|0620, st_rdev=makedev(0x88, 0), ...&#125;) = 0</span><br><span class="line">write(2, &quot;ERROR 2003 (HY000): &quot;, 20ERROR 2003 (HY000): )    = 20</span><br><span class="line">write(2, &quot;Can&apos;t connect to MySQL server on&quot;..., 54Can&apos;t connect to MySQL server on &apos;127.0.0.1:3306&apos; (99)) = 54</span><br><span class="line">write(2, &quot;\n&quot;, 1</span><br><span class="line">)                       = 1</span><br><span class="line">write(1, &quot;\7&quot;, 1)                       = 1</span><br><span class="line">#mysql -h127.0.0.1 --ssl-mode=DISABLED -uroot -p123 test</span><br><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">ERROR 2003 (HY000): Can&apos;t connect to MySQL server on &apos;127.0.0.1:3306&apos; (99)</span><br></pre></td></tr></table></figure><h3 id="如果是服务端3306-没起："><a href="#如果是服务端3306-没起：" class="headerlink" title="如果是服务端3306 没起："></a>如果是服务端3306 没起：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">socket(AF_INET, SOCK_STREAM, IPPROTO_TCP) = 3</span><br><span class="line">connect(3, &#123;sa_family=AF_INET, sin_port=htons(3306), sin_addr=inet_addr(&quot;127.0.0.1&quot;)&#125;, 16) = -1 ECONNREFUSED (Connection refused)</span><br><span class="line">shutdown(3, SHUT_RDWR)                  = -1 ENOTCONN (Transport endpoint is not connected)</span><br><span class="line">close(3)                                = 0</span><br><span class="line">fstat(1, &#123;st_mode=S_IFCHR|0620, st_rdev=makedev(0x88, 0), ...&#125;) = 0</span><br><span class="line">write(2, &quot;ERROR 2003 (HY000): &quot;, 20ERROR 2003 (HY000): )    = 20</span><br><span class="line">write(2, &quot;Can&apos;t connect to MySQL server on&quot;..., 55Can&apos;t connect to MySQL server on &apos;127.0.0.1:3306&apos; (111)) = 55</span><br><span class="line">write(2, &quot;\n&quot;, 1</span><br><span class="line">)                       = 1</span><br><span class="line">write(1, &quot;\7&quot;, 1)                       = 1</span><br><span class="line">rt_sigaction(SIGQUIT, &#123;sa_handler=SIG_IGN, sa_mask=[QUIT], sa_flags=SA_RESTORER|SA_RESTART, sa_restorer=0x7f20ab9f0a60&#125;, &#123;sa_handler=SIG_DFL, sa_mask=[], sa_flags=0&#125;, 8) = 0</span><br><span class="line">rt_sigaction(SIGINT, &#123;sa_handler=SIG_IGN, sa_mask=[INT], sa_flags=SA_RESTORER|SA_RESTART, sa_restorer=0x7f20ab9f0a60&#125;, &#123;sa_handler=SIG_DFL, sa_mask=[], sa_flags=0&#125;, 8) = 0</span><br><span class="line">rt_sigaction(SIGHUP, &#123;sa_handler=SIG_IGN, sa_mask=[HUP], sa_flags=SA_RESTORER|SA_RESTART, sa_restorer=0x7f20ab9f0a60&#125;, &#123;sa_handler=SIG_DFL, sa_mask=[], sa_flags=0&#125;, 8) = 0</span><br><span class="line">exit_group(1)                           = ?</span><br><span class="line">+++ exited with 1 +++</span><br><span class="line"></span><br><span class="line">[root@plantegg 11:54 /root]</span><br><span class="line">#mysql --show-warnings=FALSE -h127.0.0.1 --ssl-mode=DISABLED -uroot -p123 test</span><br><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">ERROR 2003 (HY000): Can&apos;t connect to MySQL server on &apos;127.0.0.1:3306&apos; (111)</span><br></pre></td></tr></table></figure><h3 id="账号密码权限错误"><a href="#账号密码权限错误" class="headerlink" title="账号密码权限错误"></a>账号密码权限错误</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#mysql --show-warnings=FALSE -h127.0.0.1 --ssl-mode=DISABLED -uroot -p1234 test</span><br><span class="line">ERROR 1045 (28000): Access denied for user &apos;root&apos;@&apos;127.0.0.1&apos; (using password: YES)</span><br></pre></td></tr></table></figure><h3 id="telnet"><a href="#telnet" class="headerlink" title="telnet"></a>telnet</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//正常telnet ，能看到 Greeting以及输密码信息</span><br><span class="line">#telnet 127.0.0.1 3306</span><br><span class="line">Trying 127.0.0.1...</span><br><span class="line">Connected to 127.0.0.1.</span><br><span class="line">Escape character is &apos;^]&apos;.</span><br><span class="line">I</span><br><span class="line">8.2.0�#[6Y</span><br><span class="line">          @+5=,mi?%#caching_sha2_password^]</span><br><span class="line"></span><br><span class="line">//当MySQL-Server 的连接数不够了时</span><br><span class="line">#telnet 127.0.0.1 3306</span><br><span class="line">Trying 127.0.0.1...</span><br><span class="line">Connected to 127.0.0.1.</span><br><span class="line">Escape character is &apos;^]&apos;.</span><br><span class="line">Too many connectionsConnection closed by foreign host.</span><br><span class="line"></span><br><span class="line">//当客户端本地可用端口不够，三次握手还没开始</span><br><span class="line">#telnet 127.0.0.1 3306</span><br><span class="line">Trying 127.0.0.1...</span><br><span class="line">telnet: connect to address 127.0.0.1: Cannot assign requested address</span><br></pre></td></tr></table></figure><h3 id="99-VS-111"><a href="#99-VS-111" class="headerlink" title="99 VS 111"></a>99 VS 111</h3><p>在MySQL错误信息中，<code>ERROR 2003 (HY000)</code>是一个通用的连接失败错误。错误之后的括号中的数字代表的是系统级别的错误码，与MySQL本身的错误代码不同，它们来自于操作系统，表示尝试建立网络连接时遇到了错误。错误码<code>99</code> 和 <code>111</code> 具体代表以下含义：</p><ul><li>**<code>(99)</code>**：这个错误码通常与网络配置相关。在大多数情况下，这个错误产生于Linux系统，并对应于<code>EADDRNOTAVAIL</code>错误，意义是”Cannot assign requested address”。当尝试绑定到无法分配的本地地址时，就会遇到这个错误。在尝试连接到MySQL服务器时，如果客户端使用了一个不存在的网络接口，例如，错误配置的TCP端口或地址，就有可能产生这个错误。</li><li>**<code>(111)</code>**：这个错误码同样在Linux系统中更常见，对应于<code>ECONNREFUSED</code>错误，意义是”Connection refused”。当连接请求被远程主机或中间网络设施（如防火墙）明确拒绝时，就会遇到这个错误。在MySQL的上下文中，<code>(111)</code>错误可能表明MySQL服务没有在指定地址或端口上运行，或是防火墙设置阻止了连接。这也可能表明MySQL配置中的<code>bind-address</code>参数错误，设置为了仅允许本地连接。</li></ul><p>解决错误<code>99</code>通常需要确保客户端是在向正确配置的地址发起连接，而解决错误<code>111</code>则可能需要检查MySQL服务是否运行、防火墙的设置以及<code>my.cnf</code>或<code>my.ini</code>中<code>bind-address</code>参数的配置。</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20240328122311991.png" alt="image-20240328122311991"></p><h3 id="抓包解读"><a href="#抓包解读" class="headerlink" title="抓包解读"></a>抓包解读</h3><h4 id="服务端主动断开"><a href="#服务端主动断开" class="headerlink" title="服务端主动断开"></a>服务端主动断开</h4><p>如下图是出问题的其中一次抓包，我们可以通过这个抓包来详细解析问题出在哪里。这是Sysbench(38692端口) 主动连MySQL Server(3306 端口)，3次TCP 握手正常后Server 发送了 Server Greeting(截图中第四个包)，然后Sysbench所在的Linux OS 38692端口回复了ack(这个ack 动作不需要Sysbench参与，完全由OS 来处理)，这个时候 Sysbench应该读走这个 Server Greeting包并按MySQL 协议发送客户端账号密码，但是没有，过了10秒钟后(图中绿框) Server 再次发送了 1159 错误也就是图中红框，1159表示 Server等了10秒钟也没等到Client的账号密码，于是超时报错</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20240407103809182.png" alt="image-20240407103809182"></p><h4 id="客户端非正常主动断开"><a href="#客户端非正常主动断开" class="headerlink" title="客户端非正常主动断开"></a>客户端非正常主动断开</h4><p>如下图，Server 端回复了 Greeting，本该JDBC Client 发起 login 流程，但是因为这里Server 是 8.0，但是 JDBC Driver 用的5.7 导致兼容性问题，Client 主动断开了</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20240704084229482.png" alt="image-20240704084229482"></p><p>这是 Server 认为通信异常，于是返回：Error message: Got an error reading communication packets 即1158 报错</p><h2 id="延伸"><a href="#延伸" class="headerlink" title="延伸"></a>延伸</h2><p>类似的分析手段，解决其他问题</p><blockquote><p>体验抓包分析，的确……很快就找到了问题点。local_infile&#x3D;0 时，libmariadb 会在 login 包中设置标志位为 0，但是 libmysqlclient 仍然是 1，这是诡异点1。Server DB产品 在标志位为 0 时会报登录信息错误，这是诡异点2。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20240403144037002.png" alt="image-20240403144037002"></p><p>这条研发人员根据重现的抓包很快定位到了是Server DB产品的Bug，简单来说 Server DB产品对MySQL 协议实现得不好，如图的flag设置为0的话就会被当成 MySQL  ping 协议来处理，感叹下还是抓包好使，要不还得去看账号权限啥的</p><p>换个MySQL Client 就糊弄过去了；</p><p>但是如果去分析就能发现就那一个bit的差异，一定是Server 导致了问题，Server研发在铁的证据面前快速定位是产品bug，但是你如果不会抓包分析，一看报错是账号、权限错误就寄了——程序员对别人说的一个字都不要信，只信自己看到的</p><p>再回想想我们平时放弃的那些问题、那些撕逼撕不清楚的锅等等</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一次故障的诊断过程–Sysbench&quot;&gt;&lt;a href=&quot;#一次故障的诊断过程–Sysbench&quot; class=&quot;headerlink&quot; title=&quot;一次故障的诊断过程–Sysbench&quot;&gt;&lt;/a&gt;一次故障的诊断过程–Sysbench&lt;/h1&gt;&lt;h2 id=&quot;背
      
    
    </summary>
    
      <category term="MySQL" scheme="https://plantegg.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://plantegg.github.io/tags/MySQL/"/>
    
      <category term="sysbench" scheme="https://plantegg.github.io/tags/sysbench/"/>
    
      <category term="tcp" scheme="https://plantegg.github.io/tags/tcp/"/>
    
      <category term="debug" scheme="https://plantegg.github.io/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>一个历时5年的问题分析</title>
    <link href="https://plantegg.github.io/2024/09/25/%E4%B8%80%E4%B8%AA%E5%8E%86%E6%97%B65%E5%B9%B4%E7%9A%84%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/"/>
    <id>https://plantegg.github.io/2024/09/25/一个历时5年的问题分析/</id>
    <published>2024-09-25T09:30:03.000Z</published>
    <updated>2024-11-20T10:00:54.505Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一个历时5年的问题分析"><a href="#一个历时5年的问题分析" class="headerlink" title="一个历时5年的问题分析"></a>一个历时5年的问题分析</h1><p>全网关于 JDBC 报错：net_write_timeout 的最好&#x2F;最全总结</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一次为了讲如何分析几百万个抓包，所以把这个问题中的一部分简化写了这篇抓包篇：<a href="https://articles.zsxq.com/id_lznw3w4zieuc.html" target="_blank" rel="noopener">https://articles.zsxq.com/id_lznw3w4zieuc.html</a>  建议你先去看看把场景简化下，然后本篇中的分析涉及抓包部分就不再啰嗦讲解，请看抓包篇</p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>用户为了做数据分析需要把160个DB中的数据迁移到另外一个只读库中，有专门的迁移工具，但是这个迁移工具跑一阵后总是报错，报错堆栈显示是Tomcat 到DB之间的连接出了异常：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Caused by: com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Application was streaming results when the connection failed. Consider raising value of &apos;net_write_timeout&apos; on the server.</span><br><span class="line">    at sun.reflect.GeneratedConstructorAccessor150.newInstance(Unknown Source)</span><br><span class="line">    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)</span><br><span class="line">    at java.lang.reflect.Constructor.newInstance(Constructor.java:423)</span><br><span class="line">    at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)</span><br><span class="line">    at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:989)</span><br><span class="line">    at com.mysql.jdbc.MysqlIO.reuseAndReadPacket(MysqlIO.java:3749)</span><br><span class="line">    at com.mysql.jdbc.MysqlIO.reuseAndReadPacket(MysqlIO.java:3649)</span><br><span class="line">    at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:4090)</span><br><span class="line">    at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:972)</span><br><span class="line">    at com.mysql.jdbc.MysqlIO.nextRow(MysqlIO.java:2123)</span><br><span class="line">    at com.mysql.jdbc.RowDataDynamic.nextRecord(RowDataDynamic.java:374)</span><br><span class="line">    at com.mysql.jdbc.RowDataDynamic.next(RowDataDynamic.java:354)</span><br><span class="line">    at com.mysql.jdbc.RowDataDynamic.close(RowDataDynamic.java:155)</span><br><span class="line">    at com.mysql.jdbc.ResultSetImpl.realClose(ResultSetImpl.java:6726)</span><br><span class="line">    at com.mysql.jdbc.ResultSetImpl.close(ResultSetImpl.java:865)</span><br><span class="line">    at com.alibaba.druid.pool.DruidPooledResultSet.close(DruidPooledResultSet.java:86)</span><br></pre></td></tr></table></figure><p>这个异常堆栈告诉我们Tomcat 到Database之间的连接异常了，似乎是 net_write_timeout 超时导致的</p><p>对应业务结构：</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20230706210452742.png" alt="image-20230706210452742"></p><h2 id="net-write-timeout-原理简介"><a href="#net-write-timeout-原理简介" class="headerlink" title="net_write_timeout 原理简介"></a>net_write_timeout 原理简介</h2><p>先看下 <a href="https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_net_write_timeout" target="_blank" rel="noopener"><code>net_write_timeout</code></a>的解释：</p><blockquote><p>The number of seconds to wait for a block to be written to a connection before aborting the write. 只针对执行查询中的等待超时，网络不好，tcp buffer满了（应用迟迟不读走数据）等容易导致mysql server端报net_write_timeout错误，指的是mysql server hang在那里长时间无法发送查询结果。</p></blockquote><p>报这个错就是DB 等了net_write_timeout这么久没写数据，可能是Tomcat 端卡死没有读走数据。</p><p>但是根据我多年来和这个报错打交道的经验告诉我：这个报错不只是因为net_write_timeout 超时导致的，任何Tomcat 到 DB间的连接断开了，都报这个错误，原因是JDBC 驱动搞不清楚断开的具体原因，统统当 net_write_timeout 了</p><p>一定要记住这个原理。如果这里不理解可以进一步阅读：<a href="https://wx.zsxq.com/dweb2/index/topic_detail/412251415855228" target="_blank" rel="noopener">https://wx.zsxq.com/dweb2/index/topic_detail/412251415855228</a> </p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>首先把Tomcat 集群从负载均衡上摘一个下来，这样没有业务流量干扰更利于测试和分析日志</p><p>然后让迁移数据工具直接连这个没有流量的节点，问题仍然稳定重现。</p><p>进一步提取迁移工具的SQL，然后走API手工提交给Tomcat 执行，问题仍然稳定重现，现在重现越来越简单了，效率高多了。</p><h3 id="Tomcat-上抓包"><a href="#Tomcat-上抓包" class="headerlink" title="Tomcat 上抓包"></a>Tomcat 上抓包</h3><p>因为没有业务流量干扰，抓包很干净，但是因为DB 节点太多，所以量还是很大的，分析如抓包篇：<a href="https://articles.zsxq.com/id_lznw3w4zieuc.html" target="_blank" rel="noopener">https://articles.zsxq.com/id_lznw3w4zieuc.html</a>  </p><p>如下图红框所示的地方可以看到MySQL Server 传着传着居然带了个 fin 包在里面，表示MySQL Server要断开连接了，无奈Client只能也发送quit 断开连接。红框告诉我们一个无比有力的证据MySQL Server 在不应该断开的地方断开了连接，问题在 MySQL Server 端</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20230620141017987.png" alt="image-20230620141017987"></p><p>看起来是Database 主动端开了连接，因为这个过程Tomcat 不需要发任何东西给 Database。这个现象5年前在其它用户场景下就抓到过了，最后问题也不了了之，这次希望搞清楚</p><h3 id="Database-分析"><a href="#Database-分析" class="headerlink" title="Database 分析"></a>Database 分析</h3><p>打开 DB 日志，捞取全量日志可以看到 DB 断开的原因是收到了kill Query！</p><p>有这个结果记住上面抓包图，以后类似这样莫名起来 DB 主动断开大概率就是 kill Query 导致的(经验攒得不容易！)</p><h3 id="Database-抓包"><a href="#Database-抓包" class="headerlink" title="Database 抓包"></a>Database 抓包</h3><p>确实能抓到kill，而且从用户账号来看就是从 Tomcat 发过去的！</p><h3 id="继续分析Tomcat-抓包"><a href="#继续分析Tomcat-抓包" class="headerlink" title="继续分析Tomcat 抓包"></a>继续分析Tomcat 抓包</h3><p>从 DB 分析来看还是有人主动 kill 导致的，所以继续分析Tomcat的抓包看是不是因为代码bug导致Tomcat 发了kill 给DB</p><p>大海捞针，搜 kill，找Tomcat 发给DB的tcp length 长度是16-20的(刚好容纳kill id) 总的来说就是找不到，很神奇</p><p>由于 DB上记录的 Tomcat IP、port 都被中间链路转换过几次了，根本没办法一一对应搞清楚是哪个Tomcat 节点发出来的</p><h3 id="继续尝试重现"><a href="#继续尝试重现" class="headerlink" title="继续尝试重现"></a>继续尝试重现</h3><p>分析完Tomcat 业务代码后感觉业务不会去kill，于是灵机一动在没有流量的Tomcat上跑了一个Sleep 600秒，不用任何数据，神奇的问题也稳定重现了，这下大概知道什么原因了，肯定是客户自己加了慢查询监控逻辑，一旦发现慢查询就 kill</p><p>于是问客户是不是有这种监控，果然有，停掉后反复重试不再有问题！</p><p>测试环境手工触发kill，然后能抓到下发的kill Query 给Database</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20230707150658392.png" alt="image-20230707150658392"></p><h2 id="未解谜题"><a href="#未解谜题" class="headerlink" title="未解谜题"></a>未解谜题</h2><p>为什么在Tomcat 抓包到发给Database的 kill ？</p><p>我反复去重现了，如果是我手工触发Tomcat kill是可以清晰地抓到Tomcat 会发160个kill 给Database，但是我任其自然等待用户监控来杀就一定抓不到kill 下发给DB</p><p>我猜和 Tomcat 集群有关，首先用户监控是走的LVS，通过其中一个Tomcat 可以查询到所有 Tomcat 上的请求，然后发起 kill</p><p>但因为节点太多无法证实！当然业务监控也可以监控DB 然后直接发kill，但是和抓包看到的发起kill的用户不对，发起 kill 的用户是Tomcat独一无二的。</p><h2 id="JDBC驱动报错-net-write-timeout-结论"><a href="#JDBC驱动报错-net-write-timeout-结论" class="headerlink" title="JDBC驱动报错 net_write_timeout 结论"></a>JDBC驱动报错 net_write_timeout 结论</h2><blockquote><p>Application was streaming results when the connection failed. Consider raising value of ‘net_write_timeout’ on the server. - com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Application was streaming results when the connection failed. Consider raising value of ‘net_write_timeout’ on the server.</p></blockquote><p>这个报错不一定是 <code>net_write_timeout</code> 设置过小导致的，<strong>JDBC 在 streaming 流模式下只要连接异常就会报如上错误</strong>，比如：</p><ul><li>连接被 TCP reset</li><li>RDS 前端自带的Proxy 主动断开连接</li><li>连接因为某种原因(比如 QueryTimeOut) 触发 kill Query导致连接中断</li><li>RDS <a href="https://aone.alibaba-inc.com/v2/project/687880/bug/50491193" target="_blank" rel="noopener">端因为</a>kill 主动断开连接 &#x2F;&#x2F;比如用户监控RDS、DRDS脚本杀掉慢查询</li></ul><p>net_write_timeout：表示这么长时间RDS&#x2F;DN 无法写数据到网络层发给DRDS&#x2F;CN，原因是DRDS&#x2F;CN 长时间没将数据读走</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>首先一个错误现象对应多个完全不一样的错误原因是非常头疼的，这个问题反反复复在多个场景下出现，当然原因各异，但是这个传数据途中 DB 主动 fin连接还是第一次搞清楚，同样主动fin不一定是kill，但是我们要依照证据推进问题，既然是DB fin就有必要先看DB的原因。</p><p>从这个问题你可以先从什么是JDBC 流模式出发(mysql –quick 就是流模式，你可以快速查一个大数据试试；然后去掉–quick 对比一下)，结合网络buffer 来了解流模式：<a href="https://plantegg.github.io/2020/07/03/MySQL%20JDBC%20StreamResult%20%E5%92%8C%20net_write_timeout/">https://plantegg.github.io/2020/07/03/MySQL%20JDBC%20StreamResult%20%E5%92%8C%20net_write_timeout/</a></p><p>然后从流模式来学习MySQL 的 net_write_timeout，假如你的代码报了 net_write_timeout 你会分析吗？</p><p>最后从连接断开去总结，比如网络不好、比如内核bug、比如DB crash、比如 kill、比如……都会导致连接断开，但这一切对业务来说只有 net_write_timeout 一个现象</p><p>这个问题分享出来是因为非常综合，我惊抱怨 socketTimeout、Communication failure等异常，这些异常也挺常见导致的原因多种，但是和 net_write_timeout 比起来还是不如 net_write_timeout 更综合，所以分享给大家，建议这几篇一起阅读效果最好！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一个历时5年的问题分析&quot;&gt;&lt;a href=&quot;#一个历时5年的问题分析&quot; class=&quot;headerlink&quot; title=&quot;一个历时5年的问题分析&quot;&gt;&lt;/a&gt;一个历时5年的问题分析&lt;/h1&gt;&lt;p&gt;全网关于 JDBC 报错：net_write_timeout 的最好
      
    
    </summary>
    
      <category term="MySQL" scheme="https://plantegg.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://plantegg.github.io/tags/MySQL/"/>
    
      <category term="JDBC" scheme="https://plantegg.github.io/tags/JDBC/"/>
    
      <category term="kill" scheme="https://plantegg.github.io/tags/kill/"/>
    
      <category term="net_write_timeout" scheme="https://plantegg.github.io/tags/net-write-timeout/"/>
    
      <category term="timeout" scheme="https://plantegg.github.io/tags/timeout/"/>
    
  </entry>
  
  <entry>
    <title>长连接黑洞重现和分析</title>
    <link href="https://plantegg.github.io/2024/05/05/%E9%95%BF%E8%BF%9E%E6%8E%A5%E9%BB%91%E6%B4%9E%E9%87%8D%E7%8E%B0%E5%92%8C%E5%88%86%E6%9E%90-public/"/>
    <id>https://plantegg.github.io/2024/05/05/长连接黑洞重现和分析-public/</id>
    <published>2024-05-05T00:30:03.000Z</published>
    <updated>2024-11-20T10:00:55.322Z</updated>
    
    <content type="html"><![CDATA[<h1 id="长连接黑洞重现和分析"><a href="#长连接黑洞重现和分析" class="headerlink" title="长连接黑洞重现和分析"></a>长连接黑洞重现和分析</h1><p>这是一个存在多年，遍及各个不同的业务又反反复复地在集团内部出现的一个问题，本文先通过重现展示这个问题，然后从业务、数据库、OS等不同的角度来分析如何解决它，这个问题值得每一位研发同学重视起来，避免再次踩到</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>为了高效率应对故障，本文尝试回答如下一些问题：</p><ul><li>为什么数据库crash 重启恢复后，业务还长时间不能恢复？</li><li>我依赖的业务做了高可用切换，但是我的业务长时间报错</li><li>我依赖的服务下掉了一个节点，为什么我的业务长时间报错 </li><li>客户做变配，升级云服务节点规格，为什么会导致客户业务长时间报错</li></ul><p>目的：希望通过这篇文章尽可能地减少故障时长、让业务快速从故障中恢复</p><h2 id="重现"><a href="#重现" class="headerlink" title="重现"></a>重现</h2><p>空说无凭，先也通过一次真实的重现来展示这个问题</p><h3 id="LVS-MySQL-高可用切换"><a href="#LVS-MySQL-高可用切换" class="headerlink" title="LVS+MySQL 高可用切换"></a>LVS+MySQL 高可用切换</h3><p>OS 默认配置参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#sysctl -a |grep -E &quot;tcp_retries|keepalive&quot;</span><br><span class="line">net.ipv4.tcp_keepalive_intvl = 30</span><br><span class="line">net.ipv4.tcp_keepalive_probes = 5</span><br><span class="line">net.ipv4.tcp_keepalive_time = 10</span><br><span class="line">net.ipv4.tcp_retries1 = 3</span><br><span class="line">net.ipv4.tcp_retries2 = 15  //主要是这个参数，默认以及alios 几乎都是15</span><br></pre></td></tr></table></figure><p>LVS 对外服务端口是3001， 后面挂的是 3307，假设3307是当前的Master，Slave是 3306，当检测到3307异常后会从LVS 上摘掉 3307挂上 3306做高可用切换</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/1713838496899-274cdfbd-aa6e-4f1f-9fcc-16725593c25e.png" alt="undefined"></p><p>切换前的 LVS 状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#ipvsadm -L --timeout</span><br><span class="line">Timeout (tcp tcpfin udp): 900 120 300</span><br><span class="line">#ipvsadm -L -n</span><br><span class="line">IP Virtual Server version 1.2.1 (size=4096)</span><br><span class="line">Prot LocalAddress:Port Scheduler Flags</span><br><span class="line">  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn</span><br><span class="line">TCP  127.0.0.1:3001 rr</span><br><span class="line">  -&gt; 127.0.0.1:3307               Masq    1      0          0</span><br></pre></td></tr></table></figure><p>Sysbench启动压力模拟用户访问，在 31秒的时候模拟管控检测到 3307的Master无法访问，所以管控执行切主把 3306的Slave 提升为新的 Master，同时到 LVS 摘掉 3307，挂上3306，此时管控端着冰可乐、翘着二郎腿，得意地说，你就看吧我们管控牛逼不、我们的高可用牛逼不，这一套行云流水3秒钟不到全搞定</p><p>切换命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#cat del3307.sh</span><br><span class="line">ipvsadm -d -t  127.0.0.1:3001 -r 127.0.0.1:3307 ; ipvsadm -a -t  127.0.0.1:3001 -r 127.0.0.1:3306 -m</span><br></pre></td></tr></table></figure><p>此时Sysbench运行状态，在第 32秒如期跌0：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#/usr/local/bin/sysbench --debug=on --mysql-user=&apos;root&apos; --mysql-password=&apos;123&apos; --mysql-db=&apos;test&apos; --mysql-host=&apos;127.0.0.1&apos; --mysql-port=&apos;3001&apos; --tables=&apos;16&apos;  --table-size=&apos;10000&apos; --range-size=&apos;5&apos; --db-ps-mode=&apos;disable&apos; --skip-trx=&apos;on&apos; --mysql-ignore-errors=&apos;all&apos; --time=&apos;11080&apos; --report-interval=&apos;1&apos; --histogram=&apos;on&apos; --threads=1 oltp_read_write run</span><br><span class="line">sysbench 1.1.0 (using bundled LuaJIT 2.1.0-beta3)</span><br><span class="line"></span><br><span class="line">Running the test with following options:</span><br><span class="line">Number of threads: 1</span><br><span class="line">Report intermediate results every 1 second(s)</span><br><span class="line">Debug mode enabled.</span><br><span class="line"></span><br><span class="line">Initializing random number generator from current time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Initializing worker threads...</span><br><span class="line"></span><br><span class="line">DEBUG: Worker thread (#0) started</span><br><span class="line">DEBUG: Reporting thread started</span><br><span class="line">DEBUG: Worker thread (#0) initialized</span><br><span class="line">Threads started!</span><br><span class="line"></span><br><span class="line">[ 1s ] thds: 1 tps: 51.89 qps: 947.00 (r/w/o: 739.44/207.56/0.00) lat (ms,95%): 35.59 err/s 0.00 reconn/s: 0.00</span><br><span class="line">[ 2s ] thds: 1 tps: 60.03 qps: 1084.54 (r/w/o: 841.42/243.12/0.00) lat (ms,95%): 22.28 err/s 0.00 reconn/s: 0.00</span><br><span class="line">…………</span><br><span class="line">[ 29s ] thds: 1 tps: 68.00 qps: 1223.01 (r/w/o: 952.00/271.00/0.00) lat (ms,95%): 16.12 err/s 0.00 reconn/s: 0.00</span><br><span class="line">[ 30s ] thds: 1 tps: 66.00 qps: 1188.00 (r/w/o: 924.00/264.00/0.00) lat (ms,95%): 16.71 err/s 0.00 reconn/s: 0.00</span><br><span class="line">[ 31s ] thds: 1 tps: 67.00 qps: 1203.96 (r/w/o: 937.97/265.99/0.00) lat (ms,95%): 17.95 err/s 0.00 reconn/s: 0.00</span><br><span class="line">[ 32s ] thds: 1 tps: 22.99 qps: 416.85 (r/w/o: 321.88/94.96/0.00) lat (ms,95%): 15.55 err/s 0.00 reconn/s: 0.00</span><br><span class="line">[ 33s ] thds: 1 tps: 0.00 qps: 0.00 (r/w/o: 0.00/0.00/0.00) lat (ms,95%): 0.00 err/s 0.00 reconn/s: 0.00</span><br><span class="line">[ 34s ] thds: 1 tps: 0.00 qps: 0.00 (r/w/o: 0.00/0.00/0.00) lat (ms,95%): 0.00 err/s 0.00 reconn/s: 0.00</span><br><span class="line">[ 35s ] thds: 1 tps: 0.00 qps: 0.00 (r/w/o: 0.00/0.00/0.00) lat (ms,95%): 0.00 err/s 0.00 reconn/s: 0.00</span><br></pre></td></tr></table></figure><p>5分钟后故障报告大批量涌进来，客户：怎么回事，我们的业务挂掉10分钟了，报错都是访问MySQL 超时，赶紧给我看看，从监控确实看到10分钟后客户业务还没恢复：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[ 601s ] thds: 1 tps: 0.00 qps: 0.00 (r/w/o: 0.00/0.00/0.00) lat (ms,95%): 0.00 err/s 0.00 reconn/s: 0.00</span><br><span class="line">[ 602s ] thds: 1 tps: 0.00 qps: 0.00 (r/w/o: 0.00/0.00/0.00) lat (ms,95%): 0.00 err/s 0.00 reconn/s: 0.00</span><br><span class="line">[ 603s ] thds: 1 tps: 0.00 qps: 0.00 (r/w/o: 0.00/0.00/0.00) lat (ms,95%): 0.00 err/s 0.00 reconn/s: 0.00</span><br><span class="line">[ 604s ] thds: 1 tps: 0.00 qps: 0.00 (r/w/o: 0.00/0.00/0.00) lat (ms,95%): 0.00 err/s 0.00 reconn/s: 0.00</span><br></pre></td></tr></table></figure><p>这时 oncall 都被从被窝里拎了起来，不知谁说了一句赶紧恢复吧，先试试把应用重启，5秒钟后应用重启完毕，业务恢复，大家开心地笑了，又成功防御住一次故障升级，还是重启大法好！</p><p>在业务&#x2F;Sysbench QPS跌0 期间可以看到 3307被摘掉，3306 成功挂上去了，但是没有新连接建向 3306，业务&#x2F;Sysbench 使劲薅着 3307</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#ipvsadm -L -n --stats -t 127.0.0.1:3001</span><br><span class="line">Prot LocalAddress:Port               Conns   InPkts  OutPkts  InBytes OutBytes</span><br><span class="line">  -&gt; RemoteAddress:Port</span><br><span class="line">TCP  127.0.0.1:3001                      2   660294   661999 78202968  184940K</span><br><span class="line">  -&gt; 127.0.0.1:3306                      0        0        0        0        0</span><br><span class="line">  </span><br><span class="line">#ipvsadm -Lcn | head -10</span><br><span class="line">IPVS connection entries</span><br><span class="line">pro expire state       source             virtual            destination</span><br><span class="line">TCP 13:11  ESTABLISHED 127.0.0.1:33864    127.0.0.1:3001     127.0.0.1:3307</span><br><span class="line"></span><br><span class="line">#netstat -anto |grep -E &quot;Recv|33864|3001|33077&quot;</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       Timer</span><br><span class="line">tcp        0    248 127.0.0.1:33864         127.0.0.1:3001          ESTABLISHED probe (33.48/0/8)</span><br><span class="line">tcp6       0     11 127.0.0.1:3307          127.0.0.1:33864         ESTABLISHED on (49.03/13/0)</span><br></pre></td></tr></table></figure><p>直到 900多秒后 OS 重试了15次发现都失败，于是向业务&#x2F;Sysbench 返回连接异常，触发业务&#x2F;Sysbench 释放异常连接重建新连接，新连接指向了新的 Master 3306，业务恢复正常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[ 957s ] thds: 1 tps: 0.00 qps: 0.00 (r/w/o: 0.00/0.00/0.00) lat (ms,95%): 0.00 err/s 0.00 reconn/s: 0.00</span><br><span class="line">DEBUG: Ignoring error 2013 Lost connection to MySQL server during query,</span><br><span class="line">DEBUG: Reconnecting </span><br><span class="line">DEBUG: Reconnected</span><br><span class="line">[ 958s ] thds: 1 tps: 53.00 qps: 950.97 (r/w/o: 741.98/208.99/0.00) lat (ms,95%): 30.26 err/s 0.00 reconn/s: 1.00</span><br><span class="line">[ 959s ] thds: 1 tps: 64.00 qps: 1154.03 (r/w/o: 896.02/258.01/0.00) lat (ms,95%): 22.69 err/s 0.00 reconn/s: 0.00</span><br><span class="line">[ 960s ] thds: 1 tps: 66.00 qps: 1184.93 (r/w/o: 923.94/260.98/0.00) lat (ms,95%): 25.28 err/s 0.00 reconn/s: 0.00</span><br></pre></td></tr></table></figure><p>到这里重现了故障中经常碰到的业务需要900多秒才能慢慢恢复，这个问题也就是 <strong>TCP 长连接流量黑洞</strong></p><p>如果我们<strong>把 net.ipv4.tcp_retries2 改成5</strong> 再来做这个实验，就会发现业务&#x2F;Sysbench 只需要20秒就能恢复了，也就是这个流量黑洞从900多秒变成了20秒，这回 oncall 不用再被从被窝里拎出来了吧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[ 62s ] thds: 1 tps: 66.00 qps: 1191.00 (r/w/o: 924.00/267.00/0.00) lat (ms,95%): 17.63 err/s 0.00 reconn/s: 0.00</span><br><span class="line">[ 63s ] thds: 1 tps: 63.00 qps: 1123.01 (r/w/o: 874.00/249.00/0.00) lat (ms,95%): 17.63 err/s 0.00 reconn/s: 0.00</span><br><span class="line">[ 64s ] thds: 1 tps: 0.00 qps: 0.00 (r/w/o: 0.00/0.00/0.00) lat (ms,95%): 0.00 err/s 0.00 reconn/s: 0.00</span><br><span class="line">[ 65s ] thds: 1 tps: 0.00 qps: 0.00 (r/w/o: 0.00/0.00/0.00) lat (ms,95%): 0.00 err/s 0.00 reconn/s: 0.00</span><br><span class="line">[ 66s ] thds: 1 tps: 0.00 qps: 0.00 (r/w/o: 0.00/0.00/0.00) lat (ms,95%): 0.00 err/s 0.00 reconn/s: 0.00</span><br><span class="line">[ 67s ] thds: 1 tps: 0.00 qps: 0.00 (r/w/o: 0.00/0.00/0.00) lat (ms,95%): 0.00 err/s 0.00 reconn/s: 0.00</span><br><span class="line">[ 68s ] thds: 1 tps: 0.00 qps: 0.00 (r/w/o: 0.00/0.00/0.00) lat (ms,95%): 0.00 err/s 0.00 reconn/s: 0.00</span><br><span class="line">[ 69s ] thds: 1 tps: 0.00 qps: 0.00 (r/w/o: 0.00/0.00/0.00) lat (ms,95%): 0.00 err/s 0.00 reconn/s: 0.00</span><br><span class="line">[ 70s ] thds: 1 tps: 0.00 qps: 0.00 (r/w/o: 0.00/0.00/0.00) lat (ms,95%): 0.00 err/s 0.00 reconn/s: 0.00</span><br><span class="line">[ 71s ] thds: 1 tps: 0.00 qps: 0.00 (r/w/o: 0.00/0.00/0.00) lat (ms,95%): 0.00 err/s 0.00 reconn/s: 0.00</span><br><span class="line">[ 72s ] thds: 1 tps: 0.00 qps: 0.00 (r/w/o: 0.00/0.00/0.00) lat (ms,95%): 0.00 err/s 0.00 reconn/s: 0.00</span><br><span class="line">[ 73s ] thds: 1 tps: 0.00 qps: 0.00 (r/w/o: 0.00/0.00/0.00) lat (ms,95%): 0.00 err/s 0.00 reconn/s: 0.00</span><br><span class="line">[ 74s ] thds: 1 tps: 0.00 qps: 0.00 (r/w/o: 0.00/0.00/0.00) lat (ms,95%): 0.00 err/s 0.00 reconn/s: 0.00</span><br><span class="line">[ 75s ] thds: 1 tps: 0.00 qps: 0.00 (r/w/o: 0.00/0.00/0.00) lat (ms,95%): 0.00 err/s 0.00 reconn/s: 0.00</span><br><span class="line">[ 76s ] thds: 1 tps: 0.00 qps: 0.00 (r/w/o: 0.00/0.00/0.00) lat (ms,95%): 0.00 err/s 0.00 reconn/s: 0.00</span><br><span class="line">[ 77s ] thds: 1 tps: 0.00 qps: 0.00 (r/w/o: 0.00/0.00/0.00) lat (ms,95%): 0.00 err/s 0.00 reconn/s: 0.00</span><br><span class="line">[ 78s ] thds: 1 tps: 0.00 qps: 0.00 (r/w/o: 0.00/0.00/0.00) lat (ms,95%): 0.00 err/s 0.00 reconn/s: 0.00</span><br><span class="line">[ 79s ] thds: 1 tps: 0.00 qps: 0.00 (r/w/o: 0.00/0.00/0.00) lat (ms,95%): 0.00 err/s 0.00 reconn/s: 0.00</span><br><span class="line">[ 80s ] thds: 1 tps: 0.00 qps: 0.00 (r/w/o: 0.00/0.00/0.00) lat (ms,95%): 0.00 err/s 0.00 reconn/s: 0.00</span><br><span class="line">[ 81s ] thds: 1 tps: 0.00 qps: 0.00 (r/w/o: 0.00/0.00/0.00) lat (ms,95%): 0.00 err/s 0.00 reconn/s: 0.00</span><br><span class="line">[ 82s ] thds: 1 tps: 0.00 qps: 0.00 (r/w/o: 0.00/0.00/0.00) lat (ms,95%): 0.00 err/s 0.00 reconn/s: 0.00</span><br><span class="line">DEBUG: Ignoring error 2013 Lost connection to MySQL server during query,</span><br><span class="line">DEBUG: Reconnecting </span><br><span class="line">DEBUG: Reconnected</span><br><span class="line">[ 83s ] thds: 1 tps: 26.00 qps: 457.01 (r/w/o: 357.01/100.00/0.00) lat (ms,95%): 16.41 err/s 0.00 reconn/s: 1.00</span><br><span class="line">[ 84s ] thds: 1 tps: 60.00 qps: 1086.94 (r/w/o: 846.96/239.99/0.00) lat (ms,95%): 26.68 err/s 0.00 reconn/s: 0.00</span><br><span class="line">[ 85s ] thds: 1 tps: 63.00 qps: 1134.02 (r/w/o: 882.01/252.00/0.00) lat (ms,95%): 23.10 err/s 0.00 reconn/s: 0.00</span><br></pre></td></tr></table></figure><h3 id="LVS-Nginx-上重现"><a href="#LVS-Nginx-上重现" class="headerlink" title="LVS + Nginx 上重现"></a>LVS + Nginx 上重现</h3><p>NGINX上重现这个问题：<a href="https://asciinema.org/a/649890" target="_blank" rel="noopener">https://asciinema.org/a/649890</a> 3分钟的录屏，这个视频构造了一个LVS 的HA切换过程，LVS后有两个Nginx，模拟一个Nginx(Master) 断网后，将第二个Nginx(Slave) 加入到LVS 并将第一个Nginx(Master) 从LVS 摘除，期望业务能立即恢复，但实际上可以看到之前的所有长连接都没有办法恢复，进入一个流量黑洞</p><h2 id="TCP-长连接流量黑洞原理总结"><a href="#TCP-长连接流量黑洞原理总结" class="headerlink" title="TCP 长连接流量黑洞原理总结"></a>TCP 长连接流量黑洞原理总结</h2><p>TCP 长连接在发送包的时候，如果没收到ack 默认会进行15次重传(net.ipv4.tcp_retries2&#x3D;15, 这个不要较真，会根据RTO 时间大致是15次)，累加起来大概是924秒，所以我们经常看到业务需要15分钟左右才恢复。这个问题存在所有TCP长连接中(几乎没有业务还在用短连接吧？)，问题的本质和 LVS&#x2F;k8s Service 都没关系</p><p>我这里重现带上 LVS 只是为了场景演示方便 </p><p>这个问题的本质就是如果Server突然消失(宕机、断网，来不及发 RST )客户端如果正在发东西给Server就会遵循TCP 重传逻辑不断地TCP retran , 如果一直收不到Server 的ack，大约重传15次，900秒左右。所以不是因为有 LVS 导致了这个问题，而是在某些场景下 LVS 有能力处理得更优雅，比如删除 RealServer的时候 LVS 完全可以感知这个动作并 reset 掉其上所有长连接</p><p>为什么在K8S 上这个问题更明显呢，K8S 讲究的就是服务不可靠，随时干掉POD(切断网络），如果干POD 之前能kill -9(触发reset)、或者close 业务触发断开连接那还好，但是大多时候啥都没干，有强摘POD、有直接隔离等等，这些操作都会导致对端只能TCP retran</p><h2 id="怎么解决"><a href="#怎么解决" class="headerlink" title="怎么解决"></a>怎么解决</h2><h3 id="业务方"><a href="#业务方" class="headerlink" title="业务方"></a>业务方</h3><p>业务方要对自己的请求超时时间有控制和兜底，不能任由一个请求长时间 Hang 在那里</p><p>比如JDBC URL 支持设置 SocketTimeout、ConnectTimeout，我相信其他产品也有类似的参数，业务方要设置这些值，不设置就是如上重现里演示的900多秒后才恢复</p><h4 id="SocketTimeout"><a href="#SocketTimeout" class="headerlink" title="SocketTimeout"></a>SocketTimeout</h4><p>只要是连接有机会设置 SocketTimeout 就一定要设置，具体值可以根据你们能接受的慢查询来设置；分析、AP类的请求可以设置大一点</p><p><strong>最重要的：任何业务只要你用到了TCP 长连接一定要配置一个恰当的SocketTimeout</strong>，比如 Jedis 是连接池模式，底层超时之后，会销毁当前连接，下一次重新建连，就会连接到新的切换节点上去并恢复</p><h4 id="RFC-5482-TCP-USER-TIMEOUT"><a href="#RFC-5482-TCP-USER-TIMEOUT" class="headerlink" title="RFC 5482 TCP_USER_TIMEOUT"></a><a href="https://datatracker.ietf.org/doc/html/rfc5482" target="_blank" rel="noopener">RFC 5482</a> <code>TCP_USER_TIMEOUT</code></h4><p><a href="https://datatracker.ietf.org/doc/html/rfc5482" target="_blank" rel="noopener">RFC 5482</a> 中增加了<code>TCP_USER_TIMEOUT</code>这个配置，通常用于定制当 TCP 网络连接中出现数据传输问题时，可以等待多长时间前释放网络资源，对应Linux 这个 <a href="https://github.com/torvalds/linux/commit/dca43c75e7e545694a9dd6288553f55c53e2a3a3" target="_blank" rel="noopener">commit </a></p><p><code>TCP_USER_TIMEOUT</code> 是一个整数值，它指定了当 TCP 连接的数据包在发送后多长时间内未被确认（即没有收到 ACK），TCP 连接会考虑释放这个连接。</p><p>打个比方，设置 <code>TCP_USER_TIMEOUT</code> 后，应用程序就可以指定说：“如果在 30 秒内我发送的数据没有得到确认，那我就认定网络连接出了问题，不再尝试继续发送，而是直接断开连接。”这对于确保连接质量和维护用户体验是非常有帮助的。</p><p>在 Linux 中，可以使用 <code>setsockopt</code> 函数来设置某个特定 socket 的 <code>TCP_USER_TIMEOUT</code> 值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int timeout = 30000; // 30 seconds</span><br><span class="line">setsockopt(sock, IPPROTO_TCP, TCP_USER_TIMEOUT, (char *)&amp;timeout, sizeof(timeout));</span><br></pre></td></tr></table></figure><p>在这行代码中，<code>sock</code> 是已经 established 的 TCP socket，我们将该 socket 的 <code>TCP_USER_TIMEOUT</code> 设置为 30000 毫秒，也就是 30 秒。如果设置成功，这个 TCP 连接在发送数据包后 30 秒内如果没有收到 ACK 确认，将开始进行 TCP 连接的释放流程。</p><p>TCP_USER_TIMEOUT 相较 SocketTimeout 可以做到更精确(不影响慢查询)，SocketTimeout 超时是不区分ACK 还是请求响应时间的，但是 TCP_USER_TIMEOUT 要求下层的API、OS 都支持。比如 JDK 不支持 TCP_USER_TIMEOUT，但是 <a href="https://github.com/tomasol/netty/commit/3010366d957d7b8106e353f99e15ccdb7d391d8f#diff-a998f73b7303461ca171432d10832884c6e7b0955d9f5634b9a8302b42a4706c" target="_blank" rel="noopener">Netty 框架自己搞了Native</a> 来实现对 TCP_USER_TIMEOUT 以及其它OS 参数的设置，在这些基础上<a href="https://github.com/redis/lettuce/pull/2499" target="_blank" rel="noopener">Redis 的Java 客户端 lettuce 依赖了 Netty ，所以也可以设置 TCP_USER_TIMEOUT</a></p><p>原本我是想在Druid 上提个feature 来支持 TCP_USER_TIMEOUT，这样集团绝大部分业务都可以无感知解决掉这个问题，但查下来发现 JDK 不支持设置这个值，想要在Druid 里面实现设置 TCP_USER_TIMEOUT 的话，得像 Netty 一样走Native 绕过JDK 来设置，这对 Druid 而言有点重了</p><h4 id="ConnectTimeout"><a href="#ConnectTimeout" class="headerlink" title="ConnectTimeout"></a>ConnectTimeout</h4><p>这个值是针对新连接创建超时时间设置，一般设置3-5秒就够长了</p><h4 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h4><p>建议参考这篇 <a href="https://help.aliyun.com/document_detail/181399.html" target="_blank" rel="noopener">《数据库连接池配置推荐》</a>  这篇里的很多建议也适合业务、应用等，你把数据库看成一个普通服务就好理解了</p><p>补充下如果用的是Druid 数据库连接池不要用它来设置你的  SocketTimeout 参数，因为他有bug 导致你觉得设置了但实际没设置上，<a href="https://github.com/alibaba/druid/releases/tag/1.2.22" target="_blank" rel="noopener">2024-03-16号的1.2.22</a>这个Release 才fix，所以强烈建议你讲 SocketTimeout 写死在JDBC URL 中简单明了</p><h3 id="OS-兜底"><a href="#OS-兜底" class="headerlink" title="OS 兜底"></a>OS 兜底</h3><p>假如业务是一个AP查询&#x2F;一次慢请求，一次查询&#x2F;请求就是需要半个小时，将 SocketTimeout 设置太小影响正常的查询，那么可以将如下 OS参数改小，从 OS 层面进行兜底</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.tcp_retries2 = 8</span><br><span class="line">net.ipv4.tcp_syn_retries = 4</span><br></pre></td></tr></table></figure><h4 id="keepalive"><a href="#keepalive" class="headerlink" title="keepalive"></a>keepalive</h4><p>keepalive 默认 7200秒太长了，建议改成20秒，可以在OS 镜像层面固化，然后各个业务可以 patch 自己的值；</p><p>如果一条连接限制超过 900 秒 LVS就会Reset 这条连接，但是我们将keepalive 设置小于900秒的话，即使业务上一直闲置，因为有 keepalive 触发心跳包，让 LVS 不至于 Reset，这也就避免了当业务取连接使用的时候才发现连接已经不可用被断开了，往往这个时候业务抛错误的时间很和真正 Reset 时间还差了很多，不好排查</p><p>在触发 TCP retransmission 后会停止 keepalive 探测</p><h3 id="LVS"><a href="#LVS" class="headerlink" title="LVS"></a>LVS</h3><p>如果你们试用了aliyun的SLB，当摘除节点的时候支持你设置一个时间，过了这个时间 aliyun的SLB 就会向这些连接的客户端发 Reset 干掉这些流量，让客户端触发新建连接，从故障中快速恢复，这是一个实例维度的参数，建议云上所有产品都支持起来，管控可以在购买 aliyun的SLB 的时候设置一个默认值：</p><p> <code>connection_drain_timeout</code> </p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="神奇的900秒"><a href="#神奇的900秒" class="headerlink" title="神奇的900秒"></a>神奇的900秒</h3><p>上面阐述的长连接流量黑洞一般是900+秒就恢复了，有时候我们经常在日志中看到 CommunicationsException: Communications link failure 900秒之类的错误，恰好 LVS 也是设置的 900秒闲置 Reset</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#ipvsadm -L --timeout</span><br><span class="line">Timeout (tcp tcpfin udp): 900 120 300</span><br></pre></td></tr></table></figure><h3 id="为什么这个问题这几年才明显暴露"><a href="#为什么这个问题这几年才明显暴露" class="headerlink" title="为什么这个问题这几年才明显暴露"></a>为什么这个问题这几年才明显暴露</h3><ul><li>工程师们混沌了几十年</li><li>之前因为出现频率低重启业务就糊弄过去了</li><li>对新连接不存在这个问题</li><li>有些连接池配置了Check 机制(Check机制一般几秒钟超时 fail)</li><li>微服务多了</li><li>云上 LVS 普及了</li><li>k8s service 大行其道</li></ul><h3 id="我用的-7层是不是就没有这个问题了？"><a href="#我用的-7层是不是就没有这个问题了？" class="headerlink" title="我用的 7层是不是就没有这个问题了？"></a>我用的 7层是不是就没有这个问题了？</h3><p>幼稚，你4层都挂了7层还能蹦跶，再说一遍只要是 TCP 长连接就有这个问题</p><h3 id="极端情况"><a href="#极端情况" class="headerlink" title="极端情况"></a>极端情况</h3><p>A 长连接 访问B 服务，B服务到A网络不通，假如B发生HA，一般会先Reset&#x2F;断开B上所有连接(比如 MySQL 会去kill 所有processlist；比如重启MySQL——假如这里的B是MySQL)，但是因为网络不通这里的reset、fin网络包都无法到达A，所以B是无法兜底这个异常场景， A无法感知B不可用了，会使用旧连接大约15分钟</p><p>最可怕的是 B 服务不响应，B所在的OS 还在响应，那么在A的视角 网络是正常的，这时只能A自己来通过超时兜底</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这种问题在 LVS 场景下暴露更明显了，但是又和LVS 没啥关系，任何业务长连接都会导致这个 900秒左右的流量黑洞，首先要在业务层面重视这个问题，要不以后数据库一挂掉还得重启业务才能从故障中将恢复，所以业务层面处理好了可以避免900秒黑洞和重启业务，达到快速从故障中恢复</p><p>再强调下这个问题如果去掉LVS&#x2F;k8s Service&#x2F;软负载等让两个服务直连，然后拔网线也会同样出现</p><p>最佳实践总结：</p><ul><li>如果你的业务支持设置 SocketTimeout 那么请一定要设置，但不一定适合分析类就是需要长时间返回的请求</li><li>最好的方式是设置 OS 层面的 TCP_USER_TIMEOUT 参数，只要长时间没有 ack 就报错返回，但 JDK 不支持直接设置</li><li>如果用了 ALB&#x2F;SLB 就一定要配置 connection_drain_timeout 这个参数</li><li>OS 镜像层面也可以将 tcp_retries2 设置为5-10次做一个兜底</li><li>对你的超时时间做到可控、可预期</li></ul><h2 id="相关故障和资料"><a href="#相关故障和资料" class="headerlink" title="相关故障和资料"></a>相关故障和资料</h2><p>ALB 黑洞问题详述：<a href="https://mp.weixin.qq.com/s/BJWD2V_RM2rnU1y7LPB9aw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/BJWD2V_RM2rnU1y7LPB9aw</a></p><p>数据库故障引发的“血案” ：<a href="https://www.cnblogs.com/nullllun/p/15073022.html" target="_blank" rel="noopener">https://www.cnblogs.com/nullllun/p/15073022.html</a> 这篇描述较细致，推荐看看</p><p>tcp_retries2 的解释：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">tcp_retries1 - INTEGER</span><br><span class="line">    This value influences the time, after which TCP decides, that</span><br><span class="line">    something is wrong due to unacknowledged RTO retransmissions,</span><br><span class="line">    and reports this suspicion to the network layer.</span><br><span class="line">    See tcp_retries2 for more details.</span><br><span class="line"></span><br><span class="line">    RFC 1122 recommends at least 3 retransmissions, which is the</span><br><span class="line">    default.</span><br><span class="line"></span><br><span class="line">tcp_retries2 - INTEGER</span><br><span class="line">    This value influences the timeout of an alive TCP connection,</span><br><span class="line">    when RTO retransmissions remain unacknowledged.</span><br><span class="line">    Given a value of N, a hypothetical TCP connection following</span><br><span class="line">    exponential backoff with an initial RTO of TCP_RTO_MIN would</span><br><span class="line">    retransmit N times before killing the connection at the (N+1)th RTO.</span><br><span class="line"></span><br><span class="line">    The default value of 15 yields a hypothetical timeout of 924.6</span><br><span class="line">    seconds and is a lower bound for the effective timeout.</span><br><span class="line">    TCP will effectively time out at the first RTO which exceeds the</span><br><span class="line">    hypothetical timeout.</span><br><span class="line"></span><br><span class="line">    RFC 1122 recommends at least 100 seconds for the timeout,</span><br><span class="line">    which corresponds to a value of at least 8.</span><br></pre></td></tr></table></figure><p>tcp_retries2 默认值为15，根据RTO的值来决定，相当于13-30分钟(RFC1122规定，必须大于100秒)，但是这是很多年前的拍下来古董参数值，现在网络条件好多了，尤其是内网，个人认为改成 5-10 是比较恰当 azure 建议：<a href="https://learn.microsoft.com/en-us/azure/azure-cache-for-redis/cache-best-practices-connection" target="_blank" rel="noopener">https://learn.microsoft.com/en-us/azure/azure-cache-for-redis/cache-best-practices-connection</a> ，Oracle RAC的建议值是3：<a href="https://access.redhat.com/solutions/726753" target="_blank" rel="noopener">https://access.redhat.com/solutions/726753</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;长连接黑洞重现和分析&quot;&gt;&lt;a href=&quot;#长连接黑洞重现和分析&quot; class=&quot;headerlink&quot; title=&quot;长连接黑洞重现和分析&quot;&gt;&lt;/a&gt;长连接黑洞重现和分析&lt;/h1&gt;&lt;p&gt;这是一个存在多年，遍及各个不同的业务又反反复复地在集团内部出现的一个问题，本
      
    
    </summary>
    
      <category term="network" scheme="https://plantegg.github.io/categories/network/"/>
    
    
      <category term="Linux" scheme="https://plantegg.github.io/tags/Linux/"/>
    
      <category term="LVS" scheme="https://plantegg.github.io/tags/LVS/"/>
    
      <category term="network" scheme="https://plantegg.github.io/tags/network/"/>
    
      <category term="SocketTimeout" scheme="https://plantegg.github.io/tags/SocketTimeout/"/>
    
      <category term="TCP_USER_TIMEOUT" scheme="https://plantegg.github.io/tags/TCP-USER-TIMEOUT/"/>
    
  </entry>
  
  <entry>
    <title>十年后数据库还是不敢拥抱NUMA-续篇</title>
    <link href="https://plantegg.github.io/2024/05/03/%E5%8D%81%E5%B9%B4%E5%90%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%98%E6%98%AF%E4%B8%8D%E6%95%A2%E6%8B%A5%E6%8A%B1NUMA-%E7%BB%AD%E7%AF%87/"/>
    <id>https://plantegg.github.io/2024/05/03/十年后数据库还是不敢拥抱NUMA-续篇/</id>
    <published>2024-05-03T04:30:03.000Z</published>
    <updated>2024-11-20T10:00:54.910Z</updated>
    
    <content type="html"><![CDATA[<h1 id="十年后数据库还是不敢拥抱NUMA-续篇"><a href="#十年后数据库还是不敢拥抱NUMA-续篇" class="headerlink" title="十年后数据库还是不敢拥抱NUMA-续篇"></a>十年后数据库还是不敢拥抱NUMA-续篇</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p><a href="https://plantegg.github.io/2021/05/14/%E5%8D%81%E5%B9%B4%E5%90%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%98%E6%98%AF%E4%B8%8D%E6%95%A2%E6%8B%A5%E6%8A%B1NUMA/">十年后数据库还是不敢拥抱NUMA</a>， 这篇经典的纠正大家对NUMA 认知的文章一晃发布快3年了，这篇文章的核心结论是：</p><ul><li>之所以有不同的NUMA Node 是不同的CPU Core 到不同的内存距离远近不一样所决定的，这是个物理距离</li><li>程序跑在不同的核上要去读写内存可以让性能差异巨大，所以我们要尽量让一个程序稳定跑在一个Node 内</li><li>默认打开NUMA Node 其实挺好的</li></ul><p>写这个续篇是我收到很多解释，因为跨Node 导致性能抖动，所以集团在物理机OS 的启动参数里设置了 numa&#x3D;off ，也就是不管BIOS 中如何设置，我们只要在OS 层面设置一下 numa&#x3D;off 就能让程序稳定下来不再抖了！</p><p>我这几年也认为这是对的，只是让我有点不理解，既然不区分远近了，那物理上存在的远近距离(既抖动)如何能被消除掉的呢？</p><p>所以这个续篇打算通过测试来验证下这个问题</p><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><p>BIOS 中有 numa node 设置的开关(注意这里是内存交错&#x2F;交织)，不同的主板这个BIOS设置可能不一样，但是大同小异，基本都有这个参数</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/FrVuhXNHEf2LzigZPHHV6c7UNKrP-5057597.png" alt="img">﻿</p><p>Linux 启动引导参数里也可以设置numa&#x3D;on(默认值)&#x2F;off ，linux 引导参数设置案例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#cat /proc/cmdline</span><br><span class="line">BOOT_IMAGE=/vmlinuz-3.10.0-327.x86_64  ro crashkernel=auto vconsole.font=latarcyrheb-sun16 vconsole.keymap=us BIOSdevname=0 console=tty0 console=ttyS0,115200 scsi_mod.scan=sync intel_idle.max_cstate=0 pci=pcie_bus_perf ipv6.disable=1 rd.driver.pre=ahci numa=on nosmt=force</span><br></pre></td></tr></table></figure><p>注意如上的 numa&#x3D;on 也可以改为 numa&#x3D;off</p><p>看完全置篇要记住一条铁律：CPU到内存的距离是物理远近决定的，你软件层面做些设置是没法优化这个距离，也就是没法优化这个时延 (这是个核心知识点，你要死死记住和理解，后面的一切实验数据都回过头来看这个核心知识点并揣摩)</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>测试机器CPU，如下是BIOS numa&#x3D;on、cmdline numa&#x3D;off所看到的，一个node</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#lscpu</span><br><span class="line">Architecture:          x86_64</span><br><span class="line">CPU op-mode(s):        32-bit, 64-bit</span><br><span class="line">Byte Order:            Little Endian</span><br><span class="line">CPU(s):                96</span><br><span class="line">On-line CPU(s) list:   0-95</span><br><span class="line">Thread(s) per core:    2</span><br><span class="line">Core(s) per socket:    24</span><br><span class="line">Socket(s):             2</span><br><span class="line">NUMA node(s):          1</span><br><span class="line">Vendor ID:             GenuineIntel</span><br><span class="line">CPU family:            6</span><br><span class="line">Model:                 85</span><br><span class="line">Model name:            Intel(R) Xeon(R) Platinum 8163 CPU @ 2.50GHz</span><br><span class="line">Stepping:              4</span><br><span class="line">CPU MHz:               2500.000</span><br><span class="line">CPU max MHz:           3100.0000</span><br><span class="line">CPU min MHz:           1000.0000</span><br><span class="line">BogoMIPS:              4998.89</span><br><span class="line">Virtualization:        VT-x</span><br><span class="line">L1d cache:             32K</span><br><span class="line">L1i cache:             32K</span><br><span class="line">L2 cache:              1024K</span><br><span class="line">L3 cache:              33792K</span><br><span class="line">NUMA node0 CPU(s):     0-95</span><br></pre></td></tr></table></figure><p>测试工具是<a href="https://github.com/intel/lmbench" target="_blank" rel="noopener">lmbench</a>，测试命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for i in $(seq 0 6 95); do echo core:$i; numactl -C $i -m 0 ./bin/lat_mem_rd -W 5 -N 5 -t 64M; done &gt;lat.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure><p>上述测试命令始终将内存绑定在 node0 上，然后用不同的物理core来读写这块内存，按照<a href="https://ata.atatech.org/articles/11000205974" target="_blank" rel="noopener">前一篇</a> 这个时延肯定有快慢之分</p><p>BIOS和引导参数各有两种设置方式，组合起来就是四种，我们分别设置并跑一下内存时延，测试结果：</p><table><thead><tr><th></th><th>BIOS ON</th><th>BIOS OFF</th></tr></thead><tbody><tr><td>cmdline numa&#x3D;on（默认值）</td><td>NUMA 开启，内存在Node内做交织，就近有快慢之分</td><td>bios 关闭后numa后，OS层面完全不知道下层的结构，默认全局内存做交织，时延是个平均值</td></tr><tr><td>cmdline numa&#x3D;off</td><td>交织关闭，效果同上</td><td>同上</td></tr></tbody></table><p>测试原始数据如下(测试结果文件名 lat.log.BIOSON.cmdlineOff 表示BIOS ON，cmdline OFF )：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">//从下面两组测试来看，BIOS层面 on后，不管OS 层面是否on，都不会跨node 做交织，抖动存在</span><br><span class="line">//BIOS on 即使在OS层面关闭numa也不跨node做内存交织，抖动存在</span><br><span class="line">//默认从内存高地址开始分配空间，所以0核要慢</span><br><span class="line">#grep -E &quot;core|64.00000&quot; lat.log.BIOSON.cmdlineOff </span><br><span class="line">core:0 //第0号核</span><br><span class="line">64.00000 100.717 //64.0000为64MB， 100.717 是平均时延100.717ns 即0号核访问node0 下的内存64MB的平均延时是100纳秒</span><br><span class="line">core:24</span><br><span class="line">64.00000 68.484</span><br><span class="line">core:48</span><br><span class="line">64.00000 101.070</span><br><span class="line">core:72</span><br><span class="line">64.00000 68.483</span><br><span class="line">#grep -E &quot;core|64.00000&quot; lat.log.BIOSON.cmdlineON</span><br><span class="line">core:0</span><br><span class="line">64.00000 67.094</span><br><span class="line">core:24</span><br><span class="line">64.00000 100.237</span><br><span class="line">core:48</span><br><span class="line">64.00000 67.614</span><br><span class="line">core:72</span><br><span class="line">64.00000 101.096</span><br><span class="line"></span><br><span class="line">//从下面两组测试来看只要BIOS off了内存就会跨 node 交织，大规模测试下内存 latency 是个平均值</span><br><span class="line">#grep -E &quot;core|64.00000&quot; lat.log.BIOSOff.cmdlineOff //BIOS off 做内存交织，latency就是平均值</span><br><span class="line">core:0</span><br><span class="line">64.00000 85.657  //85 恰好是最大100，最小68的平均值</span><br><span class="line">core:24</span><br><span class="line">64.00000 85.741</span><br><span class="line">core:48</span><br><span class="line">64.00000 85.977</span><br><span class="line">core:72</span><br><span class="line">64.00000 86.671</span><br><span class="line"></span><br><span class="line">//BIOS 关闭后numa后，OS层面完全不知道下层的结构，默认一定是做交织</span><br><span class="line">#grep -E &quot;core|64.00000&quot; lat.log.BIOSOff.cmdlineON</span><br><span class="line">core:0</span><br><span class="line">64.00000 89.123</span><br><span class="line">core:24</span><br><span class="line">64.00000 87.137</span><br><span class="line">core:48</span><br><span class="line">64.00000 87.239</span><br><span class="line">core:72</span><br><span class="line">64.00000 87.323</span><br></pre></td></tr></table></figure><p>从数据可以看到在BIOS 设置ON后，无论 OS cmdline 启动参数里是否设置了 ON 还是 OFF，内存延时都是抖动且一致的(这个有点诧异，说好的消除抖动的呢？)。如果BIOS 设置OFF后内存延时是个稳定的平均值(这个比较好理解)</p><h2 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h2><ul><li>内存交错时为什么 lmbench 测试得到的时延是平均值，而不是短板效应的最慢值？</li></ul><p>测试软件只能通过大规模数据的读写来测试获取一个平均值，所以当一大块内存读取时，虽然通过交织大块内存被切分到了快慢物理内存上，但是因为规模大慢的被平均掉了。(欢迎内核大佬指正)</p><ul><li>什么是内存交织？</li></ul><p>我的理解假如你有8块物理内存条，如果你有一个int 那么只能在其中一块上，如果你有1MB的数据那么会按cacheline 拆成多个块然后分别放到8块物理内存条上(有快有慢)这样带宽更大，最后测试得到一个平均值</p><p>如果你开启numa那么只会就近交织，比如0-3号内存条在0号core所在的node，OS 做内存交织的时候只会拆分到这0-3号内存条上，那么时延总是最小的那个，如上测试中的60多纳秒。</p><p>这个问题一直困扰了我几年，所以我最近再次测试验证了一下，主要是对 BIOS&#x3D;on 且 cmdline&#x3D;off 时有点困扰</p><h2 id="Intel-的-mlc-验证"><a href="#Intel-的-mlc-验证" class="headerlink" title="Intel 的 mlc 验证"></a>Intel 的 mlc 验证</h2><p>测试参数: BIOS&#x3D;on 同时 cmdline off</p><p>用<a href="https://www.intel.com/content/www/us/en/developer/articles/tool/intelr-memory-latency-checker.html" target="_blank" rel="noopener">Intel 的 mlc 验证下</a>，这个结果有点意思，latency稳定在 145 而不是81 和 145两个值随机出现，应该是mlc默认选到了0核，对应lmbench的这组测试数据(为什么不是100.717， 因为测试方法不一样)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//如下是</span><br><span class="line">//从下面两种测试来看，BIOS层面 on后，不管OS 层面是否on，都不会跨node 做交织，抖动存在</span><br><span class="line">//BIOS on 即使在OS层面关闭numa也不跨node做内存交织，抖动存在</span><br><span class="line">#grep -E &quot;core|64.00000&quot; lat.log.BIOSON.cmdlineOff </span><br><span class="line">core:0</span><br><span class="line">64.00000 100.717</span><br><span class="line">core:24</span><br><span class="line">64.00000 68.484</span><br><span class="line">core:48</span><br><span class="line">64.00000 101.070</span><br><span class="line">core:72</span><br><span class="line">64.00000 68.483</span><br></pre></td></tr></table></figure><p>此时对应的mlc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#./mlc</span><br><span class="line">Intel(R) Memory Latency Checker - v3.9</span><br><span class="line">Measuring idle latencies (in ns)...</span><br><span class="line">    Numa node</span><br><span class="line">Numa node    0</span><br><span class="line">    0   145.8  //多次测试稳定都是145纳秒</span><br><span class="line"></span><br><span class="line">Measuring Peak Injection Memory Bandwidths for the system</span><br><span class="line">Bandwidths are in MB/sec (1 MB/sec = 1,000,000 Bytes/sec)</span><br><span class="line">Using all the threads from each core if Hyper-threading is enabled</span><br><span class="line">Using traffic with the following read-write ratios</span><br><span class="line">ALL Reads     :  110598.7</span><br><span class="line">3:1 Reads-Writes :  93408.5</span><br><span class="line">2:1 Reads-Writes :  89249.5</span><br><span class="line">1:1 Reads-Writes :  64137.3</span><br><span class="line">Stream-triad like:  77310.4</span><br><span class="line"></span><br><span class="line">Measuring Memory Bandwidths between nodes within system</span><br><span class="line">Bandwidths are in MB/sec (1 MB/sec = 1,000,000 Bytes/sec)</span><br><span class="line">Using all the threads from each core if Hyper-threading is enabled</span><br><span class="line">Using Read-only traffic type</span><br><span class="line">    Numa node</span><br><span class="line">Numa node    0</span><br><span class="line">    0  110598.4</span><br><span class="line"></span><br><span class="line">Measuring Loaded Latencies for the system</span><br><span class="line">Using all the threads from each core if Hyper-threading is enabled</span><br><span class="line">Using Read-only traffic type</span><br><span class="line">Inject  Latency Bandwidth</span><br><span class="line">Delay (ns)  MB/sec</span><br><span class="line">==========================</span><br><span class="line"> 00000  506.00   111483.5</span><br><span class="line"> 00002  505.74   112576.9</span><br><span class="line"> 00008  505.87   112644.3</span><br><span class="line"> 00015  508.96   112643.6</span><br><span class="line"> 00050  574.36   112701.5</span><br></pre></td></tr></table></figure><p>当两个参数都为 on 时的mlc 测试结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#./mlc</span><br><span class="line">Intel(R) Memory Latency Checker - v3.9</span><br><span class="line">Measuring idle latencies (in ns)...</span><br><span class="line">    Numa node</span><br><span class="line">Numa node    0     1</span><br><span class="line">    0    81.6   145.9</span><br><span class="line">    1   144.9    81.2</span><br><span class="line"></span><br><span class="line">Measuring Peak Injection Memory Bandwidths for the system</span><br><span class="line">Bandwidths are in MB/sec (1 MB/sec = 1,000,000 Bytes/sec)</span><br><span class="line">Using all the threads from each core if Hyper-threading is enabled</span><br><span class="line">Using traffic with the following read-write ratios</span><br><span class="line">ALL Reads     :  227204.2</span><br><span class="line">3:1 Reads-Writes :  212432.5</span><br><span class="line">2:1 Reads-Writes :  210423.3</span><br><span class="line">1:1 Reads-Writes :  196677.2</span><br><span class="line">Stream-triad like:  189691.4</span><br></pre></td></tr></table></figure><p>说明：mlc和 lmbench 测试结果不一样，mlc 时81和145，lmbench测试是68和100，这是两种测试方法的差异而已，但是快慢差距基本是一致的</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>在OS 启动引导参数里设置 numa&#x3D;off 完全没有必要、也不能解决抖动的问题，反而设置了 numa&#x3D;off 只能是掩耳盗铃，让用户看不到 NUMA 结构</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;十年后数据库还是不敢拥抱NUMA-续篇&quot;&gt;&lt;a href=&quot;#十年后数据库还是不敢拥抱NUMA-续篇&quot; class=&quot;headerlink&quot; title=&quot;十年后数据库还是不敢拥抱NUMA-续篇&quot;&gt;&lt;/a&gt;十年后数据库还是不敢拥抱NUMA-续篇&lt;/h1&gt;&lt;h2 i
      
    
    </summary>
    
      <category term="CPU" scheme="https://plantegg.github.io/categories/CPU/"/>
    
    
      <category term="CPU" scheme="https://plantegg.github.io/tags/CPU/"/>
    
      <category term="performance" scheme="https://plantegg.github.io/tags/performance/"/>
    
      <category term="BIOS" scheme="https://plantegg.github.io/tags/BIOS/"/>
    
      <category term="numa" scheme="https://plantegg.github.io/tags/numa/"/>
    
  </entry>
  
  <entry>
    <title>流量一样但为什么CPU使用率差别很大</title>
    <link href="https://plantegg.github.io/2024/04/26/%E6%B5%81%E9%87%8F%E4%B8%80%E6%A0%B7%E4%BD%86%E4%B8%BA%E4%BB%80%E4%B9%88CPU%E4%BD%BF%E7%94%A8%E7%8E%87%E5%B7%AE%E5%88%AB%E5%BE%88%E5%A4%A7/"/>
    <id>https://plantegg.github.io/2024/04/26/流量一样但为什么CPU使用率差别很大/</id>
    <published>2024-04-26T04:30:03.000Z</published>
    <updated>2024-11-20T10:00:53.721Z</updated>
    
    <content type="html"><![CDATA[<h1 id="流量一样但为什么CPU使用率差别很大"><a href="#流量一样但为什么CPU使用率差别很大" class="headerlink" title="流量一样但为什么CPU使用率差别很大"></a>流量一样但为什么CPU使用率差别很大</h1><p>这是我翻到2013年的一篇文章，当时惊动所有公司高人，最后分析得知原因后所有人都跪拜，你要知道那是2013年，正好10年过去了，如果是现在用我们星球的理论去套的话，简直不要太容易</p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><blockquote><p>同样大小内存、同样的CPU、同样数量的请求、几乎可以忽略的io，两个机器的load却差异挺大。一个机器的load是12左右，另外一个机器却是30左右</p><p>你可以理解这是两台一摸一样的物理机挂在一个LVS 下，LVS 分发流量绝对均衡</p></blockquote><p>所以要找出为什么？</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>两台机器的资源使用率：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//load低、CPU使用率低 的物理机，省略一部分核</span><br><span class="line">Cpu0  : 67.1%us,  1.6%sy,  0.0%ni, 30.6%id,  0.0%wa,  0.0%hi,  0.7%si,  0.0%st</span><br><span class="line">Cpu1  : 64.1%us,  1.6%sy,  0.0%ni, 34.3%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st</span><br><span class="line">Cpu2  : 63.0%us,  1.6%sy,  0.0%ni, 35.4%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st</span><br><span class="line">Cpu3  : 60.0%us,  1.3%sy,  0.0%ni, 38.4%id,  0.0%wa,  0.0%hi,  0.3%si,  0.0%st</span><br><span class="line">Cpu4  : 59.8%us,  1.3%sy,  0.0%ni, 37.9%id,  1.0%wa,  0.0%hi,  0.0%si,  0.0%st</span><br><span class="line">Cpu5  : 56.7%us,  1.0%sy,  0.0%ni, 42.3%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st</span><br><span class="line">Cpu6  : 63.4%us,  1.3%sy,  0.0%ni, 34.6%id,  0.0%wa,  0.0%hi,  0.7%si,  0.0%st</span><br><span class="line">Cpu7  : 62.5%us,  2.0%sy,  0.0%ni, 35.5%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st</span><br><span class="line">Cpu8  : 58.5%us,  1.3%sy,  0.0%ni, 39.5%id,  0.0%wa,  0.0%hi,  0.7%si,  0.0%st</span><br><span class="line">Cpu9  : 55.8%us,  1.6%sy,  0.0%ni, 42.2%id,  0.3%wa,  0.0%hi,  0.0%si,  0.0%st</span><br><span class="line"></span><br><span class="line">//load高、CPU使用率高 的物理机，省略一部分核</span><br><span class="line">Cpu0  : 90.1%us,  1.9%sy,  0.0%ni,  7.1%id,  0.0%wa,  0.0%hi,  1.0%si,  0.0%st</span><br><span class="line">Cpu1  : 88.5%us,  2.9%sy,  0.0%ni,  8.0%id,  0.0%wa,  0.0%hi,  0.6%si,  0.0%st</span><br><span class="line">Cpu2  : 90.4%us,  1.9%sy,  0.0%ni,  7.7%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st</span><br><span class="line">Cpu3  : 86.9%us,  2.6%sy,  0.0%ni, 10.2%id,  0.0%wa,  0.0%hi,  0.3%si,  0.0%st</span><br><span class="line">Cpu4  : 87.5%us,  1.9%sy,  0.0%ni, 10.2%id,  0.0%wa,  0.0%hi,  0.3%si,  0.0%st</span><br><span class="line">Cpu5  : 87.3%us,  1.9%sy,  0.0%ni, 10.5%id,  0.0%wa,  0.0%hi,  0.3%si,  0.0%st</span><br><span class="line">Cpu6  : 90.4%us,  2.9%sy,  0.0%ni,  6.4%id,  0.0%wa,  0.0%hi,  0.3%si,  0.0%st</span><br><span class="line">Cpu7  : 90.1%us,  1.9%sy,  0.0%ni,  7.6%id,  0.0%wa,  0.0%hi,  0.3%si,  0.0%st</span><br><span class="line">Cpu8  : 89.5%us,  2.6%sy,  0.0%ni,  6.7%id,  0.0%wa,  0.0%hi,  1.3%si,  0.0%st</span><br><span class="line">Cpu9  : 90.7%us,  1.9%sy,  0.0%ni,  7.4%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st</span><br></pre></td></tr></table></figure><p>可以分析产出为什么低，检查CPU是否降频、内存频率是否有差异——检查结果一致</p><p>10年前经过一阵 perf top 看热点后终于醒悟过来知道得去看 IPC，也就是相同CPU使用率下，其中慢的机器产出低了一半，那么继续通过perf看IPC：</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/FrsOfjsmHa6Zwv67IBgTd-GTI2fT.png" alt="img"></p><p>可以看到两台机器的IPC是 0.3 VS 0.55，和CPU使用率差异基本一致，instructions几乎一样(意味着流量一样，LVS 不背锅)，但是处理同样的instructions 用掉的cpu-clock 几乎差了一倍，这应该是典型的内存时延大了一倍导致的。IPC 大致等于 instrunctions&#x2F;cpu-clock （IPC：instrunctions per cycles）</p><p>经检查这两台物理机都是两路，虽然CPU型号&#x2F;内存频率一致，但是主板间跨Socket的 QPI带宽差了一倍(主板是两个不同的服务商提供)。可以通过绑核测试不同Socket&#x2F;Node 下内存时延来确认这个问题</p><p>这是同一台机器下两个Socket 的内存带宽，所以如果跨Socket 内存访问多了就会导致时延更高、CPU使用率更高</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/FmaZP2Wf1xiSoHyi2xHslbAVr71_.png" alt="img"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在今天我们看到这种问题就很容易了，但我还是要感叹一下在入门前简直太神奇，入门后也不过尔尔，希望你也早点入门。</p><p>第一：向CPU要产出，同样的使用率产出得一样，不一样的话肯定是偷懒了，偷懒的直接证据就是 IPC 低了，导致IPC 低最常见的是内存时延高(内存频率、跨Node&#x2F;Socket 等，或者内存碎片)；延伸阅读：<a href="https://t.zsxq.com/10fYf762S" target="_blank" rel="noopener">性能的本质 IPC</a> ，也是本星球唯二的必读实验</p><p>第二：测试工具很完善了，<a href="https://github.com/intel/lmbench" target="_blank" rel="noopener">lmbench</a> , 怎么用lmbench <a href="https://plantegg.github.io/2022/01/13/%E4%B8%8D%E5%90%8CCPU%E6%80%A7%E8%83%BD%E5%A4%A7PK/">可以看这篇</a> ; 怎么使用perf <a href="https://plantegg.github.io/2021/05/16/Perf_IPC%E4%BB%A5%E5%8F%8ACPU%E5%88%A9%E7%94%A8%E7%8E%87/">Perf IPC以及CPU性能</a></p><p>，学成后装逼可以看 <a href="https://plantegg.github.io/2022/03/15/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%90%AC%E9%A3%8E%E6%89%87%E5%A3%B0%E9%9F%B3%E6%9D%A5%E5%AE%9A%E4%BD%8D%E6%80%A7%E8%83%BD/">听风扇声音来定位性能瓶颈</a> </p><p>我以前说过每个领域都有一些核心知识点，IPC 就是CPU领域的核心知识点，和tcp的rmem&#x2F;wmem 一样很容易引导你入门</p><p>计算机专业里非要挑几个必学的知识点肯定得有计算机组成原理，但计算机组成原理内容太多，都去看也不现实，况且很多过时的东西，那么我只希望你能记住计算机组成原理里有个最核心的麻烦：内存墙——CPU 访问内存太慢导致了内存墙是我们碰到众多性能问题的最主要、最核心的一个，结合今天这个案例掌握IPC后再来学内存墙，再到理解计算机组成原理就对了，从一个实用的小点入手。</p><p>计算机专业里除掉组成原理(有点高大上，没那么接地气)，另外一个我觉得最有用的是网络——看着low但是接地气，问题多，很实用</p><p>2011年的文章：</p><h4 id="详解服务器内存带宽计算和使用情况测量"><a href="#详解服务器内存带宽计算和使用情况测量" class="headerlink" title="详解服务器内存带宽计算和使用情况测量"></a><strong><a href="http://blog.yufeng.info/archives/1511" target="_blank" rel="noopener">详解服务器内存带宽计算和使用情况测量</a></strong></h4><p>更好的工具来发现类似问题：<a href="https://github.com/intel/numatop" target="_blank" rel="noopener">https://github.com/intel/numatop</a></p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/FlOhgPPnxN3DcMRPUvNvbZOuQy0q.png" alt="img"></p><h2 id="如果你觉得看完对你很有帮助可以通过如下方式找到我"><a href="#如果你觉得看完对你很有帮助可以通过如下方式找到我" class="headerlink" title="如果你觉得看完对你很有帮助可以通过如下方式找到我"></a>如果你觉得看完对你很有帮助可以通过如下方式找到我</h2><p>find me on twitter: <a href="https://twitter.com/plantegg" target="_blank" rel="noopener">@plantegg</a></p><p>知识星球：<a href="https://t.zsxq.com/0cSFEUh2J" target="_blank" rel="noopener">https://t.zsxq.com/0cSFEUh2J</a></p><p>开了一个星球，在里面讲解一些案例、知识、学习方法，肯定没法让大家称为顶尖程序员(我自己都不是)，只是希望用我的方法、知识、经验、案例作为你的垫脚石，帮助你快速、早日成为一个基本合格的程序员。</p><p>争取在星球内：</p><ul><li>养成基本动手能力</li><li>拥有起码的分析推理能力–按我接触的程序员，大多都是没有逻辑的</li><li>知识上教会你几个关键的知识点</li></ul><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20240324161113874.png" alt="image-20240324161113874" style="zoom:50%;">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;流量一样但为什么CPU使用率差别很大&quot;&gt;&lt;a href=&quot;#流量一样但为什么CPU使用率差别很大&quot; class=&quot;headerlink&quot; title=&quot;流量一样但为什么CPU使用率差别很大&quot;&gt;&lt;/a&gt;流量一样但为什么CPU使用率差别很大&lt;/h1&gt;&lt;p&gt;这是我翻到2
      
    
    </summary>
    
      <category term="CPU" scheme="https://plantegg.github.io/categories/CPU/"/>
    
    
      <category term="CPU" scheme="https://plantegg.github.io/tags/CPU/"/>
    
      <category term="performance" scheme="https://plantegg.github.io/tags/performance/"/>
    
      <category term="perf" scheme="https://plantegg.github.io/tags/perf/"/>
    
  </entry>
  
  <entry>
    <title>SocketTimeout 后客户端怎么做和服务端怎么做</title>
    <link href="https://plantegg.github.io/2024/04/10/SocketTimeout%20%E5%90%8E%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%80%8E%E4%B9%88%E5%81%9A%E3%80%81%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%80%8E%E4%B9%88%E5%81%9A/"/>
    <id>https://plantegg.github.io/2024/04/10/SocketTimeout 后客户端怎么做、服务端怎么做/</id>
    <published>2024-04-10T09:30:03.000Z</published>
    <updated>2024-11-20T10:00:53.345Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SocketTimeout-后客户端怎么做和服务端怎么做"><a href="#SocketTimeout-后客户端怎么做和服务端怎么做" class="headerlink" title="SocketTimeout 后客户端怎么做和服务端怎么做"></a>SocketTimeout 后客户端怎么做和服务端怎么做</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>希望通过一个极简，几乎是人人都可以上手验证的实验来触及到一些深度的内容，然后再看看是否会激发你进一步自己设计类似实验和验证过程等</p><p>关于这种简单类型的实验欢迎给我提意见：比如你会不会做；太难、太容易？能学到东西吗？效果如何？我要如何改进</p><h2 id="安装JDK和MySQL"><a href="#安装JDK和MySQL" class="headerlink" title="安装JDK和MySQL"></a>安装JDK和MySQL</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">yum install -y java-1.8.0-openjdk.x86_64 java-1.8.0-openjdk-devel.x86_64  podman-docker.noarch wireshark </span><br><span class="line"></span><br><span class="line">//启动MySQL Server，root密码123</span><br><span class="line">docker run -it -d --net=host -e MYSQL_ROOT_PASSWORD=123 --name=plantegg mysql</span><br><span class="line"></span><br><span class="line">docker run --net=host -v /root/mysql/my3306.cnf:/etc/my.cnf -it -d  -e MYSQL_ROOT_PASSWORD=123 --name=mysql3306 mysql:8.0</span><br><span class="line"></span><br><span class="line">//可能需要的MySQL 账号命令</span><br><span class="line">//8.0密码问题，可以设置配置：</span><br><span class="line">ALTER USER &apos;test&apos;@&apos;localhost&apos; IDENTIFIED WITH mysql_native_password BY &apos;123&apos;;</span><br><span class="line">ALTER USER &apos;root&apos;@&apos;%&apos; IDENTIFIED WITH mysql_native_password BY &apos;123&apos;;</span><br></pre></td></tr></table></figure><p>测试环境机器是<a href="https://www.aliyun.com/daily-act/ecs/activity_selection" target="_blank" rel="noopener">99块一年购买的aliyun ECS</a>，OS版本选ALinux3，对应内核版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5.10.134-15.al8.x86_64</span><br></pre></td></tr></table></figure><p>测试使用的MySQL 版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; \s</span><br><span class="line">--------------</span><br><span class="line">mysql  Ver 8.0.32 for Linux on x86_64 (Source distribution)</span><br><span class="line"></span><br><span class="line">Connection id:9</span><br><span class="line">Current database:test</span><br><span class="line">Current user:root@127.0.0.1</span><br><span class="line">SSL:Not in use</span><br><span class="line">Current pager:stdout</span><br><span class="line">Using outfile:&apos;&apos;</span><br><span class="line">Using delimiter:;</span><br><span class="line">Server version:8.2.0 MySQL Community Server - GPL</span><br><span class="line">Protocol version:10</span><br><span class="line">Connection:127.1 via TCP/IP</span><br><span class="line">Server characterset:utf8mb4</span><br><span class="line">Db     characterset:utf8mb4</span><br><span class="line">Client characterset:utf8mb4</span><br><span class="line">Conn.  characterset:utf8mb4</span><br><span class="line">TCP port:3306</span><br><span class="line">Binary data as:Hexadecimal</span><br><span class="line">Uptime:15 hours 46 min 24 sec</span><br><span class="line"></span><br><span class="line">Threads: 2  Questions: 34  Slow queries: 0  Opens: 176  Flush tables: 3  Open tables: 95  Queries per second avg: 0.000</span><br></pre></td></tr></table></figure><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">测试代码(复制粘贴就可以编译运行了，运行时需要下载jdbc mysql driver，链接见附录)：</span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.DriverManager;</span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.sql.Statement;</span><br><span class="line">import java.sql.PreparedStatement;</span><br><span class="line">public class Test &#123; //不要琢磨代码规范、为什么要这么写，就是为了方便改吧改吧做很多不同的验证试验</span><br><span class="line">    public static void main(String args[]) throws NumberFormatException, InterruptedException, ClassNotFoundException &#123;</span><br><span class="line">        Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">        String url = args[0];</span><br><span class="line">        String user = args[1];</span><br><span class="line">        String pass = args[2];</span><br><span class="line">        String sql = args[3];</span><br><span class="line">        String interval = args[4];</span><br><span class="line">        try &#123;</span><br><span class="line">            Connection conn = DriverManager.getConnection(url, user, pass);</span><br><span class="line">            while (true) &#123;</span><br><span class="line">                PreparedStatement stmt = conn.prepareStatement(sql);</span><br><span class="line">                //stmt.setFetchSize(Integer.MIN_VALUE); //这句是表示开流式读取，但是每条SQL 都会先发set net_write_timeout=600 给Server</span><br><span class="line">                stmt.setString(1, interval);</span><br><span class="line">                ResultSet rs = stmt.executeQuery();</span><br><span class="line">                rs.close();</span><br><span class="line">                stmt.close();</span><br><span class="line"></span><br><span class="line">                PreparedStatement stmt2 = conn.prepareStatement(sql);</span><br><span class="line">                stmt2.setString(1, interval);</span><br><span class="line">                rs = stmt2.executeQuery();</span><br><span class="line">while (rs.next()) &#123;</span><br><span class="line">    System.out.println(&quot;fine&quot;);</span><br><span class="line">&#125;</span><br><span class="line">                rs.close();</span><br><span class="line">                stmt2.close();</span><br><span class="line"></span><br><span class="line">                Thread.sleep(Long.valueOf(interval));</span><br><span class="line">break;</span><br><span class="line">            &#125;</span><br><span class="line">conn.close();</span><br><span class="line">        &#125; catch (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#javac Test.java //编译，需要提前安装JDK</span><br><span class="line">//执行，需要下载jdbc jar驱动，见附录，还需要有一个数据库，随便建个表，或者查里面自带的库都可以</span><br><span class="line">#java -cp .:./mysql-connector-java-5.1.45.jar Test &quot;jdbc:mysql://127.0.0.1:3306/test?useSSL=false&amp;useServerPrepStmts=true&amp;cachePrepStmts=true&amp;connectTimeout=500&amp;socketTimeout=1700&quot; root 123 &quot;select sleep(10), id from sbtest1 where id= ?&quot; 100 //设置了1.7秒超时查询还不返回的话业务代码报错，堆栈如下：</span><br><span class="line">com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure //连接异常</span><br><span class="line"></span><br><span class="line">The last packet successfully received from the server was 1,701(1700ms) milliseconds ago.  The last packet sent successfully to the server was 1,701 milliseconds ago.</span><br><span class="line">at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br><span class="line">at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)</span><br><span class="line">at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)</span><br><span class="line">at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:500)</span><br><span class="line">at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:481)</span><br><span class="line">at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)</span><br><span class="line">at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:990)</span><br><span class="line">at com.mysql.jdbc.MysqlIO.reuseAndReadPacket(MysqlIO.java:3559)</span><br><span class="line">at com.mysql.jdbc.MysqlIO.reuseAndReadPacket(MysqlIO.java:3459)</span><br><span class="line">at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3900)</span><br><span class="line">at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2527)</span><br><span class="line">at com.mysql.jdbc.ServerPreparedStatement.serverExecute(ServerPreparedStatement.java:1283)</span><br><span class="line">at com.mysql.jdbc.ServerPreparedStatement.executeInternal(ServerPreparedStatement.java:783)</span><br><span class="line">at com.mysql.jdbc.PreparedStatement.executeQuery(PreparedStatement.java:1966)</span><br><span class="line">at Test.main(Test.java:30)</span><br><span class="line">Caused by: java.net.SocketTimeoutException: Read timed out // SocketTimeoutException 异常</span><br><span class="line">at java.base/sun.nio.ch.NioSocketImpl.timedRead(NioSocketImpl.java:284)</span><br><span class="line">at java.base/sun.nio.ch.NioSocketImpl.implRead(NioSocketImpl.java:310)</span><br><span class="line">at java.base/sun.nio.ch.NioSocketImpl.read(NioSocketImpl.java:351)</span><br><span class="line">at java.base/sun.nio.ch.NioSocketImpl$1.read(NioSocketImpl.java:802)</span><br><span class="line">at java.base/java.net.Socket$SocketInputStream.read(Socket.java:919)</span><br><span class="line">at com.mysql.jdbc.util.ReadAheadInputStream.fill(ReadAheadInputStream.java:101)</span><br><span class="line">at com.mysql.jdbc.util.ReadAheadInputStream.readFromUnderlyingStreamIfNecessary(ReadAheadInputStream.java:144)</span><br><span class="line">at com.mysql.jdbc.util.ReadAheadInputStream.read(ReadAheadInputStream.java:174)</span><br><span class="line">at com.mysql.jdbc.MysqlIO.readFully(MysqlIO.java:3008)</span><br><span class="line">at com.mysql.jdbc.MysqlIO.reuseAndReadPacket(MysqlIO.java:3469)</span><br><span class="line">... 7 more</span><br></pre></td></tr></table></figure><h2 id="服务端对应的抓包"><a href="#服务端对应的抓包" class="headerlink" title="服务端对应的抓包"></a>服务端对应的抓包</h2><p>如果OS 比较老，安装的tshark 也较老，那么命令参数略微不一样，主要是 col.Info 这个列，没有 _ws 前缀：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#tshark -i eth0 port 3306  -T fields -e frame.number -e frame.time_delta -e tcp.srcport -e tcp.dstport -e col.Info -e mysql.query</span><br></pre></td></tr></table></figure><p>如果是阿里云 99 买了ECS，安装的内核版本较高比如4.19，那么配套安装的tshark也较高，就用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">#tshark -i eth0 -Y &quot;tcp.port==3306&quot; -T fields -e frame.number -e frame.time -e frame.time_delta -e tcp.srcport -e tcp.dstport -e tcp.len -e _ws.col.Info -e mysql.query</span><br><span class="line"> //第二列是时间间隔</span><br><span class="line">10.000000000302603306kingdomsonline &gt; mysql [SYN] Seq=0 Win=42340 Len=0 MSS=1460 SACK_PERM=1 WS=512</span><br><span class="line">20.000024473330630260mysql &gt; kingdomsonline [SYN, ACK] Seq=0 Ack=1 Win=29200 Len=0 MSS=1460 SACK_PERM=1 WS=128</span><br><span class="line">30.000271938302603306kingdomsonline &gt; mysql [ACK] Seq=1 Ack=1 Win=42496 Len=0 //3次握手</span><br><span class="line">40.000660359330630260Server Greeting proto=10 version=8.2.0 //MySQL server主动发送版本、问候信息等</span><br><span class="line">50.000263009302603306kingdomsonline &gt; mysql [ACK] Seq=1 Ack=78 Win=42496 Len=0</span><br><span class="line">60.039698745302603306Login Request user=test db=test //客户端验证账号密码</span><br><span class="line">70.000009044330630260mysql &gt; kingdomsonline [ACK] Seq=78 Ack=243 Win=30336 Len=0</span><br><span class="line">80.000171281330630260Response</span><br><span class="line">90.000260062302603306kingdomsonline &gt; mysql [ACK] Seq=243 Ack=126 Win=42496 Len=0</span><br><span class="line">100.000298127302603306Request Unknown (168)</span><br><span class="line">110.000142114330630260Response OK </span><br><span class="line">120.000255322302603306kingdomsonline &gt; mysql [ACK] Seq=267 Ack=137 Win=42496 Len=0</span><br><span class="line">130.003596187302603306Request Query/* mysql-connector-java-5.1.45 ( Revision: 9131eefa398531c7dc98776e8a3fe839e544c5b2 ) */SELECT  @@session.auto_increment_increment AS auto_increment_increment, @@character_set_client AS character_set_client, @@character_set_connection AS character_set_connection, @@character_set_results AS character_set_results, @@character_set_server AS character_set_server, @@collation_server AS collation_server, @@init_connect AS init_connect, @@interactive_timeout AS interactive_timeout, @@license AS license, @@lower_case_table_names AS lower_case_table_names, @@max_allowed_packet AS max_allowed_packet, @@net_buffer_length AS net_buffer_length, @@net_write_timeout AS net_write_timeout, @@have_query_cache AS have_query_cache, @@sql_mode AS sql_mode, @@system_time_zone AS system_time_zone, @@time_zone AS time_zone, @@transaction_isolation AS transaction_isolation, @@wait_timeout AS wait_timeout</span><br><span class="line">140.000328419330630260Response</span><br><span class="line">150.000266581302603306kingdomsonline &gt; mysql [ACK] Seq=1164 Ack=1208 Win=42496 Len=0</span><br><span class="line">160.022407439302603306Request QuerySHOW WARNINGS</span><br><span class="line">170.000058143330630260Response</span><br><span class="line">180.000267585302603306kingdomsonline &gt; mysql [ACK] Seq=1182 Ack=1411 Win=42496 Len=0</span><br><span class="line">190.001776177302603306Request QuerySET NAMES utf8mb4 //客户端设置charset</span><br><span class="line">200.000052102330630260Response OK</span><br><span class="line">210.000263257302603306kingdomsonline &gt; mysql [ACK] Seq=1204 Ack=1422 Win=42496 Len=0</span><br><span class="line">220.000175172302603306Request QuerySET character_set_results = NULL</span><br><span class="line">230.000046756330630260Response OK</span><br><span class="line">240.000258191302603306kingdomsonline &gt; mysql [ACK] Seq=1241 Ack=1433 Win=42496 Len=0</span><br><span class="line">250.000185322302603306Request QuerySET autocommit=1</span><br><span class="line">260.000037833330630260Response OK</span><br><span class="line">270.000255747302603306kingdomsonline &gt; mysql [ACK] Seq=1262 Ack=1444 Win=42496 Len=0</span><br><span class="line">280.011132112302603306Request Prepare Statementselect sleep(10), id from sbtest1 where id= ?  //进一步学习</span><br><span class="line">290.000171861330630260Response //作业：Prepared Statement 放回了啥？</span><br><span class="line">300.000290736302603306kingdomsonline &gt; mysql [ACK] Seq=1312 Ack=1570 Win=42496 Len=0</span><br><span class="line">310.000613187302603306Request Execute Statement                                           //客户端发送SQL请求</span><br><span class="line">320.039923585330630260mysql &gt; kingdomsonline [ACK] Seq=1570 Ack=1334 Win=32128 Len=0</span><br><span class="line">331.675682641302603306kingdomsonline &gt; mysql [FIN, ACK] Seq=1334 Ack=1570 Win=42496 Len=0 //1.7秒后客户端发fin主动断开</span><br><span class="line">340.039320026330630260mysql &gt; kingdomsonline [ACK] Seq=1570 Ack=1335 Win=32128 Len=0</span><br><span class="line"></span><br><span class="line">//MySQL 还完全不知道客户端fin了，继续发送响应结果。tcp断开在OS 层面处理，业务再使用这个已断开的连接时OS 会返回错误</span><br><span class="line">353.245406398330630260Response</span><br><span class="line">360.000041708330630260Server Greeting Error 1158 //MySQL 感知到OS返回的错误，发送错误码(已经没有用了)，不过客户端已经断开收不到了</span><br><span class="line">370.000053987330630260mysql &gt; kingdomsonline [FIN, ACK] Seq=1742 Ack=1335 Win=32128 Len=0</span><br><span class="line">380.000165707302603306kingdomsonline &gt; mysql [RST] Seq=1335 Win=0 Len=0 //连接都断开了，客户端已经退出，客户端的OS代发reset </span><br><span class="line">390.000017860302603306kingdomsonline &gt; mysql [RST] Seq=1335 Win=0 Len=0</span><br><span class="line">400.000082025302603306kingdomsonline &gt; mysql [RST] Seq=1335 Win=0 Len=0</span><br></pre></td></tr></table></figure><p>如果你的 tshark 版本较高，以上命令行可以改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tshark -i lo -Y &quot;tcp.port==3306&quot; -T fields -e frame.number -e frame.time_delta -e tcp.srcport -e tcp.dstport -e _ws.col.Info -e mysql.query</span><br></pre></td></tr></table></figure><p>GPT4.0 Turbo 对上面这个 tshark 命令的解释：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">你提到的命令使用tshark捕获在端口3306（MySQL的默认端口）上的网络流量，并提取特定的字段进行显示。tshark是Wireshark的命令行版本，一个非常强大的网络协议分析工具。</span><br><span class="line"></span><br><span class="line">这条命令的组成部分解释如下：</span><br><span class="line"></span><br><span class="line">-i eth0: 指定tshark监听eth0接口上的流量。这是网络接口的名称，可以根据实际情况进行修改。</span><br><span class="line"></span><br><span class="line">port 3306: 指定tshark只捕获目标或源端口为3306的TCP流量，这是MySQL服务器监听的标准端口。</span><br><span class="line"></span><br><span class="line">-T fields: 设置tshark的输出格式为字段值（fields），意味着输出将以列的形式显示指定的字段。</span><br><span class="line"></span><br><span class="line">-e frame.number: 添加一个字段，显示每个捕获的帧的编号。</span><br><span class="line"></span><br><span class="line">-e frame.time_delta: 添加一个字段，显示自上一帧以来经过的时间（以秒为单位）。</span><br><span class="line"></span><br><span class="line">-e tcp.srcport: 添加一个字段，显示TCP源端口号。</span><br><span class="line"></span><br><span class="line">-e tcp.dstport: 添加一个字段，显示TCP目标端口号。</span><br><span class="line"></span><br><span class="line">-e col.Info: 添加一个字段，显示捕获帧的信息列。</span><br><span class="line"></span><br><span class="line">-e mysql.query: 添加一个字段，如果捕获的TCP流量是MySQL流量，显示MySQL查询。</span><br><span class="line"></span><br><span class="line">这个命令的输出将是以空格分隔的列，每一列代表上述参数指定的一个字段。每一行代表一个捕获的网络帧，其中包含MySQL查询。</span><br><span class="line"></span><br><span class="line">请注意，由于这个命令包含了mysql.query，它需要tshark能够解析MySQL协议。而且，如果MySQL流量是加密的（例如使用SSL/TLS），那么tshark将无法直接显示查询内容。</span><br><span class="line"></span><br><span class="line">在运行这个命令前，你需要有足够的权限来捕获网络流量，通常需要root权限或者足够的权限来访问网络接口。如果你不是root用户，可以使用sudo运行tshark命令。</span><br><span class="line"></span><br><span class="line">sudo tshark -i eth0 port 3306 -T fields -e frame.number -e frame.time_delta -e tcp.srcport -e tcp.dstport -e col.Info -e mysql.query</span><br><span class="line">这个命令将实时显示MySQL查询相关的流量信息。如果你想要保存结果到一个文件，可以使用重定向或-w选项。如果只想要捕获一定数量的包，可以使用-c选项后跟要捕获的包的数量。</span><br></pre></td></tr></table></figure><p>最后用一张大截图来演示这个实验：</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20240111121421625.png" alt="image-20240111121421625"></p><h2 id="PreparedStatement-验证"><a href="#PreparedStatement-验证" class="headerlink" title="PreparedStatement 验证"></a>PreparedStatement 验证</h2><p>测试代码，用Prepared执行三次查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">                PreparedStatement stmt = conn.prepareStatement(sql);</span><br><span class="line"><span class="comment">//                stmt.setFetchSize(Integer.MIN_VALUE);</span></span><br><span class="line">                stmt.setString(<span class="number">1</span>, interval);</span><br><span class="line">                ResultSet rs = stmt.executeQuery();</span><br><span class="line">                rs.close();</span><br><span class="line">                stmt.close();</span><br><span class="line"></span><br><span class="line">                PreparedStatement stmt2 = conn.prepareStatement(sql);</span><br><span class="line">                stmt2.setString(<span class="number">1</span>, interval);</span><br><span class="line">                rs = stmt2.executeQuery();</span><br><span class="line">                <span class="comment">//Thread.sleep(60000);</span></span><br><span class="line">                <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                        System.out.println(<span class="string">"fine"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                rs = stmt2.executeQuery();</span><br><span class="line">                <span class="comment">//Thread.sleep(60000);</span></span><br><span class="line">                <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                        System.out.println(<span class="string">"fine"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                rs.close();</span><br><span class="line">                stmt2.close();</span><br></pre></td></tr></table></figure><p>如图绿色是Prepared过程不会真执行 Select 查数据，只是把这条SQL 发给Server，让Server 提前编译，可以看出来编译时间0.000146秒(绿色方框)，因为SQL 非常简单；三个红色线分别是3次真正的查询，都走了Prepared(不再传 Select了)，不过时间很不稳定，所以这个统计必须大批量。红色方框是三次通过Prepared 执行 Select 查数据的执行时间：</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20240322103643718.png" alt="image-20240322103643718"></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>作为一个CRUD boy从以上实验中你可以学到哪些东西？</p><ul><li>客户端报错堆栈要熟悉，Communications link failure (很多原因可以导致这个错误哈)和 java.net.SocketTimeoutException: Read timed out</li><li>JDBC 连接参数要配置socketTimeout，不配置会导致很多很多故障，显得CRUD boy太业余</li><li>抓包，从抓包中学到每个动作，反过来分析原因，比如这次报错就是客户端发送了查询过1.7秒主动断开，所以问题在客户端，1.7秒也要敏感</li><li>最重要的是学到这个实验过程，比如再自己去试试分析 PreparedStatement 的工作原理，如何才能让 PreparedStatement 生效</li></ul><h2 id="进一步学习"><a href="#进一步学习" class="headerlink" title="进一步学习"></a>进一步学习</h2><p>你可以把抓包保存，然后下载到wireshark中，能看到具体每一个包的详细内容，比如加密后的密码、Prepared statement是个啥(一个唯一id)</p><p>比如明明MySQL Server感知到了连接断开错误(Message: Got an error reading communication packets) 还要挣扎着返回这个错误信息给客户端有必要吗？</p><p>java 跑着，直接kill -9 java-pid 看看服务端收到什么包？(有经验后下次看到这样的症状就知道为啥了)</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://fromdual.com/mysql-error-codes-and-messages-1150-1199#error_er_net_read_error" target="_blank" rel="noopener">MySQL 1158错误信息的详细意思</a></p><p><a href="http://www.java2s.com/example/jar/m/download-mysqlconnectorjava5145jar-file.html" target="_blank" rel="noopener">mysql jdbc driver</a></p><h1 id="后续-Debug"><a href="#后续-Debug" class="headerlink" title="后续 Debug"></a>后续 Debug</h1><h2 id="为啥我的Java-代码跑半天也不报错："><a href="#为啥我的Java-代码跑半天也不报错：" class="headerlink" title="为啥我的Java 代码跑半天也不报错："></a>为啥我的Java 代码跑半天也不报错：</h2><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20240115090336526.png" alt="image-20240115090336526"></p><p>jstack -p java-pid ，可以看到main 卡在执行SQL 后等结果的堆栈里，所以不是Java sleep了，等看对端MySQL 在干什么</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&quot;Reference Handler&quot; #2 daemon prio=10 os_prio=0 tid=0x00007f6a5c0db000 nid=0x109d8e in Object.wait() [0x00007f6a60a75000]</span><br><span class="line">   java.lang.Thread.State: WAITING (on object monitor)</span><br><span class="line">        at java.lang.Object.wait(Native Method)</span><br><span class="line">        - waiting on &lt;0x00000000f6b08d90&gt; (a java.lang.ref.Reference$Lock)</span><br><span class="line">        at java.lang.Object.wait(Object.java:502)</span><br><span class="line">        at java.lang.ref.Reference.tryHandlePending(Reference.java:191)</span><br><span class="line">        - locked &lt;0x00000000f6b08d90&gt; (a java.lang.ref.Reference$Lock)</span><br><span class="line">        at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:153)</span><br><span class="line"></span><br><span class="line">&quot;main&quot; #1 prio=5 os_prio=0 tid=0x00007f6a5c04b000 nid=0x109d8a runnable [0x00007f6a638e9000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line">        at java.net.SocketInputStream.socketRead0(Native Method)</span><br><span class="line">        at java.net.SocketInputStream.socketRead(SocketInputStream.java:116)</span><br><span class="line">        at java.net.SocketInputStream.read(SocketInputStream.java:171)</span><br><span class="line">        at java.net.SocketInputStream.read(SocketInputStream.java:141)</span><br><span class="line">        at com.mysql.jdbc.util.ReadAheadInputStream.fill(ReadAheadInputStream.java:101)</span><br><span class="line">        at com.mysql.jdbc.util.ReadAheadInputStream.readFromUnderlyingStreamIfNecessary(ReadAheadInputStream.java:144)</span><br><span class="line">        at com.mysql.jdbc.util.ReadAheadInputStream.read(ReadAheadInputStream.java:174)</span><br><span class="line">        - locked &lt;0x00000000f6b71370&gt; (a com.mysql.jdbc.util.ReadAheadInputStream)</span><br><span class="line">        at com.mysql.jdbc.MysqlIO.readFully(MysqlIO.java:3008)</span><br><span class="line">        at com.mysql.jdbc.MysqlIO.reuseAndReadPacket(MysqlIO.java:3469)</span><br><span class="line">        at com.mysql.jdbc.MysqlIO.reuseAndReadPacket(MysqlIO.java:3459)</span><br><span class="line">        at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3900)</span><br><span class="line">        at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2527)</span><br><span class="line">        at com.mysql.jdbc.ServerPreparedStatement.serverExecute(ServerPreparedStatement.java:1283)</span><br><span class="line">        - locked &lt;0x00000000f6b0a228&gt; (a com.mysql.jdbc.JDBC4Connection)</span><br><span class="line">        at com.mysql.jdbc.ServerPreparedStatement.executeInternal(ServerPreparedStatement.java:783)</span><br><span class="line">        - locked &lt;0x00000000f6b0a228&gt; (a com.mysql.jdbc.JDBC4Connection)</span><br><span class="line">        at com.mysql.jdbc.PreparedStatement.executeQuery(PreparedStatement.java:1966)</span><br><span class="line">        - locked &lt;0x00000000f6b0a228&gt; (a com.mysql.jdbc.JDBC4Connection)</span><br><span class="line">        at Test.main(Test.java:30)</span><br><span class="line"></span><br><span class="line">&quot;VM Thread&quot; os_prio=0 tid=0x00007f6a5c0d1000 nid=0x109d8d runnable</span><br><span class="line"></span><br><span class="line">&quot;GC task thread#0 (ParallelGC)&quot; os_prio=0 tid=0x00007f6a5c05e000 nid=0x109d8b runnable</span><br><span class="line"></span><br><span class="line">&quot;GC task thread#1 (ParallelGC)&quot; os_prio=0 tid=0x00007f6a5c060000 nid=0x109d8c runnable</span><br></pre></td></tr></table></figure><h2 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h2><p>为啥抓不到任何包？</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20240115090420370.png" alt="image-20240115090420370"></p><p>先确认3306 端口是你的MySQL 在跑：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># ss -lntp |grep 3306</span><br><span class="line">LISTEN 0      151                *:3306             *:*    users:((&quot;mysqld&quot;,pid=1023638,fd=22))</span><br><span class="line">LISTEN 0      70                 *:33060            *:*    users:((&quot;mysqld&quot;,pid=1023638,fd=20))</span><br></pre></td></tr></table></figure><p><em>:3306 中的‘“</em>” 表示MySQLD 监听本机任何网卡的3306端口，查看一下网卡名字：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># ip a</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000</span><br><span class="line">    link/ether 00:16:3e:39:b5:e0 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    altname enp0s5</span><br><span class="line">    altname ens5</span><br><span class="line">    inet 172.17.151.5/20 brd 172.17.159.255 scope global dynamic noprefixroute eth0</span><br><span class="line">       valid_lft 309352989sec preferred_lft 309352989sec</span><br><span class="line">    inet6 fe80::216:3eff:fe39:b5e0/64 scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3: cni-podman0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000</span><br><span class="line">    link/ether de:a8:06:82:76:00 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.88.0.1/16 brd 10.88.255.255 scope global cni-podman0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::dca8:6ff:fe82:7600/64 scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">4: veth82cad224@if2: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master cni-podman0 state UP group default</span><br><span class="line">    link/ether 4e:1b:4a:0d:a9:e2 brd ff:ff:ff:ff:ff:ff link-netns netns-58786150-bf63-2ae1-242f-cf221eed34fe</span><br><span class="line">    inet6 fe80::4c1b:4aff:fe0d:a9e2/64 scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p>尝试 tshark -i any – any是个什么鬼，展开学习下抓包参数</p><p>这里对select sleep 不确定的话可以Google sleep的单位、用法；也可以MySQL Client 验证一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># mysql -h127.1  -uroot -p123</span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; select sleep(1.4);</span><br><span class="line">+------------+</span><br><span class="line">| sleep(1.4) |</span><br><span class="line">+------------+</span><br><span class="line">|          0 |</span><br><span class="line">+------------+</span><br><span class="line">1 row in set (1.40 sec)</span><br><span class="line"></span><br><span class="line">为什么不用mysql client做这个SocketTimeout的实验：mysql似乎没有SocketTimeout这个参数：</span><br><span class="line">mysql --help |grep -i time</span><br><span class="line">                      and reconnecting may take a longer time. Disable with</span><br><span class="line">  --connect-timeout=# Number of seconds before connection timeout.</span><br><span class="line">connect-timeout                           0</span><br></pre></td></tr></table></figure><h2 id="终于能抓到包了"><a href="#终于能抓到包了" class="headerlink" title="终于能抓到包了"></a>终于能抓到包了</h2><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20240115090938622.png" alt="image-20240115090938622"></p><h2 id="Kill-Java"><a href="#Kill-Java" class="headerlink" title="Kill Java"></a>Kill Java</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">560.014671013401023306Request Prepare Statementselect sleep(60), id from sbtest1 where id= ?</span><br><span class="line">570.000253230330640102Response</span><br><span class="line">580.00017311040102330640102 → 3306 [ACK] Seq=1312 Ack=1570 Win=65536 Len=0 TSval=478689604 TSecr=478689604</span><br><span class="line">590.000602784401023306Request Execute Statement</span><br><span class="line">600.0409031273306401023306 → 40102 [ACK] Seq=1570 Ack=1334 Win=65536 Len=0 TSval=478689645 TSecr=478689604</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">770.39702382040102330640102 → 3306 [FIN, ACK] Seq=1334 Ack=1570 Win=65536 Len=0 TSval=478705206 TSecr=478689645</span><br><span class="line">780.0404249263306401023306 → 40102 [ACK] Seq=1570 Ack=1335 Win=65536 Len=0 TSval=478705246 TSecr=478705206</span><br><span class="line">830.793390527330640102Response</span><br><span class="line">840.00001652240102330640102 → 3306 [RST] Seq=1335 Win=0 Len=0</span><br></pre></td></tr></table></figure><h2 id="mysql-kill-pid"><a href="#mysql-kill-pid" class="headerlink" title="mysql kill pid"></a>mysql kill pid</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># tshark -i lo -Y &quot;tcp.port==59636&quot; -T fields -e frame.number -e frame.time_delta -e tcp.srcport -e tcp.dstport -e _ws.col.Info -e mysql.query</span><br><span class="line">Running as user &quot;root&quot; and group &quot;root&quot;. This could be dangerous.</span><br><span class="line">Capturing on &apos;Loopback&apos;</span><br><span class="line">//</span><br><span class="line">850.0000422613306596363306 → 59636 [FIN, ACK] Seq=1 Ack=1 Win=512 Len=0 TSval=478849322 TSecr=478831136</span><br><span class="line">920.00810647059636330659636 → 3306 [FIN, ACK] Seq=1 Ack=2 Win=512 Len=0 TSval=478849333 TSecr=478849322</span><br><span class="line">930.0000086123306596363306 → 59636 [ACK] Seq=2 Ack=2 Win=512 Len=0 TSval=478849333 TSecr=478849333</span><br></pre></td></tr></table></figure><h2 id="kill-mysqld-pid"><a href="#kill-mysqld-pid" class="headerlink" title="kill mysqld pid"></a>kill mysqld pid</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">]# tcpdump -i lo port 50436</span><br><span class="line">dropped privs to tcpdump</span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv for full protocol decode</span><br><span class="line">listening on lo, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">09:32:50.138291 IP localhost.mysql &gt; localhost.50436: Flags [F.], seq 206507581, ack 2788331892, win 512, options [nop,nop,TS val 479088777 ecr 479041791], length 0</span><br><span class="line">09:32:50.150621 IP localhost.50436 &gt; localhost.mysql: Flags [F.], seq 1, ack 1, win 512, options [nop,nop,TS val 479088789 ecr 479088777], length 0</span><br><span class="line">09:32:50.150640 IP localhost.mysql &gt; localhost.50436: Flags [.], ack 2, win 512, options [nop,nop,TS val 479088789 ecr 479088789], length 0</span><br></pre></td></tr></table></figure><h2 id="视频学习"><a href="#视频学习" class="headerlink" title="视频学习"></a>视频学习</h2><p>如果你也想试试这个实验的话，可以参考我们的视频：<a href="https://meeting.tencent.com/user-center/shared-record-info?id=c0962ad4-16bc-4ac8-83ab-2e302c372e73&is-single=false&record_type=2&from=3" target="_blank" rel="noopener">https://meeting.tencent.com/user-center/shared-record-info?id=c0962ad4-16bc-4ac8-83ab-2e302c372e73&amp;is-single=false&amp;record_type=2&amp;from=3</a></p><h2 id="如果你觉得看完对你很有帮助可以通过如下方式找到我"><a href="#如果你觉得看完对你很有帮助可以通过如下方式找到我" class="headerlink" title="如果你觉得看完对你很有帮助可以通过如下方式找到我"></a>如果你觉得看完对你很有帮助可以通过如下方式找到我</h2><p>find me on twitter: <a href="https://twitter.com/plantegg" target="_blank" rel="noopener">@plantegg</a></p><p>知识星球：<a href="https://t.zsxq.com/0cSFEUh2J" target="_blank" rel="noopener">https://t.zsxq.com/0cSFEUh2J</a></p><p>开了一个星球，在里面讲解一些案例、知识、学习方法，肯定没法让大家称为顶尖程序员(我自己都不是)，只是希望用我的方法、知识、经验、案例作为你的垫脚石，帮助你快速、早日成为一个基本合格的程序员。</p><p>争取在星球内：</p><ul><li>养成基本动手能力</li><li>拥有起码的分析推理能力–按我接触的程序员，大多都是没有逻辑的</li><li>知识上教会你几个关键的知识点</li></ul><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20240324161113874.png" alt="image-20240324161113874" style="zoom:50%;">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SocketTimeout-后客户端怎么做和服务端怎么做&quot;&gt;&lt;a href=&quot;#SocketTimeout-后客户端怎么做和服务端怎么做&quot; class=&quot;headerlink&quot; title=&quot;SocketTimeout 后客户端怎么做和服务端怎么做&quot;&gt;&lt;/a&gt;So
      
    
    </summary>
    
      <category term="MySQL" scheme="https://plantegg.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://plantegg.github.io/tags/MySQL/"/>
    
      <category term="SocketTimeout" scheme="https://plantegg.github.io/tags/SocketTimeout/"/>
    
      <category term="tcpdump" scheme="https://plantegg.github.io/tags/tcpdump/"/>
    
  </entry>
  
  <entry>
    <title>无招胜有招--一周年总结</title>
    <link href="https://plantegg.github.io/2024/03/25/%E6%97%A0%E6%8B%9B%E8%83%9C%E6%9C%89%E6%8B%9B/"/>
    <id>https://plantegg.github.io/2024/03/25/无招胜有招/</id>
    <published>2024-03-25T09:30:03.000Z</published>
    <updated>2024-11-20T10:00:55.387Z</updated>
    
    <content type="html"><![CDATA[<h1 id="无招胜有招–一周年总结"><a href="#无招胜有招–一周年总结" class="headerlink" title="无招胜有招–一周年总结"></a>无招胜有招–一周年总结</h1><p>大家抱着美好和雄赳赳的目标来到<a href="https://wx.zsxq.com/dweb2/index/group/15552551584552" target="_blank" rel="noopener">这个知识星球</a>，开始的时候兴奋地以为找到了银弹(其实银弹是有的，在文章最后)，经过一段时间后大概率发现没什么变化，然后就回到了以前的老路子上，我觉得关键问题是你没获取到星球的精华，所以这篇我打算反复再唠叨一下</p><h2 id="知识效率-工程效率"><a href="#知识效率-工程效率" class="headerlink" title="知识效率 工程效率"></a><strong><a href="https://t.zsxq.com/14IBWajEq" target="_blank" rel="noopener">知识效率 工程效率</a></strong></h2><p>虽然我们现在通过这篇《<a href="https://t.zsxq.com/14IBWajEq" target="_blank" rel="noopener">知识效率 工程效率</a>》知道了两者的差别， 但是还是需要记住通过积累可以将我们的学习能力从工程效率升级到知识效率(厚积薄发)，大部分时候没有做到薄发，是因为你以为理解了、积累了实际没理解</p><h2 id="核心知识点"><a href="#核心知识点" class="headerlink" title="核心知识点"></a><strong>核心知识点</strong></h2><p>尽力寻找每个领域的核心知识点，核心知识点的定义就是通过一两个这样的知识点能撬动对整个领域的理解，也就是常说的<a href="http://www.baidu.com/link?url=9Hv8LOY09wOqjLFX-UuX35AxJjTDjmkHcSPm3ReeTWO-4rH-46hmz6aR4b-WP7PwZHUGkxEBhWt1iqHkM8uM56Au6Ada4lg6angCByW3J-BLDkxE45Aq-QqOTWzRspa4" target="_blank" rel="noopener">纲挈目张</a></p><p>比如网络领域里：一个网络包是怎么流转的+抓包。假如你理解<a href="https://plantegg.github.io/2019/05/15/%E5%B0%B1%E6%98%AF%E8%A6%81%E4%BD%A0%E6%87%82%E7%BD%91%E7%BB%9C--%E4%B8%80%E4%B8%AA%E7%BD%91%E7%BB%9C%E5%8C%85%E7%9A%84%E6%97%85%E7%A8%8B/">网络包的流转后</a>再去看<a href="https://plantegg.github.io/2019/06/20/%E5%B0%B1%E6%98%AF%E8%A6%81%E4%BD%A0%E6%87%82%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1--lvs%E5%92%8C%E8%BD%AC%E5%8F%91%E6%A8%A1%E5%BC%8F/">LVS 负载均衡的原理</a>你就发现只需要看一次你就能很好掌握LVS各个负载均衡的本质，而在这之前你反复看反复忘。掌握了这个知识点基本就可以通关整个领域，剩下的只是无招胜有招碰到一个挨个积累的问题了。</p><p>比如CPU领域理解超线程+IPC+会用perf和内存延时，理解超线程的本质是为什么一个核能干两个核的工作(这和操作系统的分时多任务背后原理是想通的)，那是因为我们的程序没法吃满流水线(也就是没法用完一个核的计算能力，用IPC去衡量)，没吃满闲置的时候就可以虚拟给另外一个进程用，比如CPU 跑起来最高IPC都能到4，但是无论你找一个Java还是MySQL 去看他们的IPC基本都在1以内，纯计算场景的IPC会高一点，IPC 可以到4但只跑到1的话也就是只用满了25%的能力，那当然可以再虚出来一个超线程提高效率。IPC 之所以低就是因为内存延时大，这么多年CPU的处理能力一直按摩尔定律在提升但是内存延时没有怎么提升，导致基本上我们常见的业务场景(Nginx&#x2F;MySQL&#x2F;Redis 等)都是CPU在等从内存取数据(所以搞了L1、L2、L3一堆cache)。</p><p>发散一下或者说<strong>留个作业</strong>你去看看<a href="https://plantegg.github.io/2021/05/14/%E5%8D%81%E5%B9%B4%E5%90%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%98%E6%98%AF%E4%B8%8D%E6%95%A2%E6%8B%A5%E6%8A%B1NUMA/">NUMA 的原理或者说本质就是为了让CPU知道就近分配读取内存以提升效率</a>。</p><p>你看<strong>整本计算机组成原理+性能的本质都在这一个知识点的范围内进行延伸和突破</strong>。</p><p>如果你发现一个核心知识点也欢迎写成博客文章分享出来</p><h2 id="读日志、错误信息"><a href="#读日志、错误信息" class="headerlink" title="读日志、错误信息"></a><strong>读日志、错误信息</strong></h2><p>我的经验只是大概20%左右的程序员会去耐心读别人的日志、报错信息，大部分摊摊手求助、放弃了</p><p>日志是最好的学习机会，我知道别人的日志写得很烂，但是你要能耐心多琢磨一点就会比别人更专业一点</p><h2 id="对知识的可观测性"><a href="#对知识的可观测性" class="headerlink" title="对知识的可观测性"></a><strong>对知识的可观测性</strong></h2><p>抓包、perf的使用这些平时要多积累，这点没有捷径，一个好的工程师肯定有<a href="https://plantegg.github.io/2016/10/12/ss%E7%94%A8%E6%B3%95%E5%A4%A7%E5%85%A8/">一堆好的锤子、瑞士军刀、工具包</a>的。在你掌握了知识点后要转化为工作效率，就得多积累这些工具，很多次我们碰到一个好的问题没分析出来是因为我们这种没有门槛的积累不够导致放弃了</p><p>比如需要抓包确认下，不会，一看tcpdump 一堆参数头疼放弃；比如想要知道长连接还是短连接，或者自己设置的长连接有没有生效，不会用netstat -o 这个参数去确认等；比如要下载个源码自己make&#x2F;install 中间报了几个错误不仔细看放弃；</p><p>反过来回到我们所说的工程效率，就是靠这些工具帮你实现可视、可以触摸，网络之所以大多数同学在大学都学过但是最后基本学懂，就是因为这些网络的东东你只看理论很难立即，但是让你抓过一次包分析下就会恍然大悟——这就是关键门槛你能跨过去</p><h2 id="好习惯"><a href="#好习惯" class="headerlink" title="好习惯"></a><strong>好习惯</strong></h2><p>在星球里我更希望你带走一个好的习惯而不是一个具体知识点，虽然星球里的具体知识点、案例胜过很多教材，但他们总有过时、用不上的时候，唯有好的习惯可以跟随你，帮你实现无招胜有招</p><h3 id="记笔记"><a href="#记笔记" class="headerlink" title="记笔记"></a><strong>记笔记</strong></h3><p>放低身段，不要高估自己的能力(认为自己是知识效率)，放低后你要怎么做呢：记笔记、记笔记、记笔记</p><p>只要是你在学习就要或者看书、看资料的时候觉得自己有点通透了，赶紧记录下来，因为大概率一个星期你就忘了，半年你就完全不记得自己以前看过一次了，我好多次看到一篇好文章就感叹自己学到了，兴奋地拉到文章最后想去评论下，结果发现居然有了自己的评论在下面 :)</p><h3 id="动手"><a href="#动手" class="headerlink" title="动手"></a><strong>动手</strong></h3><p>动手，看到后理解了，也记了笔记，其实最好还是要自己去重现，记下自己看到的现象和理解，动手又会有一堆门槛，搭环境、客观则、怎么验证等等，这个时候我前面说的可观测性里面积累的一大堆工具可以让你如有神助、重现起来效率就是比别人高</p><h3 id="汇总输出"><a href="#汇总输出" class="headerlink" title="汇总输出"></a><strong>汇总输出</strong></h3><p>最后笔记记完还没完，笔记基本是零散的，你反复积累后到了一定的时机就是要把他们总结汇总成一篇完整度较高的博客文章，这里当然有自己的虚荣心在这里，但更多的是为了自己查询方便，有了新的理解或者使用姿势我经常更新补充10年前的博客文章，不会写一篇新的，这个补充知识让我的知识结构更完善，不是为了多发一篇博文，我现在解决问题、使用工具基本要靠翻自己的博客文章照着操作</p><h3 id="慢就是快、少就是多"><a href="#慢就是快、少就是多" class="headerlink" title="慢就是快、少就是多"></a><strong>慢就是快、少就是多</strong></h3><p>往往我们喜欢求快，以为自己一看就懂；求多以为自己越看的多越厉害</p><h3 id="不要等着时间流投喂"><a href="#不要等着时间流投喂" class="headerlink" title="不要等着时间流投喂"></a><strong>不要等着时间流投喂</strong></h3><p>看这篇置顶：<a href="https://t.zsxq.com/14Yel6KBg" target="_blank" rel="noopener">https://t.zsxq.com/14Yel6KBg</a></p><h2 id="纲举目张"><a href="#纲举目张" class="headerlink" title="纲举目张"></a><strong>纲举目张</strong></h2><p>对公司的业务、一个软件的运转流程都要尽量做到理解</p><p>比如学MySQL 要尽量知道从一条SQL 怎么进来，进行哪些处理后得到了查询结果；比如前面讲过的一个网络包是怎么到达对端的；比如你们公司的请求是怎么从客户端到达服务端(中间经过了LVS、Nginx吗)，服务端又是那些服务得依赖和调用，有没有Redis、MQ、Database，最后数据又是怎么返回的，我知道这在一个公司很难(屎山很复杂)，但目前没有更好的方法让你快速掌握并立足</p><p>为什么出现问题后总有一两个人很快能猜出来问题可能在哪个环节，这一部分是经验但更多的是对系统的了解，你都不知道有Redis存在一旦出错了你肯定猜不到Redis这里来</p><p>可以看看我之前说的实习生的故事，完全真实哈：</p><blockquote><p>讲一个我碰到的实习生的事情</p><p>北邮毕业直接后直接到我司实习</p><p>特点：英语好、动手能力强、爱琢磨，除了程序、电脑没有其它爱好 :)</p><p>实习期间因为英语好把我司文档很快就翻烂了，对产品、业务逻辑的理解基本是顶尖的</p><p>实习期间很快成为所有老员工的红人，都离不开他，搭环境、了解业务流程</p><p>因为别人的习惯都是盯着自己眼前的这一趴，只有他对业务非常熟悉</p><p>实习后很快就转正了，又3年后transfer 去了美国总部</p><p>连女朋友都是老员工给牵线的，最后领证一起去了美国。为啥老员工这么热情，是大家真心喜欢他 </p></blockquote><p>再看看张一鸣自述的第一年的工作：</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/FuQNw04aH2PQwnApyAKY1dXRh-nt.png" alt="img"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p>我前面所说的我也没做太好，希望大家能做得更好，我第一次感受无招胜有招就是<a href="https://plantegg.github.io/2022/01/01/%E4%B8%89%E4%B8%AA%E6%95%85%E4%BA%8B/">故事一里面</a>，到故事二过去差不多10年，这10年里我一直在琢磨怎么才能无招胜有招，也有在积累，但是花了10年肯定效率不算高，所以在星球里我希望通过我的经验帮你们缩短一些时间</p><p>上面讲再多如果你只是看看那根本还是没用，买再多的课也没用，关键是看触动后能否有点改变。你可以从里面试着挑几个你认为容易操作，比如记笔记、比如不要等着时间流投喂，或者有感触的试试先改变或者遵循下看看能不能获得一些变化进而形成正向循环</p><p>或者从评论里开始说说你星球这一年真正有哪些改变、学到了啥、你的感悟，不方便的也可以微信我私聊一下</p><p>这篇就当成整个星球学习的一个总结吧</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;无招胜有招–一周年总结&quot;&gt;&lt;a href=&quot;#无招胜有招–一周年总结&quot; class=&quot;headerlink&quot; title=&quot;无招胜有招–一周年总结&quot;&gt;&lt;/a&gt;无招胜有招–一周年总结&lt;/h1&gt;&lt;p&gt;大家抱着美好和雄赳赳的目标来到&lt;a href=&quot;https://wx
      
    
    </summary>
    
      <category term="others" scheme="https://plantegg.github.io/categories/others/"/>
    
    
      <category term="星球" scheme="https://plantegg.github.io/tags/%E6%98%9F%E7%90%83/"/>
    
      <category term="案例" scheme="https://plantegg.github.io/tags/%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>网球肘 过劳性(持续)肌腱病的治疗</title>
    <link href="https://plantegg.github.io/2024/03/14/%E7%BD%91%E7%90%83%E8%82%98/"/>
    <id>https://plantegg.github.io/2024/03/14/网球肘/</id>
    <published>2024-03-14T04:30:03.000Z</published>
    <updated>2024-11-20T10:00:53.364Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网球肘-过劳性-持续-肌腱病的治疗"><a href="#网球肘-过劳性-持续-肌腱病的治疗" class="headerlink" title="网球肘 过劳性(持续)肌腱病的治疗"></a><a href="https://www.haoyishu.com/web/article/4947" target="_blank" rel="noopener">网球肘 过劳性(持续)肌腱病的治疗</a></h1><p>因为长期打球，导致手肘部分疼痛难耐，2024年1月开始进行了长时间的休息期，中间2024的2月是春节，所以总共修了快2个月，还不见好，于是去医院，其实医院给的治疗方案也不好，但是医师告诉了我一个关键词这个病叫：<strong>网球肘</strong></p><p>知道关键词后就开始了自我寻求治疗方案的过程，记下来供参考，到2024年3月14号，最近两周多次打球验证我的网球肘基本好了，所以说一下治疗过程</p><h2 id="个人总结"><a href="#个人总结" class="headerlink" title="个人总结"></a>个人总结</h2><p>网球肘的核心是肌肉过劳发炎了，所以关键是如何消炎</p><p>一定要用：<a href="https://www.tidepharm.com/productinfo/162025.html" target="_blank" rel="noopener">氟比洛芬凝胶贴膏</a> ，而且每天两贴尽量不要断，期间通过大拇指使劲按压疼痛部分来感受验证的减轻，一般连续贴3-5天会有明显的效果，如果无效请去医院</p><p>口服消炎药也可以试试，我估计针对性不强(瞎猜的，希望你试试后来告诉我)。至于体外冲击波可以尝试尝试，我个人的经验觉得还不足以证明其有效</p><p><strong>后面的可以不用看了</strong></p><h2 id="治疗"><a href="#治疗" class="headerlink" title="治疗"></a>治疗</h2><p>网球肘已经有几个月了，开始我没在意以为就是肌肉劳累，休息休息就会好，直到过年的时候我真正歇了一个多月，过完年偶尔一用力居然又开是疼，让我计划去医院看看，之前自己在社区医院开过几盒：<a href="https://www.tidepharm.com/productinfo/162025.html" target="_blank" rel="noopener">氟比洛芬凝胶贴膏</a></p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20240305141525956.png" alt="image-20240305141525956"></p><p>(家中请常备这个药，膏药里的神奇)</p><p>【适应症】<br>下列疾病及症状的镇痛、消炎：<br>骨关节炎、肩周炎、肌腱及腱鞘炎、腱鞘周围炎、肱骨外上髁炎 ( 网球肘 )、肌肉痛、外伤所致肿胀、疼痛</p><p>过年期间自己也偶尔贴一下，但是效果不明显(应该是没有连续贴导致的效果不好)。</p><p>这次去医院正规想看看，但是大医院挂不上号，于是去了一个小医院(社区医院推荐的，说这家别的不行，刚好看运动医学还不错)，到医院大夫一听就笑着问我知不知道有一种病叫：网球肘。这是我第一次听说这个病，大夫用大拇指按压我的伤口附近，确实非常疼，结合我经常打球基本确诊。</p><p>然后给我开了两次体外冲击波物理治疗，当场治疗了一次，过程中很痛，打完的当时再按压就不疼了，但是过几个小时还是照旧(这也在医师的预料中)，给我开了两次这个治疗，我只去了一次</p><blockquote><p>体外冲击波疗法（extracorporeal shock wave therapy, ESWT）是<strong>一种非侵入性、安全、有效治疗多种疾病的方法</strong>，在临床多个学科中得到了广泛应用，但临床应用不规范、治疗关键技术不一致、治疗方案不统一、培训体系不健全等问题严重制约了ESWT的临床推广应用。</p><p><a href="https://rs.yiigle.com/CN101658202302/1459029.htm#:~:text=%E4%BD%93%E5%A4%96%E5%86%B2%E5%87%BB%E6%B3%A2%E7%96%97%E6%B3%95%EF%BC%88extracorporeal%20shock,ESWT%E7%9A%84%E4%B8%B4%E5%BA%8A%E6%8E%A8%E5%B9%BF%E5%BA%94%E7%94%A8%E3%80%82" target="_blank" rel="noopener">https://rs.yiigle.com/CN101658202302/1459029.htm#:~:text=%E4%BD%93%E5%A4%96%E5%86%B2%E5%87%BB%E6%B3%A2%E7%96%97%E6%B3%95%EF%BC%88extracorporeal%20shock,ESWT%E7%9A%84%E4%B8%B4%E5%BA%8A%E6%8E%A8%E5%B9%BF%E5%BA%94%E7%94%A8%E3%80%82</a></p></blockquote><p>回到家我就开始了对“网球肘”的学习，<a href="https://zhuanlan.zhihu.com/p/626645077" target="_blank" rel="noopener">中间找到这篇最关键的经验贴</a>【你一定要看】，我把这里面最有价值的引用一下：</p><p>比较对症的治疗方法是，内服 <a href="https://www.zhihu.com/search?type=content&q=%E6%B4%9B%E7%B4%A2%E6%B4%9B%E8%8A%AC%E9%92%A0%E7%89%87" target="_blank" rel="noopener">洛索洛芬钠片</a>，外贴 <a href="https://www.zhihu.com/search?q=%E6%B0%9F%E6%AF%94%E6%B4%9B%E8%8A%AC%E5%87%9D%E8%83%B6%E8%B4%B4%E8%86%8F&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:%2244406930%22%7D" target="_blank" rel="noopener">氟比洛芬凝胶贴膏</a>（商标是泽普思），尤其要注意用量和时机</p><ul><li><p><strong>洛索洛芬钠片——我这次没吃这个</strong></p></li><li><ul><li>一日三次，每次两片（60mg&#x2F;片）</li><li>饭后服用（<strong>切记！</strong>）</li></ul></li><li><p><strong>氟比洛芬凝胶贴膏</strong>——这点最重要，我不再像以前一样偶尔贴，而是连续一周每天两贴</p></li><li><ul><li>每次一帖，白天&#x2F;晚上 各一帖</li><li>除了洗澡之外，尽量连续贴</li></ul></li></ul><p>按照上面的做法，经过5天后我的网球肘真的神奇地好了，中间还阳了3天(所以第二次冲击波治疗我也没去)</p><h3 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h3><p>我的判断是网球肘消炎很重要，应该还是氟比洛芬凝胶贴膏起了关键作用，但是要注意：连续贴一周，每天两贴</p><p>至于冲击波是否有效果，我目前觉得可能有效果，但是证据还不够</p><p><strong>知道这个病的名字很重要，这样就有了搜索关键字，看别人描述相对来说我这次不算严重</strong></p><h3 id="UpToDate-临床顾问"><a href="#UpToDate-临床顾问" class="headerlink" title="UpToDate 临床顾问"></a>UpToDate 临床顾问</h3><p>知道名字后，我在淘宝上购买了 UpToDate 临床顾问论文库的账号(收录了几乎所有的医学论文，但是只对收费会员开放)，专业点说如果你好好研究 UpToDate，再结合自身状况可以得到比很多专业医师更专业的治疗</p><p>但是这次查到的治疗方案都是普通的消炎、镇痛(对乙氨基酚)等，但是不妨碍你下次可以继续到这里查，一般买个3天的账号才几块钱</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20240305145408804.png" alt="image-20240305145408804"></p><p>另外也推荐大家看默沙东手册(完全免费，有<a href="https://www.msdmanuals.cn/home/injuries-and-poisoning/sports-injuries/lateral-epicondylitis" target="_blank" rel="noopener">网页</a>和app版本)：</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20240305145706453.png" alt="image-20240305145706453"></p><h3 id="自我检查"><a href="#自我检查" class="headerlink" title="自我检查"></a>自我检查</h3><p>自己按压疼痛的地方确认在什么地方，结合平时的运动和习惯，是否恢复也可以通过按压和发力来确认</p><h3 id="非甾体类抗炎药-NSAID"><a href="#非甾体类抗炎药-NSAID" class="headerlink" title="非甾体类抗炎药(NSAID)"></a>非甾体类抗炎药(NSAID)</h3><p><strong>非甾体抗炎药</strong>（non-steroidal anti-inflammatory drugs，NSAIDs）又称<strong>非类固醇抗炎药</strong>，简称<strong>非甾体类</strong>，是一类具有解热<a href="https://zh.wikipedia.org/wiki/%E9%95%87%E7%97%9B%E8%8D%AF" target="_blank" rel="noopener">镇痛</a>效果的药物，在施用较高剂量时也具有<a href="https://zh.wikipedia.org/wiki/%E6%8A%97%E7%82%8E%E6%80%A7" target="_blank" rel="noopener">消炎作用</a>。</p><p>NSAID 包括<strong>布洛芬（Advil、Motrin IB 等）、萘普生纳（Aleve、Anaprox DS 等）、双氯芬酸钠和塞来昔布（Celebrex）</strong></p><p>非甾体抗炎药中，属<a href="https://zh.wikipedia.org/wiki/%E9%98%BF%E6%96%AF%E5%8C%B9%E6%9E%97" target="_blank" rel="noopener">阿司匹林</a>、<a href="https://zh.wikipedia.org/wiki/%E5%B8%83%E6%B4%9B%E8%8A%AC" target="_blank" rel="noopener">伊布洛芬</a>、<a href="https://zh.wikipedia.org/wiki/%E7%94%B2%E8%8A%AC%E9%82%A3%E9%85%B8" target="_blank" rel="noopener">甲芬那酸</a>、<a href="https://zh.wikipedia.org/wiki/%E8%90%98%E6%99%AE%E7%94%9F" target="_blank" rel="noopener">萘普生</a>最为著名，在绝大多数国家都可作为<a href="https://zh.wikipedia.org/wiki/%E9%9D%9E%E8%99%95%E6%96%B9%E8%97%A5" target="_blank" rel="noopener">非处方药</a>销售[<a href="https://zh.wikipedia.org/wiki/%E9%9D%9E%E7%94%BE%E4%BD%93%E6%8A%97%E7%82%8E%E8%8D%AF#cite_note-The_Physician_and_Sportsmedicine_2010-4" target="_blank" rel="noopener">4]</a>。</p><p><a href="https://zh.wikipedia.org/wiki/%E5%AF%B9%E4%B9%99%E9%85%B0%E6%B0%A8%E5%9F%BA%E9%85%9A" target="_blank" rel="noopener">对乙酰氨基酚</a>因其抗炎作用微弱，而通常不被归为非甾体抗炎药，它主要通过抑制分布在中枢神经系统的<a href="https://zh.wikipedia.org/wiki/%E7%92%B0%E6%B0%A7%E5%90%88%E9%85%B6" target="_blank" rel="noopener">环氧合酶</a>-2，以减少<a href="https://zh.wikipedia.org/wiki/%E5%89%8D%E5%88%97%E8%85%BA%E7%B4%A0" target="_blank" rel="noopener">前列腺素</a>的生成，从而缓解疼痛，但由于<a href="https://zh.wikipedia.org/wiki/%E7%92%B0%E6%B0%A7%E5%90%88%E9%85%B6" target="_blank" rel="noopener">环氧合酶</a>-2在周边组织中数量较少，因此作用微弱</p><h3 id="抗炎治疗"><a href="#抗炎治疗" class="headerlink" title="抗炎治疗"></a>抗炎治疗</h3><p><strong>抗炎治疗</strong> — 尽管抗炎治疗多年来都是肘部肌腱病的主要疗法，但支持性证据仅来自成功个案和极少数研究。在医学界对肌腱病有了科学认识之后，抗炎疗法对肘部肌腱病和其他慢性退行性肌腱病的作用也出现了争议。抗炎治疗包括冰敷、NSAID、离子透入疗法和注射糖皮质激素。对于LET，冰敷联合离心力量及柔韧性训练并未优于单纯离心力量训练[<a href="http://www.uptodate.zd.hggfdd.top/contents/zh-Hans/elbow-tendinopathy-tennis-and-golf-elbow/abstract/51" target="_blank" rel="noopener">51</a>]。(参见上文[‘病理生理学’](<a href="http://www.uptodate.zd.hggfdd.top/contents/zh-Hans/elbow-tendinopathy-tennis-and-golf-elbow?search=Tennis" target="_blank" rel="noopener">http://www.uptodate.zd.hggfdd.top/contents/zh-Hans/elbow-tendinopathy-tennis-and-golf-elbow?search=Tennis</a> Elbow 冲击波&amp;source&#x3D;search_result&amp;selectedTitle&#x3D;3~150&amp;usage_type&#x3D;default&amp;display_rank&#x3D;3#H4))</p><h3 id="体外冲击波疗法（extracorporeal-shock-wave-therapy-ESWT）"><a href="#体外冲击波疗法（extracorporeal-shock-wave-therapy-ESWT）" class="headerlink" title="体外冲击波疗法（extracorporeal shock wave therapy, ESWT）"></a>体外冲击波疗法（extracorporeal shock wave therapy, ESWT）</h3><p><strong>体外震波治疗和其他电物理疗法</strong> — 声波已用于治疗慢性LET。总体而言，支持体外震波治疗(extracorporeal shock wave therapy, ESWT)和其他“电物理”疗法的证据并不令人信服，所以我们不予以推荐[<a href="http://www.uptodate.zd.hggfdd.top/contents/zh-Hans/elbow-tendinopathy-tennis-and-golf-elbow/abstract/82" target="_blank" rel="noopener">82</a>]。该操作通常会令患者不适，但有些研究显示ESWT有一定益处[<a href="http://www.uptodate.zd.hggfdd.top/contents/zh-Hans/elbow-tendinopathy-tennis-and-golf-elbow/abstract/83" target="_blank" rel="noopener">83</a>]，但也有许多研究未发现ESWT有益[<a href="http://www.uptodate.zd.hggfdd.top/contents/zh-Hans/elbow-tendinopathy-tennis-and-golf-elbow/abstract/84,85" target="_blank" rel="noopener">84,85</a>]。</p><p><a href="https://www.sohu.com/a/722027555_100107953" target="_blank" rel="noopener">体外冲击波疗法临床应用中国疼痛学专家共识 2023版</a> </p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>“网球肘 ”(TenniS Elbow)又名肱骨外上髁炎 (1ateralepicondylitis)，以网球运动 员发病率高 而得名</p><p>广义 的网球肘可分 为具有不同临床特点的四个类型 :</p><ol><li>外侧网球肘 :亦称肱骨外上髁炎 ，即经典的网 球肘 ，主要累及附于肱骨外上髁的桡侧腕短伸肌腱起 点。</li><li>内侧网球肘:亦称肱骨内上髁炎或高尔夫球肘， 主要 累及附于 肱骨 内上髁 的屈肌 和旋前 圆肌腱 起 点。</li><li>后侧网球肘 :亦称三头肌腱炎 。</li><li>混合型网球 肘 :内外侧网球肘同时发生 ，并不少见</li></ol><h2 id="读懂医疗发票"><a href="#读懂医疗发票" class="headerlink" title="读懂医疗发票"></a>读懂医疗发票</h2><p>自付二：对有自付的药品、检查费收取自费部分；比如药品：10%或50%；检查费：8%；材料费：30%；</p><p>自付一：根据下图，报销比例是90%，也就是你还要出总医药费的90%；但是要注意<strong>总医药费要减掉自付二的部分</strong></p><p>举例：一张发票开了一盒泰诺(酚麻美敏片) 13.47块(乙类清单 10%自付)，还有一盒没有无自付的头孢 5.17块，共18.64</p><p>最后发票显示自付二：1.35 就是13.47<em>10% ——这个10%是因为该药有部分自费，自付一：1.73 是 (18.64-(13.47</em>10%))*10%  ——这个10%就是达到起付线1800后报销90% </p><p>如果你没有达到起付线，就是100%自付，那么不存在自付二，付款金额全部显示为自付一</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/W020230920365631669567.png" alt="职工基本医疗保险门（急）诊待遇标准"></p><h2 id="痛风"><a href="#痛风" class="headerlink" title="痛风"></a><a href="https://mp.weixin.qq.com/s/hujlWS3Q0xde0z0rDKiPpQ" target="_blank" rel="noopener">痛风</a></h2><p>痛风是由于血中尿酸含量过高（高尿酸血症）而导致尿酸盐结晶沉积在关节内的疾病。沉积的结晶导致关节内和关节周围出现疼痛性炎症的发作。通常具有家族遗传性</p><p>痛风在男性中的发病率高于女性。男性痛风患者较女性常见，通常发生在中年男性和绝经期后的女性。很少发生于年轻人，但如果小于 30 岁的人发生痛风，其病情一般较重。</p><p>食物和痛风没关系。如果发作了就吃止痛药。不疼的时候吃非布司他（找医生开，这是处方药）。定期检查尿酸是否有降下来。 然后非常容易被忽视的一点是注意别喝含糖饮料，干脆戒掉。</p><p>而止痛的药物无非是：</p><ul><li>非甾体抗炎药（NSAIDs）</li><li>秋水仙碱</li><li>糖皮质激素</li></ul><p>秋水仙碱或秋水仙素，考虑到其肝肾毒性，我是肯定坚决不吃。至于糖皮质激素，也就是俗称的激素，偶尔用一次或许也可以接受，但不能持续用</p><h2 id="风湿性多肌痛"><a href="#风湿性多肌痛" class="headerlink" title="风湿性多肌痛"></a>风湿性多肌痛</h2><p>风湿性多肌痛是关节滑膜的炎症，是一种能引起颈、肩、髋部肌肉疼痛和僵硬的疾病。</p><p>风湿性多肌痛发病年龄在 55 岁以上，原因尚不清楚。女性的患病率较男性高。风湿性多肌痛的病因尚不清楚。风湿性多肌痛可与 <a href="https://www.msdmanuals.cn/home/bone-joint-and-muscle-disorders/vasculitic-disorders/giant-cell-arteritis" target="_blank" rel="noopener">巨细胞（颞）动脉炎</a>同时出现，也可在它之前或之后出现。有学者认为这两种疾病是同一种病变的不同表现。风湿性多肌痛似乎比巨细胞动脉炎更常见。</p><h2 id="类风湿性关节炎-RA"><a href="#类风湿性关节炎-RA" class="headerlink" title="类风湿性关节炎 (RA)"></a>类风湿性关节炎 (RA)</h2><p>类风湿性关节炎是一种炎症性关节炎，表现为关节的炎症，受累关节通常包括手脚关节，可导致关节肿胀、疼痛以及常常遭到破坏。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;网球肘-过劳性-持续-肌腱病的治疗&quot;&gt;&lt;a href=&quot;#网球肘-过劳性-持续-肌腱病的治疗&quot; class=&quot;headerlink&quot; title=&quot;网球肘 过劳性(持续)肌腱病的治疗&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.haoyishu.com/w
      
    
    </summary>
    
      <category term="others" scheme="https://plantegg.github.io/categories/others/"/>
    
    
      <category term="网球肘" scheme="https://plantegg.github.io/tags/%E7%BD%91%E7%90%83%E8%82%98/"/>
    
      <category term="氟比洛芬凝胶" scheme="https://plantegg.github.io/tags/%E6%B0%9F%E6%AF%94%E6%B4%9B%E8%8A%AC%E5%87%9D%E8%83%B6/"/>
    
      <category term="泽普思" scheme="https://plantegg.github.io/tags/%E6%B3%BD%E6%99%AE%E6%80%9D/"/>
    
  </entry>
  
  <entry>
    <title>从一道面试题谈起</title>
    <link href="https://plantegg.github.io/2024/03/05/%E4%BB%8E%E4%B8%80%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98%E8%B0%88%E8%B5%B7/"/>
    <id>https://plantegg.github.io/2024/03/05/从一道面试题谈起/</id>
    <published>2024-03-05T09:30:03.000Z</published>
    <updated>2024-11-20T10:00:53.308Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从一道面试题谈起"><a href="#从一道面试题谈起" class="headerlink" title="从一道面试题谈起"></a>从一道面试题谈起</h1><p>这是一道BAT 的面试题，针对的是应届生，其实我觉得这种题目也适合所有面试人，比刷算法题、八股文要有用、实际多了</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你几天时间自己在家可以借助任何资源用测试工具Sysbench 完成一次MySQL数据的性能测试，并编写测试报告(自行搭建数据库)</p><p>sysbench压MySQL常用有只读、读写、只写、update等6个场景</p><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>这个候选人把他的结果发给我看了，我看完一惊要坏事，这个结果估计要不及格了</p><p>他用 sysbench 跑了一下只读、读写、只写等场景然后截图就没有了！</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20230908223348050.png" alt="image-20230908223348050"></p><p>(如上图，大概就是6&#x2F;7个这样的截图就没有了！)</p><p>我看到这个结果是很震惊的，你希望面试官挨个去看截图？<strong>最起码要有测试结果表格当做结论汇总吧</strong>。</p><p>如果你不知道怎么做可以先去搜一下别人做的测试报告，你可以按照别人的测试流程完全走一遍，基本算是模仿，要有结论的话也能得60分。</p><h2 id="60分的答案"><a href="#60分的答案" class="headerlink" title="60分的答案"></a>60分的答案</h2><p>每个场景增加1&#x2F;8&#x2F;16&#x2F;32等并发，然后按照6个场景不同并发做成一个表格，并观察rt、cpu的指标最后汇总形成图表、给出结论分析，比如拐点在哪里、为什么</p><p>我觉得这个面试题好就好在这里的分析可以无穷展开，适合新手也适合多年的老手，任何结论理由你都可以写上去，只要有理有据有分析</p><h2 id="80分的答案"><a href="#80分的答案" class="headerlink" title="80分的答案"></a>80分的答案</h2><p>给自己出一个拟题，比如对比5.7和8.0的性能差异，8.0相对5.7在哪些场景有优化、优劣势，比如<a href="http://dimitrik.free.fr/blog/posts/mysql-performance-80-iobound-oltprw-vs-percona57.html" target="_blank" rel="noopener">这个测试报告</a></p><p>比如官方说的8.0在全局锁、pagesize等方面有些有优化，那么就针对性地设置场景来测试这些功能。</p><p>比如这是如上链接测试报告中间有数据图表：</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20230908224210461.png" alt="image-20230908224210461"></p><p>最后有结论和分析：</p><ul><li>the main impact in the given <strong>IO-bound</strong> OLTP_RW workload is only DBLWR and nothing else !</li><li>and again, if your workload has more than 32 <em>concurrent</em> users sessions + using a very fast flash storage..</li><li>so far, impatient to see DBLWR fixed in MySQL 8.0 ;-))</li><li>using <strong>4K page size</strong> is absolutely to consider for any IO-bound workloads !</li><li><strong>NOTE</strong> : every Linux vendor today is claiming that 4K IO writes in Linux are <em>atomic</em> ! – and if this is really true for your platform, then you can safely disable DBLWR if you’re using 4K page and already reach <strong>x2 times higher TPS</strong> with MySQL 8.0 today in the given IO-bound OLTP_RW or any similar ! ;-)) – the same x2 times higher TPS was <a href="http://dimitrik.free.fr/blog/posts/mysql-performance-80-ga-iobound-tpcc.html" target="_blank" rel="noopener">also observed on IO-bound TPCC</a> even with an old SSD drive !</li><li>while if your workload is not IO-bound (having active dataset mostly cached in BP, none or very low IO reads) – then DBLWR is not your main impact ! – you may always tune your MySQL instance to make it mostly “invisible”..</li><li><strong>Binlog</strong> – is the main impact in this case.. Unfortunately it’s another old historical PITA in MySQL Server, and it’s largely a time now to get it fixed (or come with a more advanced alternative).. – “nature is always finding its way”, so let’s see..</li><li>no comments on MariaDB 10.3 performance.. – but a good live example that just copying InnoDB code from MySQL 5.7 is not enough to get it running right..</li></ul><p>之所以有80分是因为超出面试官的期待，给出了一个更高级的结论，面试官肯定很愿意约你过去谈谈</p><h2 id="还有没有更高的分"><a href="#还有没有更高的分" class="headerlink" title="还有没有更高的分"></a>还有没有更高的分</h2><p>也许有，但是不好说，80分那个就是优秀很好了，挖掘能力强的应届生会搞出来(肯定没有这么细致和周到，但是有几个关键点的结论就够80分了)，再想出彩一点可以根据这个我的星球案例 <a href="https://plantegg.github.io/2021/05/14/%E5%8D%81%E5%B9%B4%E5%90%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%98%E6%98%AF%E4%B8%8D%E6%95%A2%E6%8B%A5%E6%8A%B1NUMA/">https://plantegg.github.io/2021/05/14/%E5%8D%81%E5%B9%B4%E5%90%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%98%E6%98%AF%E4%B8%8D%E6%95%A2%E6%8B%A5%E6%8A%B1NUMA/</a> 去搞几台物理机开关NUMA 验证一下，然后给一个对性能影响结果的测试数据报告</p><p>或者我博客这篇也行 <a href="https://plantegg.github.io/2019/12/16/Intel%20PAUSE%E6%8C%87%E4%BB%A4%E5%8F%98%E5%8C%96%E6%98%AF%E5%A6%82%E4%BD%95%E5%BD%B1%E5%93%8D%E8%87%AA%E6%97%8B%E9%94%81%E4%BB%A5%E5%8F%8AMySQL%E7%9A%84%E6%80%A7%E8%83%BD%E7%9A%84/%EF%BC%8C%E6%89%BE%E4%B8%8D%E5%90%8CIntel%E6%9C%BA%E5%99%A8%E9%AA%8C%E8%AF%81">https://plantegg.github.io/2019/12/16/Intel%20PAUSE%E6%8C%87%E4%BB%A4%E5%8F%98%E5%8C%96%E6%98%AF%E5%A6%82%E4%BD%95%E5%BD%B1%E5%93%8D%E8%87%AA%E6%97%8B%E9%94%81%E4%BB%A5%E5%8F%8AMySQL%E7%9A%84%E6%80%A7%E8%83%BD%E7%9A%84/，找不同Intel机器验证</a></p><p>给出不同的MySQL参数在不同Intel 芯片下性能的差异报告：</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20221026153750159.png" alt="image-20221026153750159"></p><p>这种结论抛出去肯定会让面试官惊到，并对你刮目相看，至少说明你能在某个点上可以钻研很深，到哪里都要的是火车头，而不是普通工程师。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>从一个简单的面试题就可以看出应试人员的主观能动性，最起码你要会抄，先去抄别人的测试报告，然后验证一遍然后思考清楚每一个数据的原因(面试大概率会问)</p><p>但是大部分工程师都想临时抱佛脚，其实面试官可能会知道你不懂，但是希望看到给你几天你的深度挖掘和学习能力</p><p>最后可以从一个问题深挖、总结能力上能看出来候选人的天花板上限，而我们大部分时候都是凑合可以、又不是不能用，逼着自己向前精进一步总是很难的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;从一道面试题谈起&quot;&gt;&lt;a href=&quot;#从一道面试题谈起&quot; class=&quot;headerlink&quot; title=&quot;从一道面试题谈起&quot;&gt;&lt;/a&gt;从一道面试题谈起&lt;/h1&gt;&lt;p&gt;这是一道BAT 的面试题，针对的是应届生，其实我觉得这种题目也适合所有面试人，比刷算法题、八
      
    
    </summary>
    
      <category term="MySQL" scheme="https://plantegg.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://plantegg.github.io/tags/MySQL/"/>
    
      <category term="Sysbench" scheme="https://plantegg.github.io/tags/Sysbench/"/>
    
  </entry>
  
  <entry>
    <title>必读 成长路径</title>
    <link href="https://plantegg.github.io/2024/02/20/%E5%BF%85%E8%AF%BB%20%E6%98%9F%E7%90%83%E6%88%90%E9%95%BF%E8%B7%AF%E5%BE%84/"/>
    <id>https://plantegg.github.io/2024/02/20/必读 星球成长路径/</id>
    <published>2024-02-20T09:30:03.000Z</published>
    <updated>2024-11-20T10:00:52.726Z</updated>
    
    <content type="html"><![CDATA[<h1 id="必读-成长路径"><a href="#必读-成长路径" class="headerlink" title="必读 成长路径"></a>必读 成长路径</h1><p>我的<a href="https://plantegg.github.io/2023/05/10/%E7%A8%8B%E5%BA%8F%E5%91%98%E6%A1%88%E4%BE%8B%E6%98%9F%E7%90%83%E4%BB%8B%E7%BB%8D/">星球介绍</a></p><p>这篇是关于我星球里的内容、目标以及如何达到这个目标的一些概述</p><h2 id="星球目标"><a href="#星球目标" class="headerlink" title="星球目标"></a>星球目标</h2><p>本星球致力深度分析各种程序员领域疑难案例，通过案例带动对基础核心知识的理解，同时强化动手能力</p><p>一年星球没法让大家称为顶尖程序员(我自己都不是)，只是希望用我的方法、知识、经验、案例作为你的垫脚石，帮助你快速、早日成为一个基本合格的程序员。</p><h2 id="必会技能"><a href="#必会技能" class="headerlink" title="必会技能"></a>必会技能</h2><p>在星球一年的时间你能学到什么(跟着做一定可以学会的)：</p><ul><li>网络入门，抓包分析网络能力，wireshark使用 网络篇章索引：<a href="https://articles.zsxq.com/id_jr1w5wvb8j9f.html" target="_blank" rel="noopener">https://articles.zsxq.com/id_jr1w5wvb8j9f.html</a> </li><li><a href="https://t.zsxq.com/17CmWErZB" target="_blank" rel="noopener">QPS、RT和并发的关系</a>，记住查瓶颈追着 RT跑（哪里RT增加快瓶颈就在哪里）</li><li>IPC是什么和性能的本质</li><li><a href="https://wx.zsxq.com/dweb2/index/topic_detail/411522214118158" target="_blank" rel="noopener">养成</a><a href="https://wx.zsxq.com/dweb2/index/topic_detail/411522214118158" target="_blank" rel="noopener">做会</a><a href="https://wx.zsxq.com/dweb2/index/topic_detail/411522214118158" target="_blank" rel="noopener">而不是</a><a href="https://wx.zsxq.com/dweb2/index/topic_detail/411522214118158" target="_blank" rel="noopener">学会</a><a href="https://wx.zsxq.com/dweb2/index/topic_detail/411522214118158" target="_blank" rel="noopener">的习惯</a></li></ul><h2 id="视频素材"><a href="#视频素材" class="headerlink" title="视频素材"></a>视频素材</h2><p><strong>如果你发现看文章、做实验有些障碍，我特意录制了视频做演示（如果你基础好，看文章就能看懂并把实验做完，其实没必要看视频）</strong>：<a href="https://articles.zsxq.com/id_blqwkgux7i0a.html" target="_blank" rel="noopener">https://articles.zsxq.com/id_blqwkgux7i0a.html</a> </p><p>视频内容目前已经完成了：</p><ul><li>抓包技巧演示</li><li>QPS、并发、RT 的关系</li><li>tcp-rt 展示和在性能定位中的使用</li><li>瓶颈定位分析——追着RT 跑</li><li>单机内瓶颈定位</li><li>认识CPU 和 Cache，以及测试Cache、内存时延</li></ul><p>我在星球内一直强调视频不是高效的学习方法，因为你没有办法仔细思索、随时前后反复看等等，看完视频容易形成学懂了的错觉实际很快就忘了，但是我录完这些视频看大家的反馈我发现视频也有优点那就是：很直观、门槛低等，但是一定要注意一个错觉：以为看视频看懂了。但实际就是看视频看完了忘得比看文章快多了，所以看完视频一定要再去实验一下，实验所需要的素材基本都在星球内有了，代码等我都放在了github上</p><h2 id="挑战技能"><a href="#挑战技能" class="headerlink" title="挑战技能"></a>挑战技能</h2><p>有些技能不好描述，或者说是一些暗知识，我们尽量去讨论这些技能的逻辑，同时对一些特别有效的工具、知识会重点突破，这些恰恰是我希望你们最终能掌握的：</p><ul><li>分析解决问题的能力，在一定的知识的基础上靠谱地去分析</li><li>掌握技能而不是死知识</li><li>掌握核心知识点，核心知识点是指理解了一个点很容易对一个领域有较大的突破，比如IPC对于CPU性能、比如内存墙对计算机组成原理的理解、比如RT 对性能瓶颈的定位等</li></ul><p>知识总是学不完的，况且大多时候我们有了知识也解决不了问题，所以我们更注重能力的训练，比如这个提问：<a href="https://t.zsxq.com/0cfBnpmLw" target="_blank" rel="noopener">https://t.zsxq.com/0cfBnpmLw</a></p><h2 id="节奏安排"><a href="#节奏安排" class="headerlink" title="节奏安排"></a>节奏安排</h2><ul><li>一个月完成这一年唯一的一个必做作业：<a href="https://t.zsxq.com/0cUhJcVNa" target="_blank" rel="noopener">https://t.zsxq.com/0cUhJcVNa</a> 目的体验做会和学会的差别</li><li>一个月QPS、并发、RT的关系：<a href="https://t.zsxq.com/0dCmWErZB" target="_blank" rel="noopener">https://t.zsxq.com/0dCmWErZB</a> 性能、瓶颈定位的最核心理论</li><li>一个月补CPU基础，核心可以从内存墙、IPC、NUMA 入手，星球内都有不错的案例，可以查看 CPU 专栏</li><li>一个月用来实践性能瓶颈定位，比如就用Sysbench + MySQL 来构造：<a href="https://articles.zsxq.com/id_blqwkgux7i0a.html" target="_blank" rel="noopener">https://articles.zsxq.com/id_blqwkgux7i0a.html</a> </li><li>……补充中</li></ul><p>如果你发现这个节奏你跟不上，那么就先去<a href="https://articles.zsxq.com/id_blqwkgux7i0a.html" target="_blank" rel="noopener">看视频</a>，然后再按这个节奏来，如果还不行可以再去看视频，如果视频看不懂可以到微信群里讨论或者就视频里的哪个点提问，如果觉得看懂了，但是还是没法独立实验，那可以这个看懂了还是错觉，或者是基础缺的太多了</p><p>请先浏览星球专栏里的必看资源以及学习方法，做到做会而不是看会。另外每个主题后面的留言也很有价值</p><p>本星球大部分理论指导部分请看视频：<a href="https://t.zsxq.com/0dF2WvzEF" target="_blank" rel="noopener">https://t.zsxq.com/0dF2WvzEF</a> (5-10节共90分钟)，视频中的理论要和案例结合</p><h2 id="案例选择"><a href="#案例选择" class="headerlink" title="案例选择"></a>案例选择</h2><p>星球选用的案例尽量典型普适性强，代表基础组件基本原理等知识。</p><p>分析手段尽量通用，分析过程一定要逻辑合理每个疑问都能回答清晰。</p><p>搞清楚一个案例基本能横扫一个领域，其次在一个案例后再带3&#x2F;5个相关小案例可以帮你丰富场景，多角度理解</p><p>基于以上目标一年内选择了如下4个案例：</p><ul><li>TCP传输性能–对应星球有一年唯一的必做实验让大家上手：<a href="https://t.zsxq.com/0dUhJcVNa" target="_blank" rel="noopener">https://t.zsxq.com/0dUhJcVNa</a> <strong>目标：动手</strong></li><li>[历时3年的Nginx卡顿分析](<a href="https://github.com/plantegg/programmer_case/blame/main/performance/Nginx" target="_blank" rel="noopener">https://github.com/plantegg/programmer_case/blame/main/performance/Nginx</a> resueport 导致偶发性卡顿.md)–Nginx的架构本身的设计缺陷带来的卡顿，<strong>修复放来来自TCP传输性能，知识之间的联系</strong></li><li><a href="https://t.zsxq.com/0f00mI5gF" target="_blank" rel="noopener">MySQL有的连接一直慢、有的连接一直快，为什么</a>？目的：<strong>Wireshark分析的巧用，这个方法普适性极强</strong></li><li>同样的QPS，但CPU使用率相差3倍是为什么。<strong>目标：实现对CPU理解的入门</strong></li></ul><p>详细描述请看这里：<a href="https://t.zsxq.com/0cyPswpVB" target="_blank" rel="noopener">https://t.zsxq.com/0cyPswpVB</a></p><h2 id="本星球口头禅"><a href="#本星球口头禅" class="headerlink" title="本星球口头禅"></a>本星球口头禅</h2><p><strong>慢就是快，做会而不是看会，无招胜有招</strong></p><p>慢就是快指的是不要贪多，而是要彻底搞懂一个问题、一个知识点，让这个点成为一个支柱长成体系，贪多往往啥都没有掌握</p><p>做会而不是看会：程序员是工程类(也有科学家，但我们CRUD boy肯定不是)，尤其像网络包、CPU流水线都是看不到无法感受，所以建议你去抓包、去做实验体会、触摸到每个包就能够更好地理解，所以星球强调做案例</p><p>无招胜有招：尽量找我普适性强的技能，比如ping ping神功，比如抓包，比如Google搜索，你会反复看到我的案例中使用这些技能</p><h2 id="如何在本星球获得成长的基本步骤"><a href="#如何在本星球获得成长的基本步骤" class="headerlink" title="如何在本星球获得成长的基本步骤"></a>如何在本星球获得成长的基本步骤</h2><p>多和以前的学习方式对比，学了一大堆几个月后全忘了，学了很多不会解决问题，学了很多但要靠反复刷。你不应该继续像以前一样忙忙碌碌但是收获很小</p><ul><li>该买的书买了：<a href="https://t.zsxq.com/0c3P6gpJE" target="_blank" rel="noopener">https://t.zsxq.com/0c3P6gpJE</a></li><li>该做的实验做了:<a href="https://t.zsxq.com/0cUhJcVNa" target="_blank" rel="noopener">https://t.zsxq.com/0cUhJcVNa</a> ，反复试过后，不懂的尽量提问</li><li>该看的视频看过了：<a href="https://articles.zsxq.com/id_blqwkgux7i0a.html" target="_blank" rel="noopener">https://articles.zsxq.com/id_blqwkgux7i0a.html</a> (实验你能独立完成就不用看视频了)</li><li>薅住几个case使劲干，能干多深干多深，看不懂的慢慢想，最好能在工作中找到场景实践一下</li><li>学习方法一定要看</li><li>不要急于求成，贪多不化，尽量单点突破(就是一个点使劲往深里干)，彻底学懂一个后你会感受到加速</li><li>体会到动手做和看书的差异，体会到深度学习案例和看书的差异</li><li>不要相信自己看会了，不要相信自己的记忆能力</li><li>为什么你有知识但是没有能力：<a href="https://t.zsxq.com/0cfBnpmLw" target="_blank" rel="noopener">https://t.zsxq.com/0cfBnpmLw</a></li><li>养成记笔记，然后总结输出的习惯</li><li>必看专栏一定要高优先级先看</li></ul><p>最好能有自己的总结输出，比如博客文章，写文章是一次最好的总结，不一定要发出来，也不一定一次写完美了，我经常修改7、8年前的文章，因为随着经验的丰富有了更深入、不同的理解，这时不要写一篇新的，我都是在原来的基础上修改、扩充，这才是体系建设</p><h2 id="成长案例"><a href="#成长案例" class="headerlink" title="成长案例"></a>成长案例</h2><p>这是大学刚毕业几个月的新同学写的博客：<a href="https://yishenggong.com/2023/05/06/why-does-my-network-speed-drop-cn" target="_blank" rel="noopener">https://yishenggong.com/2023/05/06/why-does-my-network-speed-drop-cn/</a> </p><p><a href="https://yishenggong.com/2023/05/22/is-20m-of-rows-still-a-valid-soft-limit-of-mysql-table-in-2023" target="_blank" rel="noopener">https://yishenggong.com/2023/05/22/is-20m-of-rows-still-a-valid-soft-limit-of-mysql-table-in-2023/</a> 你可以比较他加入星球前后的博客文章(20230315 加入星球), 第二篇是英文版上了hacker news前三</p><p>我观察到的学员成长好习惯：</p><ul><li>动手动手，不论事情大小先干起来；</li><li>有自己的节奏，不贪多先把一篇文章、一个知识点薅扎实了</li></ul><h2 id="欢迎在星球里提问"><a href="#欢迎在星球里提问" class="headerlink" title="欢迎在星球里提问"></a>欢迎在星球里提问</h2><p>欢迎大家提问，越具体越好</p><p>比如这个问题就很具体、很好： <a href="https://t.zsxq.com/0enzptS47" target="_blank" rel="noopener">https://t.zsxq.com/0enzptS47</a> (千万不要微信上问，回答了也没有价值)</p><p>我自己一个人写写出来的东西难免自嗨，但是如果是你碰到的实际业务问题我觉得就更有代表性一些</p><p>提问肯定尽力要把问题描述具体，好重现，典型的就是之前 aws 流量降速导致MySQL QPS下降，提问的同学做得特别好的就是把这个问题自己反复分析后发现是网络流量被限速了，然后问题就很容易描述和重现，最后一大帮人帮忙分析问题，最后的结果大家都很开心学到了东西。问题在这里：<a href="https://articles.zsxq.com/id_iq5a872u8sux.html" target="_blank" rel="noopener">https://articles.zsxq.com/id_iq5a872u8sux.html</a> </p><p>你要是通过星球里的方法帮你解决了实际问题这是星球的最终目的，我当然最开心，如果你提了一个你工作中的问题大家一起帮你分析、讨论并最终解决了这就是最好的N对1的私教训练——觉得适合你的能力提升</p><p>我有时候绞尽脑汁写了文章然后大家不关心，有时候一个普通问题似乎大家都很嗨，我也喜欢能让你们很嗨的问题(即使我不懂也可以一起讨论)</p><h2 id="专栏介绍"><a href="#专栏介绍" class="headerlink" title="专栏介绍"></a>专栏介绍</h2><p>必看(一定要看的，我尽量控制必看的少)、实战案例(年度计划一定要分享和搞清楚的案例)、动手实验(做会一直是本星球的重要原则)、学习方法(磨刀不误砍柴工)，剩下的就是按类别分比较好理解</p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>星主自我介绍：<a href="https://t.zsxq.com/0c33AXrCi" target="_blank" rel="noopener">https://t.zsxq.com/0c33AXrCi</a></p><p>或者在推特找我：<a href="https://twitter.com/plantegg" target="_blank" rel="noopener">https://twitter.com/plantegg</a> </p><p>个人博客：<a href="https://plantegg.github.io/2022/01/01/%E4%B8%89%E4%B8%AA%E6%95%85%E4%BA%8B">https://plantegg.github.io/2022/01/01/%E4%B8%89%E4%B8%AA%E6%95%85%E4%BA%8B/</a> </p><p>博客存放在github，图多的文章会慢一些，可以刷新几次。 </p><p>建议大家多用PC版星球( <a href="https://wx.zsxq.com/" target="_blank" rel="noopener">https://wx.zsxq.com</a> )，第一次记住密码后也很方便，主要是打字看图更合适些</p><p>画图工具和素材：<a href="https://t.zsxq.com/0enaoOUBp" target="_blank" rel="noopener">https://t.zsxq.com/0enaoOUBp</a> </p><p>知识星球：<a href="https://t.zsxq.com/0cSFEUh2J" target="_blank" rel="noopener">https://t.zsxq.com/0cSFEUh2J</a> 或者看看星球的介绍：<a href="https://plantegg.github.io/2023/05/10/%E7%A8%8B%E5%BA%8F%E5%91%98%E6%A1%88%E4%BE%8B%E6%98%9F%E7%90%83%E4%BB%8B%E7%BB%8D/">https://plantegg.github.io/2023/05/10/%E7%A8%8B%E5%BA%8F%E5%91%98%E6%A1%88%E4%BE%8B%E6%98%9F%E7%90%83%E4%BB%8B%E7%BB%8D/</a> </p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20240324161113874.png" alt="image-20240324161113874"></p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20230407232314969.png" alt="image-20230407232314969" style="zoom:50%;">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;必读-成长路径&quot;&gt;&lt;a href=&quot;#必读-成长路径&quot; class=&quot;headerlink&quot; title=&quot;必读 成长路径&quot;&gt;&lt;/a&gt;必读 成长路径&lt;/h1&gt;&lt;p&gt;我的&lt;a href=&quot;https://plantegg.github.io/2023/05/10/%
      
    
    </summary>
    
      <category term="others" scheme="https://plantegg.github.io/categories/others/"/>
    
    
      <category term="星球" scheme="https://plantegg.github.io/tags/%E6%98%9F%E7%90%83/"/>
    
  </entry>
  
  <entry>
    <title>保险</title>
    <link href="https://plantegg.github.io/2024/01/18/%E4%BF%9D%E9%99%A9/"/>
    <id>https://plantegg.github.io/2024/01/18/保险/</id>
    <published>2024-01-18T04:30:03.000Z</published>
    <updated>2024-10-21T08:58:45.456Z</updated>
    
    <content type="html"><![CDATA[<h2 id="保险"><a href="#保险" class="headerlink" title="保险"></a>保险</h2><h2 id="我的观点"><a href="#我的观点" class="headerlink" title="我的观点"></a>我的观点</h2><ol><li>不推荐任何理财型保险(你简单认为一年保费过万的都不推荐)</li><li>推荐少量消费型的保险(就是那种几乎没人给你推销，一年几百、几千的保费，没事不返还任何钱给你)</li><li>不推荐重疾险，回报率低</li><li>资源有限就优先给家庭主要收入来源的人买保险，很多人一上来给小孩买，中年男人裸奔，这搞错了</li><li>最实惠的保险是相互宝那种，可惜被获利阶层伙同傻逼们干没了</li></ol><h2 id="理由"><a href="#理由" class="headerlink" title="理由"></a>理由</h2><p>基本逻辑：保险是保意外的，你想赚钱就去买房子、股票、基金、做生意(不是说这几年哈)。消费型的保险(比如人身意外伤害险、车险都算)才是保意外，以小博大，当然也是保的小概率。</p><p>任何一个保险扣除运营费用就是返还率，相互宝运营费用10%-8%，大多人没概念，这是极低了，没有营销成本，10%用在理赔的时候调查考证。但是一个理财型的保险20-30% 给一线销售，这就是为什么这些保险人反复、耐心跟你讲要买保险，为你服务，当然这是成本，值不值你自己考虑；这还没完，还有上级、经理、公司的运营工资等，要不保险公司凭什么养那么多领导家属；所以这是保险公司核心收入来源，也必然导致了价格奇高。</p><p>理赔很复杂，没事的时候当然好，真要理赔各种你没想到的事前告知，你连我这几百字都不愿意看，保险公司那条款你就更不愿意看了。所以我推荐意外险，死了就陪那种简单些，越复杂的你越搞不懂。卖保险的人是不会跟你说那么清晰的，实际上他自己都搞不清楚，真到了出险才是真正的考验！</p><h3 id="一家三口，只买一份保险，假设预算一年5000的话，给谁买？"><a href="#一家三口，只买一份保险，假设预算一年5000的话，给谁买？" class="headerlink" title="一家三口，只买一份保险，假设预算一年5000的话，给谁买？"></a>一家三口，只买一份保险，假设预算一年5000的话，给谁买？</h3><p>肯定是给创造家里主要收入来源那人，保险其实是给活人的福利，你给小朋友买，妈妈挂了，他惨不惨？收入一下子也没了，保险能给他生活费、学费？</p><p>如果给妈妈买，你看至少保额还可以供他几年。现在的父母觉得自己有爱、爱娃，当然是给小朋友买，所以我说是错的</p><p>你别拿有钱人人都买来扛哈。</p><h3 id="为什么不推荐重疾险"><a href="#为什么不推荐重疾险" class="headerlink" title="为什么不推荐重疾险"></a>为什么不推荐重疾险</h3><p>重疾险本来是挺好的，出险直接给钱，是医保外的补充，正如我上面所说赔付率太低了，你还不如把保费存起来，赌概率。</p><h3 id="买一年几百的意外险其实是能嫖到一年几万保费的人为你提供服务的"><a href="#买一年几百的意外险其实是能嫖到一年几万保费的人为你提供服务的" class="headerlink" title="买一年几百的意外险其实是能嫖到一年几万保费的人为你提供服务的"></a>买一年几百的意外险其实是能嫖到一年几万保费的人为你提供服务的</h3><p>这个自己想想</p><p>保险大家都需要，都希望有，但是保险行业是最需要革命和精简的，比银行还夸张，所以我不会花太多钱补贴这帮蛀得太厉害的蛀虫</p><h1 id="个人所得税综合汇算"><a href="#个人所得税综合汇算" class="headerlink" title="个人所得税综合汇算"></a>个人所得税综合汇算</h1><p>昨天晚上Review个税到很晚，**终于找不回来70%**，这里确实有需要补税的地方；但是还有一些抵扣给我漏了；</p><p>我这次多算主要有一个<strong>2022年的bug</strong>，这个bug导致当时要退我几万税(系统自动自己算Bug)，我大喜<strong>装糊涂</strong>，各种配合税务局提交资料，最后税务局人工Review的时候发现了这个bug，当然钱也不会退我，不过打电话跟我解释了，我也装糊涂就过去了 </p><p>结果今年这Bug确实修复了，但是他娘的修复过头了，导致我多补70%的税，现在我只需要补30%，开心多了，这30% 是预期内的 </p><p>毕竟我从2019年对个税申报太熟悉了，如图是我研究后的一些经验 </p><p><strong>几个省税的点:</strong> </p><p>1）大部分情况下奖金、工资分开计税税更少，<strong>有极小概率合并计税缴税少</strong>（比如工资低奖金高、比如奖金落在盲区的话合，因为利用了工资税扣减数不用除12） </p><p>2） 目前奖金、工资可以合并也可以单独计税，二选一，默认单独计税——不懂就<strong>在个税app上申报的时候两种都试试，哪种缴税少就用哪种</strong> </p><p>3） <strong>股票比年终奖少扣税</strong>，同样100万，股票收入到手比年终奖多了17万(因为股票税没有盲区） </p><p>最后附送一个案例(如图)，100万年终奖和100万股票收入的差别，同时100万年终奖跟工资合并计税税更少; 同时如果100万年终奖采用合并计税也比单独计税拿到手要多 </p><p>目前一个人有机会将税率做得比较低，就是把收入分成3份：工资、将近、股票，<strong>算下来几乎可以按综合年入的30%以内缴税(<strong>高管个税有其它优惠我粉丝都是屌丝就不展开了，很多高管缴税可能比你少——比如去成都、天津，现在多了海南</strong>)</strong> </p><p>另外因为2023年8月才出通知提高23年的附加抵扣额度，所以<strong>今年几乎每个人都要退税</strong>，如果没有退就好好Review以下，已经提交了的还<strong>可以重新退回来重新算</strong>；<strong>2022年、2021年算错了的现在还可以申请要回来！</strong> 现在打开个税APP 去Review，如果有找补回来记得给我发红包。如果你今年退税了辛苦评论区说下让我开心开心</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;保险&quot;&gt;&lt;a href=&quot;#保险&quot; class=&quot;headerlink&quot; title=&quot;保险&quot;&gt;&lt;/a&gt;保险&lt;/h2&gt;&lt;h2 id=&quot;我的观点&quot;&gt;&lt;a href=&quot;#我的观点&quot; class=&quot;headerlink&quot; title=&quot;我的观点&quot;&gt;&lt;/a&gt;我的观点&lt;/h
      
    
    </summary>
    
      <category term="技巧" scheme="https://plantegg.github.io/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="保险" scheme="https://plantegg.github.io/tags/%E4%BF%9D%E9%99%A9/"/>
    
  </entry>
  
  <entry>
    <title>几款不同的CPU一些数据--备查</title>
    <link href="https://plantegg.github.io/2023/12/23/%E5%87%A0%E6%AC%BE%E4%B8%8D%E5%90%8C%E7%9A%84CPU%E4%B8%80%E4%BA%9B%E6%95%B0%E6%8D%AE--%E5%A4%87%E6%9F%A5/"/>
    <id>https://plantegg.github.io/2023/12/23/几款不同的CPU一些数据--备查/</id>
    <published>2023-12-23T09:30:03.000Z</published>
    <updated>2024-11-20T10:00:55.142Z</updated>
    
    <content type="html"><![CDATA[<h1 id="几款不同的CPU一些数据–备查"><a href="#几款不同的CPU一些数据–备查" class="headerlink" title="几款不同的CPU一些数据–备查"></a>几款不同的CPU一些数据–备查</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>方便大家对不同的CPU混个脸熟，有个整体概念。本来发布在知识星球，但是知识星球上格式看起来太影响阅读效率了，所以特意拿出来发到博客上</p><p>简单查看CPU我一般用 lscpu(默认自带) 命令，或者用复杂点的工具：hwloc 工具安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install hwloc -y</span><br></pre></td></tr></table></figure><p>安装后生成结构图片命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lstopo --logical --output-format png &gt; kunpeng_920.png</span><br></pre></td></tr></table></figure><p>生成字符结构，不要图片：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lstopo-no-graphics</span><br></pre></td></tr></table></figure><p>后面展示的都算是整体机构，所以还会附带有内存怎么接(一个多少条，每条多大，一个Numa node插了几个物理内存条)，这些我博客上都有，就不展开了。一般都是对称的(每个node、socket对称，不对称肯定发挥不出来好性能)</p><h2 id="intel-E5-2682"><a href="#intel-E5-2682" class="headerlink" title="intel E5 2682"></a>intel E5 2682</h2><p>大概是Intel 2012年的主流服务器CPU</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line">#lscpu</span><br><span class="line">Architecture:          x86_64</span><br><span class="line">CPU op-mode(s):        32-bit, 64-bit</span><br><span class="line">Byte Order:            Little Endian</span><br><span class="line">CPU(s):                64 //整机总共64核，实际是由32个物理核通过超线程得来</span><br><span class="line">On-line CPU(s) list:   0-63</span><br><span class="line">Thread(s) per core:    2 //一个物理核2个超线程</span><br><span class="line">Core(s) per socket:    16 //每块CPU有16个物理核</span><br><span class="line">Socket(s):             2 //两路，两块物理上能买到的CPU</span><br><span class="line">NUMA node(s):          2</span><br><span class="line">Vendor ID:             GenuineIntel</span><br><span class="line">CPU family:            6</span><br><span class="line">Model:                 79</span><br><span class="line">Model name:            Intel(R) Xeon(R) CPU E5-2682 v4 @ 2.50GHz</span><br><span class="line">Stepping:              1</span><br><span class="line">CPU MHz:               2499.902</span><br><span class="line">CPU max MHz:           3000.0000</span><br><span class="line">CPU min MHz:           1200.0000</span><br><span class="line">BogoMIPS:              4999.76</span><br><span class="line">Virtualization:        VT-x</span><br><span class="line">L1d cache:             32K //L1 data</span><br><span class="line">L1i cache:             32K</span><br><span class="line">L2 cache:              256K</span><br><span class="line">L3 cache:              40960K //40M L3,也有人叫 LLC(last level cache), L3是一个socket下所有核共享</span><br><span class="line">NUMA node0 CPU(s):     0-15,32-47  //node0</span><br><span class="line">NUMA node1 CPU(s):     16-31,48-63 //node1</span><br><span class="line"></span><br><span class="line">//进一步详细看看CPU的结构</span><br><span class="line">#lstopo-no-graphics </span><br><span class="line">Machine (512GB) //机器总共512G内存</span><br><span class="line">  NUMANode L#0 (P#0 256GB) //两路，共两个Numa Node，第一个Node 256G内存</span><br><span class="line">    Socket L#0 + L3 L#0 (40MB) //Node 0的 L3 40MB，32个逻辑核共享</span><br><span class="line">      //第一个物理核，每一个物理核都有自己的L2(256KB)和 L1(32KB+32KB), L1分数据、指令两部分</span><br><span class="line">      L2 L#0 (256KB) + L1d L#0 (32KB) + L1i L#0 (32KB) + Core L#0 </span><br><span class="line">        PU L#0 (P#0)  //第一个逻辑核</span><br><span class="line">        PU L#1 (P#32) //第二个逻辑核，这两逻辑核实际是同一个物理核，第二个逻辑核编号是32</span><br><span class="line"></span><br><span class="line">      //以下是第二个物理核，都是一样的结构……</span><br><span class="line">      L2 L#1 (256KB) + L1d L#1 (32KB) + L1i L#1 (32KB) + Core L#1</span><br><span class="line">        PU L#2 (P#1)</span><br><span class="line">        PU L#3 (P#33)</span><br><span class="line">      L2 L#2 (256KB) + L1d L#2 (32KB) + L1i L#2 (32KB) + Core L#2</span><br><span class="line">        PU L#4 (P#2)</span><br><span class="line">        PU L#5 (P#34)</span><br><span class="line">      L2 L#3 (256KB) + L1d L#3 (32KB) + L1i L#3 (32KB) + Core L#3</span><br><span class="line">        PU L#6 (P#3)</span><br><span class="line">        PU L#7 (P#35)</span><br><span class="line">      L2 L#4 (256KB) + L1d L#4 (32KB) + L1i L#4 (32KB) + Core L#4</span><br><span class="line">        PU L#8 (P#4)</span><br><span class="line">        PU L#9 (P#36)</span><br><span class="line">      L2 L#5 (256KB) + L1d L#5 (32KB) + L1i L#5 (32KB) + Core L#5</span><br><span class="line">        PU L#10 (P#5)</span><br><span class="line">        PU L#11 (P#37)</span><br><span class="line">      L2 L#6 (256KB) + L1d L#6 (32KB) + L1i L#6 (32KB) + Core L#6</span><br><span class="line">        PU L#12 (P#6)</span><br><span class="line">        PU L#13 (P#38)</span><br><span class="line">      L2 L#7 (256KB) + L1d L#7 (32KB) + L1i L#7 (32KB) + Core L#7</span><br><span class="line">        PU L#14 (P#7)</span><br><span class="line">        PU L#15 (P#39)</span><br><span class="line">      L2 L#8 (256KB) + L1d L#8 (32KB) + L1i L#8 (32KB) + Core L#8</span><br><span class="line">        PU L#16 (P#8)</span><br><span class="line">        PU L#17 (P#40)</span><br><span class="line">      L2 L#9 (256KB) + L1d L#9 (32KB) + L1i L#9 (32KB) + Core L#9</span><br><span class="line">        PU L#18 (P#9)</span><br><span class="line">        PU L#19 (P#41)</span><br><span class="line">      L2 L#10 (256KB) + L1d L#10 (32KB) + L1i L#10 (32KB) + Core L#10</span><br><span class="line">        PU L#20 (P#10)</span><br><span class="line">        PU L#21 (P#42)</span><br><span class="line">      L2 L#11 (256KB) + L1d L#11 (32KB) + L1i L#11 (32KB) + Core L#11</span><br><span class="line">        PU L#22 (P#11)</span><br><span class="line">        PU L#23 (P#43)</span><br><span class="line">      L2 L#12 (256KB) + L1d L#12 (32KB) + L1i L#12 (32KB) + Core L#12</span><br><span class="line">        PU L#24 (P#12)</span><br><span class="line">        PU L#25 (P#44)</span><br><span class="line">      L2 L#13 (256KB) + L1d L#13 (32KB) + L1i L#13 (32KB) + Core L#13</span><br><span class="line">        PU L#26 (P#13)</span><br><span class="line">        PU L#27 (P#45)</span><br><span class="line">      L2 L#14 (256KB) + L1d L#14 (32KB) + L1i L#14 (32KB) + Core L#14</span><br><span class="line">        PU L#28 (P#14)</span><br><span class="line">        PU L#29 (P#46)</span><br><span class="line">      L2 L#15 (256KB) + L1d L#15 (32KB) + L1i L#15 (32KB) + Core L#15</span><br><span class="line">        PU L#30 (P#15)</span><br><span class="line">        PU L#31 (P#47)</span><br><span class="line">    HostBridge L#0</span><br><span class="line">      PCIBridge</span><br><span class="line">        PCI 144d:a804</span><br><span class="line">      PCIBridge</span><br><span class="line">        PCI 8086:10fb</span><br><span class="line">          Net L#0 &quot;eth2&quot; //两块PCI 万兆网卡插在Socket0上，所有Socket0上的core访问网络效率更高</span><br><span class="line">        PCI 8086:10fb</span><br><span class="line">          Net L#1 &quot;eth3&quot;</span><br><span class="line">      PCIBridge</span><br><span class="line">        PCIBridge</span><br><span class="line">          PCI 1a03:2000</span><br><span class="line">            GPU L#2 &quot;card0&quot;</span><br><span class="line">            GPU L#3 &quot;controlD64&quot;</span><br><span class="line">      PCI 8086:8d02</span><br><span class="line">        Block L#4 &quot;sda&quot; //sda硬盘</span><br><span class="line">  NUMANode L#1 (P#1 256GB) //第二路，也就是第二个Node，内存、cache、核都是对称的</span><br><span class="line">    Socket L#1 + L3 L#1 (40MB)</span><br><span class="line">      L2 L#16 (256KB) + L1d L#16 (32KB) + L1i L#16 (32KB) + Core L#16</span><br><span class="line">        PU L#32 (P#16)</span><br><span class="line">        PU L#33 (P#48)</span><br><span class="line">      L2 L#17 (256KB) + L1d L#17 (32KB) + L1i L#17 (32KB) + Core L#17</span><br><span class="line">        PU L#34 (P#17)</span><br><span class="line">        PU L#35 (P#49)</span><br><span class="line">      L2 L#18 (256KB) + L1d L#18 (32KB) + L1i L#18 (32KB) + Core L#18</span><br><span class="line">        PU L#36 (P#18)</span><br><span class="line">        PU L#37 (P#50)</span><br><span class="line">      L2 L#19 (256KB) + L1d L#19 (32KB) + L1i L#19 (32KB) + Core L#19</span><br><span class="line">        PU L#38 (P#19)</span><br><span class="line">        PU L#39 (P#51)</span><br><span class="line">      L2 L#20 (256KB) + L1d L#20 (32KB) + L1i L#20 (32KB) + Core L#20</span><br><span class="line">        PU L#40 (P#20)</span><br><span class="line">        PU L#41 (P#52)</span><br><span class="line">      L2 L#21 (256KB) + L1d L#21 (32KB) + L1i L#21 (32KB) + Core L#21</span><br><span class="line">        PU L#42 (P#21)</span><br><span class="line">        PU L#43 (P#53)</span><br><span class="line">      L2 L#22 (256KB) + L1d L#22 (32KB) + L1i L#22 (32KB) + Core L#22</span><br><span class="line">        PU L#44 (P#22)</span><br><span class="line">        PU L#45 (P#54)</span><br><span class="line">      L2 L#23 (256KB) + L1d L#23 (32KB) + L1i L#23 (32KB) + Core L#23</span><br><span class="line">        PU L#46 (P#23)</span><br><span class="line">        PU L#47 (P#55)</span><br><span class="line">      L2 L#24 (256KB) + L1d L#24 (32KB) + L1i L#24 (32KB) + Core L#24</span><br><span class="line">        PU L#48 (P#24)</span><br><span class="line">        PU L#49 (P#56)</span><br><span class="line">      L2 L#25 (256KB) + L1d L#25 (32KB) + L1i L#25 (32KB) + Core L#25</span><br><span class="line">        PU L#50 (P#25)</span><br><span class="line">        PU L#51 (P#57)</span><br><span class="line">      L2 L#26 (256KB) + L1d L#26 (32KB) + L1i L#26 (32KB) + Core L#26</span><br><span class="line">        PU L#52 (P#26)</span><br><span class="line">        PU L#53 (P#58)</span><br><span class="line">      L2 L#27 (256KB) + L1d L#27 (32KB) + L1i L#27 (32KB) + Core L#27</span><br><span class="line">        PU L#54 (P#27)</span><br><span class="line">        PU L#55 (P#59)</span><br><span class="line">      L2 L#28 (256KB) + L1d L#28 (32KB) + L1i L#28 (32KB) + Core L#28</span><br><span class="line">        PU L#56 (P#28)</span><br><span class="line">        PU L#57 (P#60)</span><br><span class="line">      L2 L#29 (256KB) + L1d L#29 (32KB) + L1i L#29 (32KB) + Core L#29</span><br><span class="line">        PU L#58 (P#29)</span><br><span class="line">        PU L#59 (P#61)</span><br><span class="line">      L2 L#30 (256KB) + L1d L#30 (32KB) + L1i L#30 (32KB) + Core L#30</span><br><span class="line">        PU L#60 (P#30)</span><br><span class="line">        PU L#61 (P#62)</span><br><span class="line">      L2 L#31 (256KB) + L1d L#31 (32KB) + L1i L#31 (32KB) + Core L#31</span><br><span class="line">        PU L#62 (P#31)</span><br><span class="line">        PU L#63 (P#63)</span><br><span class="line">    HostBridge L#5</span><br><span class="line">      PCIBridge</span><br><span class="line">        PCI 8086:1521</span><br><span class="line">          Net L#5 &quot;enp130s0f0&quot; //两块PCI 千兆网卡</span><br><span class="line">        PCI 8086:1521</span><br><span class="line">          Net L#6 &quot;enp130s0f1&quot;</span><br><span class="line">      PCIBridge</span><br><span class="line">        PCI 144d:a804</span><br><span class="line">      PCIBridge</span><br><span class="line">        PCI 144d:a804</span><br></pre></td></tr></table></figure><p>intel 还有一个自带的工具：cpuid-topo 可以看结构，以下是其中一个Socket的展示</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/FnS99B0Zq6MFk3q3iXvU2O2tY4pp.png" alt="img"></p><h2 id="海光"><a href="#海光" class="headerlink" title="海光"></a>海光</h2><p>购买的AMD版权设计等搞出来国产的 x86 架构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#lscpu</span><br><span class="line">Architecture:        x86_64</span><br><span class="line">CPU op-mode(s):      32-bit, 64-bit</span><br><span class="line">Byte Order:          Little Endian</span><br><span class="line">Address sizes:       43 bits physical, 48 bits virtual</span><br><span class="line">CPU(s):              48</span><br><span class="line">On-line CPU(s) list: 0-47</span><br><span class="line">Thread(s) per core:  1 //我故意把超线程关掉了</span><br><span class="line">Core(s) per socket:  24</span><br><span class="line">Socket(s):           2</span><br><span class="line">NUMA node(s):        8</span><br><span class="line">Vendor ID:           HygonGenuine</span><br><span class="line">CPU family:          24</span><br><span class="line">Model:               1</span><br><span class="line">Model name:          Hygon C86 7260 24-core Processor</span><br><span class="line">Stepping:            1</span><br><span class="line">Frequency boost:     enabled</span><br><span class="line">CPU MHz:             1070.950</span><br><span class="line">CPU max MHz:         2200.0000</span><br><span class="line">CPU min MHz:         1200.0000</span><br><span class="line">BogoMIPS:            4399.54</span><br><span class="line">Virtualization:      AMD-V</span><br><span class="line">L1d cache:           1.5 MiB //好大，不符合逻辑，后面解释</span><br><span class="line">L1i cache:           3 MiB</span><br><span class="line">L2 cache:            24 MiB  //48个物理核总共24MB L2，但是每个物理核只能用自己的512KB</span><br><span class="line">L3 cache:            128 MiB // </span><br><span class="line">NUMA node0 CPU(s):   0-5</span><br><span class="line">NUMA node1 CPU(s):   6-11</span><br><span class="line">NUMA node2 CPU(s):   12-17</span><br><span class="line">NUMA node3 CPU(s):   18-23</span><br><span class="line">NUMA node4 CPU(s):   24-29</span><br><span class="line">NUMA node5 CPU(s):   30-35</span><br><span class="line">NUMA node6 CPU(s):   36-41</span><br><span class="line">NUMA node7 CPU(s):   42-47 //搞了8个Numa Node</span><br></pre></td></tr></table></figure><p>L1、L2太大了，好吓人，这么大不符合逻辑(太贵，没必要)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//继续看看L2 为啥这么大</span><br><span class="line">#cd /sys/devices/system/cpu/cpu0</span><br><span class="line"></span><br><span class="line">#ls cache/index2/</span><br><span class="line">coherency_line_size      number_of_sets           shared_cpu_list          type</span><br><span class="line">id                       physical_line_partition  shared_cpu_map           uevent</span><br><span class="line">level                    power/                   size                     ways_of_associativity</span><br><span class="line"></span><br><span class="line">#cat cache/index2/size</span><br><span class="line">512K  //实际是512K， 2M是4个核共享，搞了个花活，但每个核只能用自己的512K</span><br><span class="line"></span><br><span class="line">#cat cache/index2/shared_cpu_list</span><br><span class="line">0  //确认 L2只有自己用</span><br><span class="line"></span><br><span class="line">#cat cache/index3/shared_cpu_list</span><br><span class="line">0-2 //L3 给0-2这3个物理核共享，一个Die下有6个物理核，每三个共享一个8M的L3</span><br><span class="line"></span><br><span class="line">#cat cache/index3/size</span><br><span class="line">8192K //3个物理核共享8M L3</span><br><span class="line"></span><br><span class="line">#cat cache/index1/size</span><br><span class="line">64K</span><br><span class="line"></span><br><span class="line">#cat cache/index0/size</span><br><span class="line">32K</span><br></pre></td></tr></table></figure><p>index0&#x2F;index1 分别代表啥？</p><p>海光为啥搞了8个Node，请看：<a href="https://plantegg.github.io/2021/03/08/%E6%B5%B7%E5%85%89CPU/">https://plantegg.github.io/2021/03/08/%E6%B5%B7%E5%85%89CPU/</a></p><p>图片可以看高清大图</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/Fnv-AneATqzhd3NYlhXEupxJafLF.png" alt="img"></p><p>对应的字符结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">#lstopo</span><br><span class="line">Machine (504GB total)</span><br><span class="line">  Package L#0</span><br><span class="line">    NUMANode L#0 (P#0 63GB)</span><br><span class="line">      L3 L#0 (8192KB)</span><br><span class="line">        L2 L#0 (512KB) + L1d L#0 (32KB) + L1i L#0 (64KB) + Core L#0 + PU L#0 (P#0)</span><br><span class="line">        L2 L#1 (512KB) + L1d L#1 (32KB) + L1i L#1 (64KB) + Core L#1 + PU L#1 (P#1)</span><br><span class="line">        L2 L#2 (512KB) + L1d L#2 (32KB) + L1i L#2 (64KB) + Core L#2 + PU L#2 (P#2)</span><br><span class="line">      L3 L#1 (8192KB)</span><br><span class="line">        L2 L#3 (512KB) + L1d L#3 (32KB) + L1i L#3 (64KB) + Core L#3 + PU L#3 (P#3)</span><br><span class="line">        L2 L#4 (512KB) + L1d L#4 (32KB) + L1i L#4 (64KB) + Core L#4 + PU L#4 (P#4)</span><br><span class="line">        L2 L#5 (512KB) + L1d L#5 (32KB) + L1i L#5 (64KB) + Core L#5 + PU L#5 (P#5)</span><br><span class="line">      HostBridge L#0</span><br><span class="line">        PCIBridge</span><br><span class="line">          PCIBridge</span><br><span class="line">            PCI 1a03:2000</span><br><span class="line">              GPU L#0 &quot;controlD64&quot;</span><br><span class="line">              GPU L#1 &quot;card0&quot;</span><br><span class="line">        PCIBridge</span><br><span class="line">          PCI 1d94:7901</span><br><span class="line">            Block(Disk) L#2 &quot;sda&quot;</span><br><span class="line">    NUMANode L#1 (P#1 63GB)</span><br><span class="line">      L3 L#2 (8192KB)</span><br><span class="line">        L2 L#6 (512KB) + L1d L#6 (32KB) + L1i L#6 (64KB) + Core L#6 + PU L#6 (P#6)</span><br><span class="line">        L2 L#7 (512KB) + L1d L#7 (32KB) + L1i L#7 (64KB) + Core L#7 + PU L#7 (P#7)</span><br><span class="line">        L2 L#8 (512KB) + L1d L#8 (32KB) + L1i L#8 (64KB) + Core L#8 + PU L#8 (P#8)</span><br><span class="line">      L3 L#3 (8192KB)</span><br><span class="line">        L2 L#9 (512KB) + L1d L#9 (32KB) + L1i L#9 (64KB) + Core L#9 + PU L#9 (P#9)</span><br><span class="line">        L2 L#10 (512KB) + L1d L#10 (32KB) + L1i L#10 (64KB) + Core L#10 + PU L#10 (P#10)</span><br><span class="line">        L2 L#11 (512KB) + L1d L#11 (32KB) + L1i L#11 (64KB) + Core L#11 + PU L#11 (P#11)</span><br><span class="line">      HostBridge L#4</span><br><span class="line">        PCIBridge</span><br><span class="line">          PCI 1c5f:0557</span><br><span class="line">            Block(Disk) L#3 &quot;nvme0n1&quot;</span><br><span class="line">        PCIBridge</span><br><span class="line">          PCI 1c5f:0557</span><br><span class="line">            Block(Disk) L#4 &quot;nvme1n1&quot;</span><br><span class="line">    NUMANode L#2 (P#2 63GB)</span><br><span class="line">      L3 L#4 (8192KB)</span><br><span class="line">        L2 L#12 (512KB) + L1d L#12 (32KB) + L1i L#12 (64KB) + Core L#12 + PU L#12 (P#12)</span><br><span class="line">        L2 L#13 (512KB) + L1d L#13 (32KB) + L1i L#13 (64KB) + Core L#13 + PU L#13 (P#13)</span><br><span class="line">        L2 L#14 (512KB) + L1d L#14 (32KB) + L1i L#14 (64KB) + Core L#14 + PU L#14 (P#14)</span><br><span class="line">      L3 L#5 (8192KB)</span><br><span class="line">        L2 L#15 (512KB) + L1d L#15 (32KB) + L1i L#15 (64KB) + Core L#15 + PU L#15 (P#15)</span><br><span class="line">        L2 L#16 (512KB) + L1d L#16 (32KB) + L1i L#16 (64KB) + Core L#16 + PU L#16 (P#16)</span><br><span class="line">        L2 L#17 (512KB) + L1d L#17 (32KB) + L1i L#17 (64KB) + Core L#17 + PU L#17 (P#17)</span><br><span class="line">      HostBridge L#7</span><br><span class="line">        PCIBridge</span><br><span class="line">          PCI 15b3:1015</span><br><span class="line">            Net L#5 &quot;enp33s0f0&quot;</span><br><span class="line">            OpenFabrics L#6 &quot;mlx5_0&quot;</span><br><span class="line">          PCI 15b3:1015</span><br><span class="line">            Net L#7 &quot;enp33s0f1&quot;</span><br><span class="line">            OpenFabrics L#8 &quot;mlx5_1&quot;</span><br><span class="line">    NUMANode L#3 (P#3 63GB)</span><br><span class="line">      L3 L#6 (8192KB)</span><br><span class="line">        L2 L#18 (512KB) + L1d L#18 (32KB) + L1i L#18 (64KB) + Core L#18 + PU L#18 (P#18)</span><br><span class="line">        L2 L#19 (512KB) + L1d L#19 (32KB) + L1i L#19 (64KB) + Core L#19 + PU L#19 (P#19)</span><br><span class="line">        L2 L#20 (512KB) + L1d L#20 (32KB) + L1i L#20 (64KB) + Core L#20 + PU L#20 (P#20)</span><br><span class="line">      L3 L#7 (8192KB)</span><br><span class="line">        L2 L#21 (512KB) + L1d L#21 (32KB) + L1i L#21 (64KB) + Core L#21 + PU L#21 (P#21)</span><br><span class="line">        L2 L#22 (512KB) + L1d L#22 (32KB) + L1i L#22 (64KB) + Core L#22 + PU L#22 (P#22)</span><br><span class="line">        L2 L#23 (512KB) + L1d L#23 (32KB) + L1i L#23 (64KB) + Core L#23 + PU L#23 (P#23)</span><br><span class="line">      HostBridge L#9</span><br><span class="line">        PCIBridge</span><br><span class="line">          PCI 8086:1521</span><br><span class="line">            Net L#9 &quot;eno1&quot;</span><br><span class="line">          PCI 8086:1521</span><br><span class="line">            Net L#10 &quot;eno2&quot;</span><br><span class="line">  Package L#1</span><br><span class="line">    NUMANode L#4 (P#4 63GB)</span><br><span class="line">      L3 L#8 (8192KB)</span><br><span class="line">        L2 L#24 (512KB) + L1d L#24 (32KB) + L1i L#24 (64KB) + Core L#24 + PU L#24 (P#24)</span><br><span class="line">        L2 L#25 (512KB) + L1d L#25 (32KB) + L1i L#25 (64KB) + Core L#25 + PU L#25 (P#25)</span><br><span class="line">        L2 L#26 (512KB) + L1d L#26 (32KB) + L1i L#26 (64KB) + Core L#26 + PU L#26 (P#26)</span><br><span class="line">      L3 L#9 (8192KB)</span><br><span class="line">        L2 L#27 (512KB) + L1d L#27 (32KB) + L1i L#27 (64KB) + Core L#27 + PU L#27 (P#27)</span><br><span class="line">        L2 L#28 (512KB) + L1d L#28 (32KB) + L1i L#28 (64KB) + Core L#28 + PU L#28 (P#28)</span><br><span class="line">        L2 L#29 (512KB) + L1d L#29 (32KB) + L1i L#29 (64KB) + Core L#29 + PU L#29 (P#29)</span><br><span class="line">    NUMANode L#5 (P#5 63GB)</span><br><span class="line">      L3 L#10 (8192KB)</span><br><span class="line">        L2 L#30 (512KB) + L1d L#30 (32KB) + L1i L#30 (64KB) + Core L#30 + PU L#30 (P#30)</span><br><span class="line">        L2 L#31 (512KB) + L1d L#31 (32KB) + L1i L#31 (64KB) + Core L#31 + PU L#31 (P#31)</span><br><span class="line">        L2 L#32 (512KB) + L1d L#32 (32KB) + L1i L#32 (64KB) + Core L#32 + PU L#32 (P#32)</span><br><span class="line">      L3 L#11 (8192KB)</span><br><span class="line">        L2 L#33 (512KB) + L1d L#33 (32KB) + L1i L#33 (64KB) + Core L#33 + PU L#33 (P#33)</span><br><span class="line">        L2 L#34 (512KB) + L1d L#34 (32KB) + L1i L#34 (64KB) + Core L#34 + PU L#34 (P#34)</span><br><span class="line">        L2 L#35 (512KB) + L1d L#35 (32KB) + L1i L#35 (64KB) + Core L#35 + PU L#35 (P#35)</span><br><span class="line">      HostBridge L#11</span><br><span class="line">        PCIBridge</span><br><span class="line">          PCI 1d94:7901</span><br><span class="line">    NUMANode L#6 (P#6 63GB)</span><br><span class="line">      L3 L#12 (8192KB)</span><br><span class="line">        L2 L#36 (512KB) + L1d L#36 (32KB) + L1i L#36 (64KB) + Core L#36 + PU L#36 (P#36)</span><br><span class="line">        L2 L#37 (512KB) + L1d L#37 (32KB) + L1i L#37 (64KB) + Core L#37 + PU L#37 (P#37)</span><br><span class="line">        L2 L#38 (512KB) + L1d L#38 (32KB) + L1i L#38 (64KB) + Core L#38 + PU L#38 (P#38)</span><br><span class="line">      L3 L#13 (8192KB)</span><br><span class="line">        L2 L#39 (512KB) + L1d L#39 (32KB) + L1i L#39 (64KB) + Core L#39 + PU L#39 (P#39)</span><br><span class="line">        L2 L#40 (512KB) + L1d L#40 (32KB) + L1i L#40 (64KB) + Core L#40 + PU L#40 (P#40)</span><br><span class="line">        L2 L#41 (512KB) + L1d L#41 (32KB) + L1i L#41 (64KB) + Core L#41 + PU L#41 (P#41)</span><br><span class="line">    NUMANode L#7 (P#7 63GB)</span><br><span class="line">      L3 L#14 (8192KB)</span><br><span class="line">        L2 L#42 (512KB) + L1d L#42 (32KB) + L1i L#42 (64KB) + Core L#42 + PU L#42 (P#42)</span><br><span class="line">        L2 L#43 (512KB) + L1d L#43 (32KB) + L1i L#43 (64KB) + Core L#43 + PU L#43 (P#43)</span><br><span class="line">        L2 L#44 (512KB) + L1d L#44 (32KB) + L1i L#44 (64KB) + Core L#44 + PU L#44 (P#44)</span><br><span class="line">      L3 L#15 (8192KB)</span><br><span class="line">        L2 L#45 (512KB) + L1d L#45 (32KB) + L1i L#45 (64KB) + Core L#45 + PU L#45 (P#45)</span><br><span class="line">        L2 L#46 (512KB) + L1d L#46 (32KB) + L1i L#46 (64KB) + Core L#46 + PU L#46 (P#46)</span><br><span class="line">        L2 L#47 (512KB) + L1d L#47 (32KB) + L1i L#47 (64KB) + Core L#47 + PU L#47 (P#47)</span><br><span class="line">  Misc(MemoryModule)</span><br><span class="line">  Misc(MemoryModule)</span><br><span class="line">  Misc(MemoryModule)</span><br></pre></td></tr></table></figure><p>以上是海光的7260，还有一个CPU是海光 7280：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#lscpu</span><br><span class="line">Architecture:          x86_64</span><br><span class="line">CPU op-mode(s):        32-bit, 64-bit</span><br><span class="line">Byte Order:            Little Endian</span><br><span class="line">CPU(s):                128</span><br><span class="line">On-line CPU(s) list:   0-127</span><br><span class="line">Thread(s) per core:    2</span><br><span class="line">Core(s) per socket:    32</span><br><span class="line">Socket(s):             2</span><br><span class="line">NUMA node(s):          8</span><br><span class="line">Vendor ID:             HygonGenuine</span><br><span class="line">CPU family:            24</span><br><span class="line">Model:                 1</span><br><span class="line">Model name:            Hygon C86 7280 32-core Processor</span><br><span class="line">Stepping:              1</span><br><span class="line">CPU MHz:               1981.025</span><br><span class="line">CPU max MHz:           2000.0000</span><br><span class="line">CPU min MHz:           1200.0000</span><br><span class="line">BogoMIPS:              3999.55</span><br><span class="line">Virtualization:        AMD-V</span><br><span class="line">L1d cache:             32K</span><br><span class="line">L1i cache:             64K</span><br><span class="line">L2 cache:              512K</span><br><span class="line">L3 cache:              8192K</span><br><span class="line">NUMA node0 CPU(s):     0-7,64-71</span><br><span class="line">NUMA node1 CPU(s):     8-15,72-79</span><br><span class="line">NUMA node2 CPU(s):     16-23,80-87</span><br><span class="line">NUMA node3 CPU(s):     24-31,88-95</span><br><span class="line">NUMA node4 CPU(s):     32-39,96-103</span><br><span class="line">NUMA node5 CPU(s):     40-47,104-111</span><br><span class="line">NUMA node6 CPU(s):     48-55,112-119</span><br><span class="line">NUMA node7 CPU(s):     56-63,120-127</span><br></pre></td></tr></table></figure><p>作业：7260和7280的区别是？为什么搞了这两个差异很小的CPU？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//继续在7280上看看L3的大小和共享，能够识别他的Die设计理念</span><br><span class="line"></span><br><span class="line">//7280上 L3 由8个超线程，也就是4个物理核共享</span><br><span class="line">#cat cache/index3/shared_cpu_list</span><br><span class="line">0-3,64-67      //就这里核数不一样</span><br><span class="line">#cat cache/index3/size</span><br><span class="line">8192K          //L3大小和7260一样</span><br></pre></td></tr></table></figure><p>还记得7260是3个物理核共享一个8M的L3吧，计算机的世界大多是1、2、4、8，看到3我就觉得有些别扭。评论区告诉我为什么会搞出3个核这样一个奇葩设计？（星球图解专栏里有答案）</p><h2 id="AMD-7T83"><a href="#AMD-7T83" class="headerlink" title="AMD 7T83"></a>AMD 7T83</h2><p>整机256核，一路128超线程，单CPU 64个物理核，很猛了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br></pre></td><td class="code"><pre><span class="line">#lscpu</span><br><span class="line">Architecture:          x86_64</span><br><span class="line">CPU op-mode(s):        32-bit, 64-bit</span><br><span class="line">Byte Order:            Little Endian</span><br><span class="line">CPU(s):                256</span><br><span class="line">On-line CPU(s) list:   0-255</span><br><span class="line">Thread(s) per core:    2</span><br><span class="line">Core(s) per socket:    64</span><br><span class="line">Socket(s):             2</span><br><span class="line">NUMA node(s):          4</span><br><span class="line">Vendor ID:             AuthenticAMD</span><br><span class="line">CPU family:            25</span><br><span class="line">Model:                 1</span><br><span class="line">Model name:            AMD EPYC 7T83 64-Core Processor</span><br><span class="line">Stepping:              1</span><br><span class="line">CPU MHz:               1638.563    //主频有点低，估计还是核太多了</span><br><span class="line">CPU max MHz:           2550.0000</span><br><span class="line">CPU min MHz:           1500.0000</span><br><span class="line">BogoMIPS:              5090.06</span><br><span class="line">Virtualization:        AMD-V</span><br><span class="line">L1d cache:             32K</span><br><span class="line">L1i cache:             32K</span><br><span class="line">L2 cache:              512K</span><br><span class="line">L3 cache:              32768K</span><br><span class="line">NUMA node0 CPU(s):     0-31,128-159</span><br><span class="line">NUMA node1 CPU(s):     32-63,160-191</span><br><span class="line">NUMA node2 CPU(s):     64-95,192-223</span><br><span class="line">NUMA node3 CPU(s):     96-127,224-255 //这里展示的是4个Node，在Bios中可配置</span><br><span class="line"></span><br><span class="line">#lstopo-no-graphics</span><br><span class="line">Machine (2015GB) //2T 内存</span><br><span class="line">  Socket L#0 (1007GB) //单路 1T内存，一路下有两个Numa Node</span><br><span class="line">    NUMANode L#0 (P#0 503GB) //这个Node下有4块独立的L3 </span><br><span class="line">      L3 L#0 (32MB) //看起来16个超线程共享这一个L3，其实这16个核应该是一个独立的Node比较好</span><br><span class="line">        L2 L#0 (512KB) + L1d L#0 (32KB) + L1i L#0 (32KB) + Core L#0</span><br><span class="line">          PU L#0 (P#0)</span><br><span class="line">          PU L#1 (P#128)</span><br><span class="line">        L2 L#1 (512KB) + L1d L#1 (32KB) + L1i L#1 (32KB) + Core L#1</span><br><span class="line">          PU L#2 (P#1)</span><br><span class="line">          PU L#3 (P#129)</span><br><span class="line">        L2 L#2 (512KB) + L1d L#2 (32KB) + L1i L#2 (32KB) + Core L#2</span><br><span class="line">          PU L#4 (P#2)</span><br><span class="line">          PU L#5 (P#130)</span><br><span class="line">        L2 L#3 (512KB) + L1d L#3 (32KB) + L1i L#3 (32KB) + Core L#3</span><br><span class="line">          PU L#6 (P#3)</span><br><span class="line">          PU L#7 (P#131)</span><br><span class="line">        L2 L#4 (512KB) + L1d L#4 (32KB) + L1i L#4 (32KB) + Core L#4</span><br><span class="line">          PU L#8 (P#4)</span><br><span class="line">          PU L#9 (P#132)</span><br><span class="line">        L2 L#5 (512KB) + L1d L#5 (32KB) + L1i L#5 (32KB) + Core L#5</span><br><span class="line">          PU L#10 (P#5)</span><br><span class="line">          PU L#11 (P#133)</span><br><span class="line">        L2 L#6 (512KB) + L1d L#6 (32KB) + L1i L#6 (32KB) + Core L#6</span><br><span class="line">          PU L#12 (P#6)</span><br><span class="line">          PU L#13 (P#134)</span><br><span class="line">        L2 L#7 (512KB) + L1d L#7 (32KB) + L1i L#7 (32KB) + Core L#7</span><br><span class="line">          PU L#14 (P#7)</span><br><span class="line">          PU L#15 (P#135)</span><br><span class="line">      L3 L#1 (32MB)</span><br><span class="line">        L2 L#8 (512KB) + L1d L#8 (32KB) + L1i L#8 (32KB) + Core L#8</span><br><span class="line">          PU L#16 (P#8)</span><br><span class="line">          PU L#17 (P#136)</span><br><span class="line">        L2 L#9 (512KB) + L1d L#9 (32KB) + L1i L#9 (32KB) + Core L#9</span><br><span class="line">          PU L#18 (P#9)</span><br><span class="line">          PU L#19 (P#137)</span><br><span class="line">        L2 L#10 (512KB) + L1d L#10 (32KB) + L1i L#10 (32KB) + Core L#10</span><br><span class="line">          PU L#20 (P#10)</span><br><span class="line">          PU L#21 (P#138)</span><br><span class="line">        L2 L#11 (512KB) + L1d L#11 (32KB) + L1i L#11 (32KB) + Core L#11</span><br><span class="line">          PU L#22 (P#11)</span><br><span class="line">          PU L#23 (P#139)</span><br><span class="line">        L2 L#12 (512KB) + L1d L#12 (32KB) + L1i L#12 (32KB) + Core L#12</span><br><span class="line">          PU L#24 (P#12)</span><br><span class="line">          PU L#25 (P#140)</span><br><span class="line">        L2 L#13 (512KB) + L1d L#13 (32KB) + L1i L#13 (32KB) + Core L#13</span><br><span class="line">          PU L#26 (P#13)</span><br><span class="line">          PU L#27 (P#141)</span><br><span class="line">        L2 L#14 (512KB) + L1d L#14 (32KB) + L1i L#14 (32KB) + Core L#14</span><br><span class="line">          PU L#28 (P#14)</span><br><span class="line">          PU L#29 (P#142)</span><br><span class="line">        L2 L#15 (512KB) + L1d L#15 (32KB) + L1i L#15 (32KB) + Core L#15</span><br><span class="line">          PU L#30 (P#15)</span><br><span class="line">          PU L#31 (P#143)</span><br><span class="line">      L3 L#2 (32MB)</span><br><span class="line">        L2 L#16 (512KB) + L1d L#16 (32KB) + L1i L#16 (32KB) + Core L#16</span><br><span class="line">          PU L#32 (P#16)</span><br><span class="line">          PU L#33 (P#144)</span><br><span class="line">        L2 L#17 (512KB) + L1d L#17 (32KB) + L1i L#17 (32KB) + Core L#17</span><br><span class="line">          PU L#34 (P#17)</span><br><span class="line">          PU L#35 (P#145)</span><br><span class="line">        L2 L#18 (512KB) + L1d L#18 (32KB) + L1i L#18 (32KB) + Core L#18</span><br><span class="line">          PU L#36 (P#18)</span><br><span class="line">          PU L#37 (P#146)</span><br><span class="line">        L2 L#19 (512KB) + L1d L#19 (32KB) + L1i L#19 (32KB) + Core L#19</span><br><span class="line">          PU L#38 (P#19)</span><br><span class="line">          PU L#39 (P#147)</span><br><span class="line">        L2 L#20 (512KB) + L1d L#20 (32KB) + L1i L#20 (32KB) + Core L#20</span><br><span class="line">          PU L#40 (P#20)</span><br><span class="line">          PU L#41 (P#148)</span><br><span class="line">        L2 L#21 (512KB) + L1d L#21 (32KB) + L1i L#21 (32KB) + Core L#21</span><br><span class="line">          PU L#42 (P#21)</span><br><span class="line">          PU L#43 (P#149)</span><br><span class="line">        L2 L#22 (512KB) + L1d L#22 (32KB) + L1i L#22 (32KB) + Core L#22</span><br><span class="line">          PU L#44 (P#22)</span><br><span class="line">          PU L#45 (P#150)</span><br><span class="line">        L2 L#23 (512KB) + L1d L#23 (32KB) + L1i L#23 (32KB) + Core L#23</span><br><span class="line">          PU L#46 (P#23)</span><br><span class="line">          PU L#47 (P#151)</span><br><span class="line">      L3 L#3 (32MB)</span><br><span class="line">        L2 L#24 (512KB) + L1d L#24 (32KB) + L1i L#24 (32KB) + Core L#24</span><br><span class="line">          PU L#48 (P#24)</span><br><span class="line">          PU L#49 (P#152)</span><br><span class="line">        L2 L#25 (512KB) + L1d L#25 (32KB) + L1i L#25 (32KB) + Core L#25</span><br><span class="line">          PU L#50 (P#25)</span><br><span class="line">          PU L#51 (P#153)</span><br><span class="line">        L2 L#26 (512KB) + L1d L#26 (32KB) + L1i L#26 (32KB) + Core L#26</span><br><span class="line">          PU L#52 (P#26)</span><br><span class="line">          PU L#53 (P#154)</span><br><span class="line">        L2 L#27 (512KB) + L1d L#27 (32KB) + L1i L#27 (32KB) + Core L#27</span><br><span class="line">          PU L#54 (P#27)</span><br><span class="line">          PU L#55 (P#155)</span><br><span class="line">        L2 L#28 (512KB) + L1d L#28 (32KB) + L1i L#28 (32KB) + Core L#28</span><br><span class="line">          PU L#56 (P#28)</span><br><span class="line">          PU L#57 (P#156)</span><br><span class="line">        L2 L#29 (512KB) + L1d L#29 (32KB) + L1i L#29 (32KB) + Core L#29</span><br><span class="line">          PU L#58 (P#29)</span><br><span class="line">          PU L#59 (P#157)</span><br><span class="line">        L2 L#30 (512KB) + L1d L#30 (32KB) + L1i L#30 (32KB) + Core L#30</span><br><span class="line">          PU L#60 (P#30)</span><br><span class="line">          PU L#61 (P#158)</span><br><span class="line">        L2 L#31 (512KB) + L1d L#31 (32KB) + L1i L#31 (32KB) + Core L#31</span><br><span class="line">          PU L#62 (P#31)</span><br><span class="line">          PU L#63 (P#159)</span><br><span class="line">      HostBridge L#0</span><br><span class="line">        PCIBridge</span><br><span class="line">          PCI 144d:a80a</span><br><span class="line">        PCIBridge</span><br><span class="line">          PCI 144d:a80a</span><br><span class="line">        PCIBridge</span><br><span class="line">          PCIBridge</span><br><span class="line">            PCI 1a03:2000</span><br><span class="line">              GPU L#0 &quot;controlD64&quot;</span><br><span class="line">              GPU L#1 &quot;card0&quot;</span><br><span class="line">    NUMANode L#1 (P#1 504GB)</span><br><span class="line">      L3 L#4 (32MB)</span><br><span class="line">        L2 L#32 (512KB) + L1d L#32 (32KB) + L1i L#32 (32KB) + Core L#32</span><br><span class="line">          PU L#64 (P#32)</span><br><span class="line">          PU L#65 (P#160)</span><br><span class="line">        L2 L#33 (512KB) + L1d L#33 (32KB) + L1i L#33 (32KB) + Core L#33</span><br><span class="line">          PU L#66 (P#33)</span><br><span class="line">          PU L#67 (P#161)</span><br><span class="line">        L2 L#34 (512KB) + L1d L#34 (32KB) + L1i L#34 (32KB) + Core L#34</span><br><span class="line">          PU L#68 (P#34)</span><br><span class="line">          PU L#69 (P#162)</span><br><span class="line">        L2 L#35 (512KB) + L1d L#35 (32KB) + L1i L#35 (32KB) + Core L#35</span><br><span class="line">          PU L#70 (P#35)</span><br><span class="line">          PU L#71 (P#163)</span><br><span class="line">        L2 L#36 (512KB) + L1d L#36 (32KB) + L1i L#36 (32KB) + Core L#36</span><br><span class="line">          PU L#72 (P#36)</span><br><span class="line">          PU L#73 (P#164)</span><br><span class="line">        L2 L#37 (512KB) + L1d L#37 (32KB) + L1i L#37 (32KB) + Core L#37</span><br><span class="line">          PU L#74 (P#37)</span><br><span class="line">          PU L#75 (P#165)</span><br><span class="line">        L2 L#38 (512KB) + L1d L#38 (32KB) + L1i L#38 (32KB) + Core L#38</span><br><span class="line">          PU L#76 (P#38)</span><br><span class="line">          PU L#77 (P#166)</span><br><span class="line">        L2 L#39 (512KB) + L1d L#39 (32KB) + L1i L#39 (32KB) + Core L#39</span><br><span class="line">          PU L#78 (P#39)</span><br><span class="line">          PU L#79 (P#167)</span><br><span class="line">      L3 L#5 (32MB)</span><br><span class="line">        L2 L#40 (512KB) + L1d L#40 (32KB) + L1i L#40 (32KB) + Core L#40</span><br><span class="line">          PU L#80 (P#40)</span><br><span class="line">          PU L#81 (P#168)</span><br><span class="line">        L2 L#41 (512KB) + L1d L#41 (32KB) + L1i L#41 (32KB) + Core L#41</span><br><span class="line">          PU L#82 (P#41)</span><br><span class="line">          PU L#83 (P#169)</span><br><span class="line">        L2 L#42 (512KB) + L1d L#42 (32KB) + L1i L#42 (32KB) + Core L#42</span><br><span class="line">          PU L#84 (P#42)</span><br><span class="line">          PU L#85 (P#170)</span><br><span class="line">        L2 L#43 (512KB) + L1d L#43 (32KB) + L1i L#43 (32KB) + Core L#43</span><br><span class="line">          PU L#86 (P#43)</span><br><span class="line">          PU L#87 (P#171)</span><br><span class="line">        L2 L#44 (512KB) + L1d L#44 (32KB) + L1i L#44 (32KB) + Core L#44</span><br><span class="line">          PU L#88 (P#44)</span><br><span class="line">          PU L#89 (P#172)</span><br><span class="line">        L2 L#45 (512KB) + L1d L#45 (32KB) + L1i L#45 (32KB) + Core L#45</span><br><span class="line">          PU L#90 (P#45)</span><br><span class="line">          PU L#91 (P#173)</span><br><span class="line">        L2 L#46 (512KB) + L1d L#46 (32KB) + L1i L#46 (32KB) + Core L#46</span><br><span class="line">          PU L#92 (P#46)</span><br><span class="line">          PU L#93 (P#174)</span><br><span class="line">        L2 L#47 (512KB) + L1d L#47 (32KB) + L1i L#47 (32KB) + Core L#47</span><br><span class="line">          PU L#94 (P#47)</span><br><span class="line">          PU L#95 (P#175)</span><br><span class="line">      L3 L#6 (32MB)</span><br><span class="line">        L2 L#48 (512KB) + L1d L#48 (32KB) + L1i L#48 (32KB) + Core L#48</span><br><span class="line">          PU L#96 (P#48)</span><br><span class="line">          PU L#97 (P#176)</span><br><span class="line">        L2 L#49 (512KB) + L1d L#49 (32KB) + L1i L#49 (32KB) + Core L#49</span><br><span class="line">          PU L#98 (P#49)</span><br><span class="line">          PU L#99 (P#177)</span><br><span class="line">        L2 L#50 (512KB) + L1d L#50 (32KB) + L1i L#50 (32KB) + Core L#50</span><br><span class="line">          PU L#100 (P#50)</span><br><span class="line">          PU L#101 (P#178)</span><br><span class="line">        L2 L#51 (512KB) + L1d L#51 (32KB) + L1i L#51 (32KB) + Core L#51</span><br><span class="line">          PU L#102 (P#51)</span><br><span class="line">          PU L#103 (P#179)</span><br><span class="line">        L2 L#52 (512KB) + L1d L#52 (32KB) + L1i L#52 (32KB) + Core L#52</span><br><span class="line">          PU L#104 (P#52)</span><br><span class="line">          PU L#105 (P#180)</span><br><span class="line">        L2 L#53 (512KB) + L1d L#53 (32KB) + L1i L#53 (32KB) + Core L#53</span><br><span class="line">          PU L#106 (P#53)</span><br><span class="line">          PU L#107 (P#181)</span><br><span class="line">        L2 L#54 (512KB) + L1d L#54 (32KB) + L1i L#54 (32KB) + Core L#54</span><br><span class="line">          PU L#108 (P#54)</span><br><span class="line">          PU L#109 (P#182)</span><br><span class="line">        L2 L#55 (512KB) + L1d L#55 (32KB) + L1i L#55 (32KB) + Core L#55</span><br><span class="line">          PU L#110 (P#55)</span><br><span class="line">          PU L#111 (P#183)</span><br><span class="line">      L3 L#7 (32MB)</span><br><span class="line">        L2 L#56 (512KB) + L1d L#56 (32KB) + L1i L#56 (32KB) + Core L#56</span><br><span class="line">          PU L#112 (P#56)</span><br><span class="line">          PU L#113 (P#184)</span><br><span class="line">        L2 L#57 (512KB) + L1d L#57 (32KB) + L1i L#57 (32KB) + Core L#57</span><br><span class="line">          PU L#114 (P#57)</span><br><span class="line">          PU L#115 (P#185)</span><br><span class="line">        L2 L#58 (512KB) + L1d L#58 (32KB) + L1i L#58 (32KB) + Core L#58</span><br><span class="line">          PU L#116 (P#58)</span><br><span class="line">          PU L#117 (P#186)</span><br><span class="line">        L2 L#59 (512KB) + L1d L#59 (32KB) + L1i L#59 (32KB) + Core L#59</span><br><span class="line">          PU L#118 (P#59)</span><br><span class="line">          PU L#119 (P#187)</span><br><span class="line">        L2 L#60 (512KB) + L1d L#60 (32KB) + L1i L#60 (32KB) + Core L#60</span><br><span class="line">          PU L#120 (P#60)</span><br><span class="line">          PU L#121 (P#188)</span><br><span class="line">        L2 L#61 (512KB) + L1d L#61 (32KB) + L1i L#61 (32KB) + Core L#61</span><br><span class="line">          PU L#122 (P#61)</span><br><span class="line">          PU L#123 (P#189)</span><br><span class="line">        L2 L#62 (512KB) + L1d L#62 (32KB) + L1i L#62 (32KB) + Core L#62</span><br><span class="line">          PU L#124 (P#62)</span><br><span class="line">          PU L#125 (P#190)</span><br><span class="line">        L2 L#63 (512KB) + L1d L#63 (32KB) + L1i L#63 (32KB) + Core L#63</span><br><span class="line">          PU L#126 (P#63)</span><br><span class="line">          PU L#127 (P#191)</span><br><span class="line">      HostBridge L#5</span><br><span class="line">        PCIBridge</span><br><span class="line">          PCIBridge</span><br><span class="line">            PCIBridge</span><br><span class="line">              PCI 1af4:1001</span><br><span class="line">            PCIBridge</span><br><span class="line">              PCI 1ded:1001</span><br><span class="line">              PCI ffff:ffff</span><br><span class="line"></span><br><span class="line">  Socket L#1 (1008GB)</span><br><span class="line">    NUMANode L#2 (P#2 504GB)</span><br><span class="line">      L3 L#8 (32MB)</span><br><span class="line">        L2 L#64 (512KB) + L1d L#64 (32KB) + L1i L#64 (32KB) + Core L#64</span><br><span class="line">          PU L#128 (P#64)</span><br><span class="line">          PU L#129 (P#192)</span><br><span class="line">        L2 L#65 (512KB) + L1d L#65 (32KB) + L1i L#65 (32KB) + Core L#65</span><br><span class="line">          PU L#130 (P#65)</span><br><span class="line">          PU L#131 (P#193)</span><br><span class="line">        L2 L#66 (512KB) + L1d L#66 (32KB) + L1i L#66 (32KB) + Core L#66</span><br><span class="line">          PU L#132 (P#66)</span><br><span class="line">          PU L#133 (P#194)</span><br><span class="line">        L2 L#67 (512KB) + L1d L#67 (32KB) + L1i L#67 (32KB) + Core L#67</span><br><span class="line">          PU L#134 (P#67)</span><br><span class="line">          PU L#135 (P#195)</span><br><span class="line">        L2 L#68 (512KB) + L1d L#68 (32KB) + L1i L#68 (32KB) + Core L#68</span><br><span class="line">          PU L#136 (P#68)</span><br><span class="line">          PU L#137 (P#196)</span><br><span class="line">        L2 L#69 (512KB) + L1d L#69 (32KB) + L1i L#69 (32KB) + Core L#69</span><br><span class="line">          PU L#138 (P#69)</span><br><span class="line">          PU L#139 (P#197)</span><br><span class="line">        L2 L#70 (512KB) + L1d L#70 (32KB) + L1i L#70 (32KB) + Core L#70</span><br><span class="line">          PU L#140 (P#70)</span><br><span class="line">          PU L#141 (P#198)</span><br><span class="line">        L2 L#71 (512KB) + L1d L#71 (32KB) + L1i L#71 (32KB) + Core L#71</span><br><span class="line">          PU L#142 (P#71)</span><br><span class="line">          PU L#143 (P#199)</span><br><span class="line">      L3 L#9 (32MB)</span><br><span class="line">        L2 L#72 (512KB) + L1d L#72 (32KB) + L1i L#72 (32KB) + Core L#72</span><br><span class="line">          PU L#144 (P#72)</span><br><span class="line">          PU L#145 (P#200)</span><br><span class="line">        L2 L#73 (512KB) + L1d L#73 (32KB) + L1i L#73 (32KB) + Core L#73</span><br><span class="line">          PU L#146 (P#73)</span><br><span class="line">          PU L#147 (P#201)</span><br><span class="line">        L2 L#74 (512KB) + L1d L#74 (32KB) + L1i L#74 (32KB) + Core L#74</span><br><span class="line">          PU L#148 (P#74)</span><br><span class="line">          PU L#149 (P#202)</span><br><span class="line">        L2 L#75 (512KB) + L1d L#75 (32KB) + L1i L#75 (32KB) + Core L#75</span><br><span class="line">          PU L#150 (P#75)</span><br><span class="line">          PU L#151 (P#203)</span><br><span class="line">        L2 L#76 (512KB) + L1d L#76 (32KB) + L1i L#76 (32KB) + Core L#76</span><br><span class="line">          PU L#152 (P#76)</span><br><span class="line">          PU L#153 (P#204)</span><br><span class="line">        L2 L#77 (512KB) + L1d L#77 (32KB) + L1i L#77 (32KB) + Core L#77</span><br><span class="line">          PU L#154 (P#77)</span><br><span class="line">          PU L#155 (P#205)</span><br><span class="line">        L2 L#78 (512KB) + L1d L#78 (32KB) + L1i L#78 (32KB) + Core L#78</span><br><span class="line">          PU L#156 (P#78)</span><br><span class="line">          PU L#157 (P#206)</span><br><span class="line">        L2 L#79 (512KB) + L1d L#79 (32KB) + L1i L#79 (32KB) + Core L#79</span><br><span class="line">          PU L#158 (P#79)</span><br><span class="line">          PU L#159 (P#207)</span><br><span class="line">      L3 L#10 (32MB)</span><br><span class="line">        L2 L#80 (512KB) + L1d L#80 (32KB) + L1i L#80 (32KB) + Core L#80</span><br><span class="line">          PU L#160 (P#80)</span><br><span class="line">          PU L#161 (P#208)</span><br><span class="line">        L2 L#81 (512KB) + L1d L#81 (32KB) + L1i L#81 (32KB) + Core L#81</span><br><span class="line">          PU L#162 (P#81)</span><br><span class="line">          PU L#163 (P#209)</span><br><span class="line">        L2 L#82 (512KB) + L1d L#82 (32KB) + L1i L#82 (32KB) + Core L#82</span><br><span class="line">          PU L#164 (P#82)</span><br><span class="line">          PU L#165 (P#210)</span><br><span class="line">        L2 L#83 (512KB) + L1d L#83 (32KB) + L1i L#83 (32KB) + Core L#83</span><br><span class="line">          PU L#166 (P#83)</span><br><span class="line">          PU L#167 (P#211)</span><br><span class="line">        L2 L#84 (512KB) + L1d L#84 (32KB) + L1i L#84 (32KB) + Core L#84</span><br><span class="line">          PU L#168 (P#84)</span><br><span class="line">          PU L#169 (P#212)</span><br><span class="line">        L2 L#85 (512KB) + L1d L#85 (32KB) + L1i L#85 (32KB) + Core L#85</span><br><span class="line">          PU L#170 (P#85)</span><br><span class="line">          PU L#171 (P#213)</span><br><span class="line">        L2 L#86 (512KB) + L1d L#86 (32KB) + L1i L#86 (32KB) + Core L#86</span><br><span class="line">          PU L#172 (P#86)</span><br><span class="line">          PU L#173 (P#214)</span><br><span class="line">        L2 L#87 (512KB) + L1d L#87 (32KB) + L1i L#87 (32KB) + Core L#87</span><br><span class="line">          PU L#174 (P#87)</span><br><span class="line">          PU L#175 (P#215)</span><br><span class="line">      L3 L#11 (32MB)</span><br><span class="line">        L2 L#88 (512KB) + L1d L#88 (32KB) + L1i L#88 (32KB) + Core L#88</span><br><span class="line">          PU L#176 (P#88)</span><br><span class="line">          PU L#177 (P#216)</span><br><span class="line">        L2 L#89 (512KB) + L1d L#89 (32KB) + L1i L#89 (32KB) + Core L#89</span><br><span class="line">          PU L#178 (P#89)</span><br><span class="line">          PU L#179 (P#217)</span><br><span class="line">        L2 L#90 (512KB) + L1d L#90 (32KB) + L1i L#90 (32KB) + Core L#90</span><br><span class="line">          PU L#180 (P#90)</span><br><span class="line">          PU L#181 (P#218)</span><br><span class="line">        L2 L#91 (512KB) + L1d L#91 (32KB) + L1i L#91 (32KB) + Core L#91</span><br><span class="line">          PU L#182 (P#91)</span><br><span class="line">          PU L#183 (P#219)</span><br><span class="line">        L2 L#92 (512KB) + L1d L#92 (32KB) + L1i L#92 (32KB) + Core L#92</span><br><span class="line">          PU L#184 (P#92)</span><br><span class="line">          PU L#185 (P#220)</span><br><span class="line">        L2 L#93 (512KB) + L1d L#93 (32KB) + L1i L#93 (32KB) + Core L#93</span><br><span class="line">          PU L#186 (P#93)</span><br><span class="line">          PU L#187 (P#221)</span><br><span class="line">        L2 L#94 (512KB) + L1d L#94 (32KB) + L1i L#94 (32KB) + Core L#94</span><br><span class="line">          PU L#188 (P#94)</span><br><span class="line">          PU L#189 (P#222)</span><br><span class="line">        L2 L#95 (512KB) + L1d L#95 (32KB) + L1i L#95 (32KB) + Core L#95</span><br><span class="line">          PU L#190 (P#95)</span><br><span class="line">          PU L#191 (P#223)</span><br><span class="line">    NUMANode L#3 (P#3 504GB)</span><br><span class="line">      L3 L#12 (32MB)</span><br><span class="line">        L2 L#96 (512KB) + L1d L#96 (32KB) + L1i L#96 (32KB) + Core L#96</span><br><span class="line">          PU L#192 (P#96)</span><br><span class="line">          PU L#193 (P#224)</span><br><span class="line">        L2 L#97 (512KB) + L1d L#97 (32KB) + L1i L#97 (32KB) + Core L#97</span><br><span class="line">          PU L#194 (P#97)</span><br><span class="line">          PU L#195 (P#225)</span><br><span class="line">        L2 L#98 (512KB) + L1d L#98 (32KB) + L1i L#98 (32KB) + Core L#98</span><br><span class="line">          PU L#196 (P#98)</span><br><span class="line">          PU L#197 (P#226)</span><br><span class="line">        L2 L#99 (512KB) + L1d L#99 (32KB) + L1i L#99 (32KB) + Core L#99</span><br><span class="line">          PU L#198 (P#99)</span><br><span class="line">          PU L#199 (P#227)</span><br><span class="line">        L2 L#100 (512KB) + L1d L#100 (32KB) + L1i L#100 (32KB) + Core L#100</span><br><span class="line">          PU L#200 (P#100)</span><br><span class="line">          PU L#201 (P#228)</span><br><span class="line">        L2 L#101 (512KB) + L1d L#101 (32KB) + L1i L#101 (32KB) + Core L#101</span><br><span class="line">          PU L#202 (P#101)</span><br><span class="line">          PU L#203 (P#229)</span><br><span class="line">        L2 L#102 (512KB) + L1d L#102 (32KB) + L1i L#102 (32KB) + Core L#102</span><br><span class="line">          PU L#204 (P#102)</span><br><span class="line">          PU L#205 (P#230)</span><br><span class="line">        L2 L#103 (512KB) + L1d L#103 (32KB) + L1i L#103 (32KB) + Core L#103</span><br><span class="line">          PU L#206 (P#103)</span><br><span class="line">          PU L#207 (P#231)</span><br><span class="line">      L3 L#13 (32MB)</span><br><span class="line">        L2 L#104 (512KB) + L1d L#104 (32KB) + L1i L#104 (32KB) + Core L#104</span><br><span class="line">          PU L#208 (P#104)</span><br><span class="line">          PU L#209 (P#232)</span><br><span class="line">        L2 L#105 (512KB) + L1d L#105 (32KB) + L1i L#105 (32KB) + Core L#105</span><br><span class="line">          PU L#210 (P#105)</span><br><span class="line">          PU L#211 (P#233)</span><br><span class="line">        L2 L#106 (512KB) + L1d L#106 (32KB) + L1i L#106 (32KB) + Core L#106</span><br><span class="line">          PU L#212 (P#106)</span><br><span class="line">          PU L#213 (P#234)</span><br><span class="line">        L2 L#107 (512KB) + L1d L#107 (32KB) + L1i L#107 (32KB) + Core L#107</span><br><span class="line">          PU L#214 (P#107)</span><br><span class="line">          PU L#215 (P#235)</span><br><span class="line">        L2 L#108 (512KB) + L1d L#108 (32KB) + L1i L#108 (32KB) + Core L#108</span><br><span class="line">          PU L#216 (P#108)</span><br><span class="line">          PU L#217 (P#236)</span><br><span class="line">        L2 L#109 (512KB) + L1d L#109 (32KB) + L1i L#109 (32KB) + Core L#109</span><br><span class="line">          PU L#218 (P#109)</span><br><span class="line">          PU L#219 (P#237)</span><br><span class="line">        L2 L#110 (512KB) + L1d L#110 (32KB) + L1i L#110 (32KB) + Core L#110</span><br><span class="line">          PU L#220 (P#110)</span><br><span class="line">          PU L#221 (P#238)</span><br><span class="line">        L2 L#111 (512KB) + L1d L#111 (32KB) + L1i L#111 (32KB) + Core L#111</span><br><span class="line">          PU L#222 (P#111)</span><br><span class="line">          PU L#223 (P#239)</span><br><span class="line">      L3 L#14 (32MB)</span><br><span class="line">        L2 L#112 (512KB) + L1d L#112 (32KB) + L1i L#112 (32KB) + Core L#112</span><br><span class="line">          PU L#224 (P#112)</span><br><span class="line">          PU L#225 (P#240)</span><br><span class="line">        L2 L#113 (512KB) + L1d L#113 (32KB) + L1i L#113 (32KB) + Core L#113</span><br><span class="line">          PU L#226 (P#113)</span><br><span class="line">          PU L#227 (P#241)</span><br><span class="line">        L2 L#114 (512KB) + L1d L#114 (32KB) + L1i L#114 (32KB) + Core L#114</span><br><span class="line">          PU L#228 (P#114)</span><br><span class="line">          PU L#229 (P#242)</span><br><span class="line">        L2 L#115 (512KB) + L1d L#115 (32KB) + L1i L#115 (32KB) + Core L#115</span><br><span class="line">          PU L#230 (P#115)</span><br><span class="line">          PU L#231 (P#243)</span><br><span class="line">        L2 L#116 (512KB) + L1d L#116 (32KB) + L1i L#116 (32KB) + Core L#116</span><br><span class="line">          PU L#232 (P#116)</span><br><span class="line">          PU L#233 (P#244)</span><br><span class="line">        L2 L#117 (512KB) + L1d L#117 (32KB) + L1i L#117 (32KB) + Core L#117</span><br><span class="line">          PU L#234 (P#117)</span><br><span class="line">          PU L#235 (P#245)</span><br><span class="line">        L2 L#118 (512KB) + L1d L#118 (32KB) + L1i L#118 (32KB) + Core L#118</span><br><span class="line">          PU L#236 (P#118)</span><br><span class="line">          PU L#237 (P#246)</span><br><span class="line">        L2 L#119 (512KB) + L1d L#119 (32KB) + L1i L#119 (32KB) + Core L#119</span><br><span class="line">          PU L#238 (P#119)</span><br><span class="line">          PU L#239 (P#247)</span><br><span class="line">      L3 L#15 (32MB)</span><br><span class="line">        L2 L#120 (512KB) + L1d L#120 (32KB) + L1i L#120 (32KB) + Core L#120</span><br><span class="line">          PU L#240 (P#120)</span><br><span class="line">          PU L#241 (P#248)</span><br><span class="line">        L2 L#121 (512KB) + L1d L#121 (32KB) + L1i L#121 (32KB) + Core L#121</span><br><span class="line">          PU L#242 (P#121)</span><br><span class="line">          PU L#243 (P#249)</span><br><span class="line">        L2 L#122 (512KB) + L1d L#122 (32KB) + L1i L#122 (32KB) + Core L#122</span><br><span class="line">          PU L#244 (P#122)</span><br><span class="line">          PU L#245 (P#250)</span><br><span class="line">        L2 L#123 (512KB) + L1d L#123 (32KB) + L1i L#123 (32KB) + Core L#123</span><br><span class="line">          PU L#246 (P#123)</span><br><span class="line">          PU L#247 (P#251)</span><br><span class="line">        L2 L#124 (512KB) + L1d L#124 (32KB) + L1i L#124 (32KB) + Core L#124</span><br><span class="line">          PU L#248 (P#124)</span><br><span class="line">          PU L#249 (P#252)</span><br><span class="line">        L2 L#125 (512KB) + L1d L#125 (32KB) + L1i L#125 (32KB) + Core L#125</span><br><span class="line">          PU L#250 (P#125)</span><br><span class="line">          PU L#251 (P#253)</span><br><span class="line">        L2 L#126 (512KB) + L1d L#126 (32KB) + L1i L#126 (32KB) + Core L#126</span><br><span class="line">          PU L#252 (P#126)</span><br><span class="line">          PU L#253 (P#254)</span><br><span class="line">        L2 L#127 (512KB) + L1d L#127 (32KB) + L1i L#127 (32KB) + Core L#127</span><br><span class="line">          PU L#254 (P#127)</span><br><span class="line">          PU L#255 (P#255)</span><br></pre></td></tr></table></figure><p>这台机器改下BIOS设置</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/FrVuhXNHEf2LzigZPHHV6c7UNKrP.png" alt="img"></p><p>白色Channel 那里可以选择Auto&#x2F;Die&#x2F;Channel&#x2F;Socket, 选择Socket后得到如下Node 结构:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#lscpu</span><br><span class="line">Architecture:          x86_64</span><br><span class="line">CPU op-mode(s):        32-bit, 64-bit</span><br><span class="line">Byte Order:            Little Endian</span><br><span class="line">CPU(s):                256</span><br><span class="line">On-line CPU(s) list:   0-255</span><br><span class="line">Thread(s) per core:    2</span><br><span class="line">Core(s) per socket:    64</span><br><span class="line">Socket(s):             2</span><br><span class="line">NUMA node(s):          2</span><br><span class="line">Vendor ID:             AuthenticAMD</span><br><span class="line">CPU family:            25</span><br><span class="line">Model:                 1</span><br><span class="line">Model name:            AMD EPYC 7T83 64-Core Processor</span><br><span class="line">Stepping:              1</span><br><span class="line">CPU MHz:               2399.192</span><br><span class="line">CPU max MHz:           2550.0000</span><br><span class="line">CPU min MHz:           1500.0000</span><br><span class="line">BogoMIPS:              5090.50</span><br><span class="line">Virtualization:        AMD-V</span><br><span class="line">L1d cache:             32K</span><br><span class="line">L1i cache:             32K</span><br><span class="line">L2 cache:              512K</span><br><span class="line">L3 cache:              32768K</span><br><span class="line">NUMA node0 CPU(s):     0-63,128-191</span><br><span class="line">NUMA node1 CPU(s):     64-127,192-255 //每个socket下的内存交织，也就是一个Socket是一个独立的 Numa Node</span><br></pre></td></tr></table></figure><h2 id="鲲鹏-920"><a href="#鲲鹏-920" class="headerlink" title="鲲鹏 920"></a>鲲鹏 920</h2><p>鲲鹏是ARM架构，一般都没有超线程，因为指令简单流水线较流畅，搞超线程收益不大</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"># lscpu</span><br><span class="line">架构：                           aarch64</span><br><span class="line">CPU 运行模式：                   64-bit</span><br><span class="line">字节序：                         Little Endian</span><br><span class="line">CPU:                             96</span><br><span class="line">在线 CPU 列表：                  0-95</span><br><span class="line">每个核的线程数：                 1</span><br><span class="line">每个座的核数：                   48</span><br><span class="line">座：                             2</span><br><span class="line">NUMA 节点：                      4</span><br><span class="line">厂商 ID：                        HiSilicon</span><br><span class="line">型号：                           0</span><br><span class="line">型号名称：                       Kunpeng-920</span><br><span class="line">步进：                           0x1</span><br><span class="line">CPU 最大 MHz：                   2600.0000</span><br><span class="line">CPU 最小 MHz：                   200.0000</span><br><span class="line">BogoMIPS：                       200.00</span><br><span class="line">L1d 缓存：                       6 MiB</span><br><span class="line">L1i 缓存：                       6 MiB</span><br><span class="line">L2 缓存：                        48 MiB</span><br><span class="line">L3 缓存：                        96 MiB</span><br><span class="line">NUMA 节点0 CPU：                 0-23</span><br><span class="line">NUMA 节点1 CPU：                 24-47</span><br><span class="line">NUMA 节点2 CPU：                 48-71</span><br><span class="line">NUMA 节点3 CPU：                 72-95</span><br><span class="line"></span><br><span class="line">#lstopo</span><br><span class="line">Machine (766GB total)</span><br><span class="line">  Package L#0</span><br><span class="line">    NUMANode L#0 (P#0 191GB)</span><br><span class="line">      L3 L#0 (24MB)</span><br><span class="line">        L2 L#0 (512KB) + L1d L#0 (64KB) + L1i L#0 (64KB) + Core L#0 + PU L#0 (P#0)</span><br><span class="line">        L2 L#1 (512KB) + L1d L#1 (64KB) + L1i L#1 (64KB) + Core L#1 + PU L#1 (P#1)</span><br><span class="line">        L2 L#2 (512KB) + L1d L#2 (64KB) + L1i L#2 (64KB) + Core L#2 + PU L#2 (P#2)</span><br><span class="line">        L2 L#3 (512KB) + L1d L#3 (64KB) + L1i L#3 (64KB) + Core L#3 + PU L#3 (P#3)</span><br><span class="line">        L2 L#4 (512KB) + L1d L#4 (64KB) + L1i L#4 (64KB) + Core L#4 + PU L#4 (P#4)</span><br><span class="line">        L2 L#5 (512KB) + L1d L#5 (64KB) + L1i L#5 (64KB) + Core L#5 + PU L#5 (P#5)</span><br><span class="line">        L2 L#6 (512KB) + L1d L#6 (64KB) + L1i L#6 (64KB) + Core L#6 + PU L#6 (P#6)</span><br><span class="line">        L2 L#7 (512KB) + L1d L#7 (64KB) + L1i L#7 (64KB) + Core L#7 + PU L#7 (P#7)</span><br><span class="line">        L2 L#8 (512KB) + L1d L#8 (64KB) + L1i L#8 (64KB) + Core L#8 + PU L#8 (P#8)</span><br><span class="line">        L2 L#9 (512KB) + L1d L#9 (64KB) + L1i L#9 (64KB) + Core L#9 + PU L#9 (P#9)</span><br><span class="line">        L2 L#10 (512KB) + L1d L#10 (64KB) + L1i L#10 (64KB) + Core L#10 + PU L#10 (P#10)</span><br><span class="line">        L2 L#11 (512KB) + L1d L#11 (64KB) + L1i L#11 (64KB) + Core L#11 + PU L#11 (P#11)</span><br><span class="line">        L2 L#12 (512KB) + L1d L#12 (64KB) + L1i L#12 (64KB) + Core L#12 + PU L#12 (P#12)</span><br><span class="line">        L2 L#13 (512KB) + L1d L#13 (64KB) + L1i L#13 (64KB) + Core L#13 + PU L#13 (P#13)</span><br><span class="line">        L2 L#14 (512KB) + L1d L#14 (64KB) + L1i L#14 (64KB) + Core L#14 + PU L#14 (P#14)</span><br><span class="line">        L2 L#15 (512KB) + L1d L#15 (64KB) + L1i L#15 (64KB) + Core L#15 + PU L#15 (P#15)</span><br><span class="line">        L2 L#16 (512KB) + L1d L#16 (64KB) + L1i L#16 (64KB) + Core L#16 + PU L#16 (P#16)</span><br><span class="line">        L2 L#17 (512KB) + L1d L#17 (64KB) + L1i L#17 (64KB) + Core L#17 + PU L#17 (P#17)</span><br><span class="line">        L2 L#18 (512KB) + L1d L#18 (64KB) + L1i L#18 (64KB) + Core L#18 + PU L#18 (P#18)</span><br><span class="line">        L2 L#19 (512KB) + L1d L#19 (64KB) + L1i L#19 (64KB) + Core L#19 + PU L#19 (P#19)</span><br><span class="line">        L2 L#20 (512KB) + L1d L#20 (64KB) + L1i L#20 (64KB) + Core L#20 + PU L#20 (P#20)</span><br><span class="line">        L2 L#21 (512KB) + L1d L#21 (64KB) + L1i L#21 (64KB) + Core L#21 + PU L#21 (P#21)</span><br><span class="line">        L2 L#22 (512KB) + L1d L#22 (64KB) + L1i L#22 (64KB) + Core L#22 + PU L#22 (P#22)</span><br><span class="line">        L2 L#23 (512KB) + L1d L#23 (64KB) + L1i L#23 (64KB) + Core L#23 + PU L#23 (P#23)</span><br><span class="line">      HostBridge L#0</span><br><span class="line">        PCIBridge</span><br><span class="line">          PCI 15b3:1017</span><br><span class="line">            Net L#0 &quot;enp2s0f0&quot;</span><br><span class="line">          PCI 15b3:1017</span><br><span class="line">            Net L#1 &quot;enp2s0f1&quot;</span><br><span class="line">        PCIBridge</span><br><span class="line">          PCI 19e5:1711</span><br><span class="line">            GPU L#2 &quot;controlD64&quot;</span><br><span class="line">            GPU L#3 &quot;card0&quot;</span><br><span class="line">      HostBridge L#3</span><br><span class="line">        2 x &#123; PCI 19e5:a230 &#125;</span><br><span class="line">        PCI 19e5:a235</span><br><span class="line">          Block(Disk) L#4 &quot;sda&quot;</span><br><span class="line">      HostBridge L#4</span><br><span class="line">        PCIBridge</span><br><span class="line">          PCI 19e5:a222</span><br><span class="line">            Net L#5 &quot;enp125s0f0&quot;</span><br><span class="line">            OpenFabrics L#6 &quot;hns_0&quot;</span><br><span class="line">          PCI 19e5:a221</span><br><span class="line">            Net L#7 &quot;enp125s0f1&quot;</span><br><span class="line">          PCI 19e5:a222</span><br><span class="line">            Net L#8 &quot;enp125s0f2&quot;</span><br><span class="line">            OpenFabrics L#9 &quot;hns_1&quot;</span><br><span class="line">          PCI 19e5:a221</span><br><span class="line">            Net L#10 &quot;enp125s0f3&quot;</span><br><span class="line">    NUMANode L#1 (P#1 192GB) + L3 L#1 (24MB)</span><br><span class="line">      L2 L#24 (512KB) + L1d L#24 (64KB) + L1i L#24 (64KB) + Core L#24 + PU L#24 (P#24)</span><br><span class="line">      L2 L#25 (512KB) + L1d L#25 (64KB) + L1i L#25 (64KB) + Core L#25 + PU L#25 (P#25)</span><br><span class="line">      L2 L#26 (512KB) + L1d L#26 (64KB) + L1i L#26 (64KB) + Core L#26 + PU L#26 (P#26)</span><br><span class="line">      L2 L#27 (512KB) + L1d L#27 (64KB) + L1i L#27 (64KB) + Core L#27 + PU L#27 (P#27)</span><br><span class="line">      L2 L#28 (512KB) + L1d L#28 (64KB) + L1i L#28 (64KB) + Core L#28 + PU L#28 (P#28)</span><br><span class="line">      L2 L#29 (512KB) + L1d L#29 (64KB) + L1i L#29 (64KB) + Core L#29 + PU L#29 (P#29)</span><br><span class="line">      L2 L#30 (512KB) + L1d L#30 (64KB) + L1i L#30 (64KB) + Core L#30 + PU L#30 (P#30)</span><br><span class="line">      L2 L#31 (512KB) + L1d L#31 (64KB) + L1i L#31 (64KB) + Core L#31 + PU L#31 (P#31)</span><br><span class="line">      L2 L#32 (512KB) + L1d L#32 (64KB) + L1i L#32 (64KB) + Core L#32 + PU L#32 (P#32)</span><br><span class="line">      L2 L#33 (512KB) + L1d L#33 (64KB) + L1i L#33 (64KB) + Core L#33 + PU L#33 (P#33)</span><br><span class="line">      L2 L#34 (512KB) + L1d L#34 (64KB) + L1i L#34 (64KB) + Core L#34 + PU L#34 (P#34)</span><br><span class="line">      L2 L#35 (512KB) + L1d L#35 (64KB) + L1i L#35 (64KB) + Core L#35 + PU L#35 (P#35)</span><br><span class="line">      L2 L#36 (512KB) + L1d L#36 (64KB) + L1i L#36 (64KB) + Core L#36 + PU L#36 (P#36)</span><br><span class="line">      L2 L#37 (512KB) + L1d L#37 (64KB) + L1i L#37 (64KB) + Core L#37 + PU L#37 (P#37)</span><br><span class="line">      L2 L#38 (512KB) + L1d L#38 (64KB) + L1i L#38 (64KB) + Core L#38 + PU L#38 (P#38)</span><br><span class="line">      L2 L#39 (512KB) + L1d L#39 (64KB) + L1i L#39 (64KB) + Core L#39 + PU L#39 (P#39)</span><br><span class="line">      L2 L#40 (512KB) + L1d L#40 (64KB) + L1i L#40 (64KB) + Core L#40 + PU L#40 (P#40)</span><br><span class="line">      L2 L#41 (512KB) + L1d L#41 (64KB) + L1i L#41 (64KB) + Core L#41 + PU L#41 (P#41)</span><br><span class="line">      L2 L#42 (512KB) + L1d L#42 (64KB) + L1i L#42 (64KB) + Core L#42 + PU L#42 (P#42)</span><br><span class="line">      L2 L#43 (512KB) + L1d L#43 (64KB) + L1i L#43 (64KB) + Core L#43 + PU L#43 (P#43)</span><br><span class="line">      L2 L#44 (512KB) + L1d L#44 (64KB) + L1i L#44 (64KB) + Core L#44 + PU L#44 (P#44)</span><br><span class="line">      L2 L#45 (512KB) + L1d L#45 (64KB) + L1i L#45 (64KB) + Core L#45 + PU L#45 (P#45)</span><br><span class="line">      L2 L#46 (512KB) + L1d L#46 (64KB) + L1i L#46 (64KB) + Core L#46 + PU L#46 (P#46)</span><br><span class="line">      L2 L#47 (512KB) + L1d L#47 (64KB) + L1i L#47 (64KB) + Core L#47 + PU L#47 (P#47)</span><br><span class="line">  Package L#1</span><br><span class="line">    NUMANode L#2 (P#2 192GB)</span><br><span class="line">      L3 L#2 (24MB)</span><br><span class="line">        L2 L#48 (512KB) + L1d L#48 (64KB) + L1i L#48 (64KB) + Core L#48 + PU L#48 (P#48)</span><br><span class="line">        L2 L#49 (512KB) + L1d L#49 (64KB) + L1i L#49 (64KB) + Core L#49 + PU L#49 (P#49)</span><br><span class="line">        L2 L#50 (512KB) + L1d L#50 (64KB) + L1i L#50 (64KB) + Core L#50 + PU L#50 (P#50)</span><br><span class="line">        L2 L#51 (512KB) + L1d L#51 (64KB) + L1i L#51 (64KB) + Core L#51 + PU L#51 (P#51)</span><br><span class="line">        L2 L#52 (512KB) + L1d L#52 (64KB) + L1i L#52 (64KB) + Core L#52 + PU L#52 (P#52)</span><br><span class="line">        L2 L#53 (512KB) + L1d L#53 (64KB) + L1i L#53 (64KB) + Core L#53 + PU L#53 (P#53)</span><br><span class="line">        L2 L#54 (512KB) + L1d L#54 (64KB) + L1i L#54 (64KB) + Core L#54 + PU L#54 (P#54)</span><br><span class="line">        L2 L#55 (512KB) + L1d L#55 (64KB) + L1i L#55 (64KB) + Core L#55 + PU L#55 (P#55)</span><br><span class="line">        L2 L#56 (512KB) + L1d L#56 (64KB) + L1i L#56 (64KB) + Core L#56 + PU L#56 (P#56)</span><br><span class="line">        L2 L#57 (512KB) + L1d L#57 (64KB) + L1i L#57 (64KB) + Core L#57 + PU L#57 (P#57)</span><br><span class="line">        L2 L#58 (512KB) + L1d L#58 (64KB) + L1i L#58 (64KB) + Core L#58 + PU L#58 (P#58)</span><br><span class="line">        L2 L#59 (512KB) + L1d L#59 (64KB) + L1i L#59 (64KB) + Core L#59 + PU L#59 (P#59)</span><br><span class="line">        L2 L#60 (512KB) + L1d L#60 (64KB) + L1i L#60 (64KB) + Core L#60 + PU L#60 (P#60)</span><br><span class="line">        L2 L#61 (512KB) + L1d L#61 (64KB) + L1i L#61 (64KB) + Core L#61 + PU L#61 (P#61)</span><br><span class="line">        L2 L#62 (512KB) + L1d L#62 (64KB) + L1i L#62 (64KB) + Core L#62 + PU L#62 (P#62)</span><br><span class="line">        L2 L#63 (512KB) + L1d L#63 (64KB) + L1i L#63 (64KB) + Core L#63 + PU L#63 (P#63)</span><br><span class="line">        L2 L#64 (512KB) + L1d L#64 (64KB) + L1i L#64 (64KB) + Core L#64 + PU L#64 (P#64)</span><br><span class="line">        L2 L#65 (512KB) + L1d L#65 (64KB) + L1i L#65 (64KB) + Core L#65 + PU L#65 (P#65)</span><br><span class="line">        L2 L#66 (512KB) + L1d L#66 (64KB) + L1i L#66 (64KB) + Core L#66 + PU L#66 (P#66)</span><br><span class="line">        L2 L#67 (512KB) + L1d L#67 (64KB) + L1i L#67 (64KB) + Core L#67 + PU L#67 (P#67)</span><br><span class="line">        L2 L#68 (512KB) + L1d L#68 (64KB) + L1i L#68 (64KB) + Core L#68 + PU L#68 (P#68)</span><br><span class="line">        L2 L#69 (512KB) + L1d L#69 (64KB) + L1i L#69 (64KB) + Core L#69 + PU L#69 (P#69)</span><br><span class="line">        L2 L#70 (512KB) + L1d L#70 (64KB) + L1i L#70 (64KB) + Core L#70 + PU L#70 (P#70)</span><br><span class="line">        L2 L#71 (512KB) + L1d L#71 (64KB) + L1i L#71 (64KB) + Core L#71 + PU L#71 (P#71)</span><br><span class="line">      HostBridge L#6</span><br><span class="line">        PCIBridge</span><br><span class="line">          PCI 19e5:3714</span><br><span class="line">        PCIBridge</span><br><span class="line">          PCI 19e5:3714</span><br><span class="line">        PCIBridge</span><br><span class="line">          PCI 19e5:3714</span><br><span class="line">        PCIBridge</span><br><span class="line">          PCI 19e5:3714</span><br><span class="line">      HostBridge L#11</span><br><span class="line">        PCI 19e5:a230</span><br><span class="line">        PCI 19e5:a235</span><br><span class="line">        PCI 19e5:a230</span><br><span class="line">    NUMANode L#3 (P#3 191GB) + L3 L#3 (24MB)</span><br><span class="line">      L2 L#72 (512KB) + L1d L#72 (64KB) + L1i L#72 (64KB) + Core L#72 + PU L#72 (P#72)</span><br><span class="line">      L2 L#73 (512KB) + L1d L#73 (64KB) + L1i L#73 (64KB) + Core L#73 + PU L#73 (P#73)</span><br><span class="line">      L2 L#74 (512KB) + L1d L#74 (64KB) + L1i L#74 (64KB) + Core L#74 + PU L#74 (P#74)</span><br><span class="line">      L2 L#75 (512KB) + L1d L#75 (64KB) + L1i L#75 (64KB) + Core L#75 + PU L#75 (P#75)</span><br><span class="line">      L2 L#76 (512KB) + L1d L#76 (64KB) + L1i L#76 (64KB) + Core L#76 + PU L#76 (P#76)</span><br><span class="line">      L2 L#77 (512KB) + L1d L#77 (64KB) + L1i L#77 (64KB) + Core L#77 + PU L#77 (P#77)</span><br><span class="line">      L2 L#78 (512KB) + L1d L#78 (64KB) + L1i L#78 (64KB) + Core L#78 + PU L#78 (P#78)</span><br><span class="line">      L2 L#79 (512KB) + L1d L#79 (64KB) + L1i L#79 (64KB) + Core L#79 + PU L#79 (P#79)</span><br><span class="line">      L2 L#80 (512KB) + L1d L#80 (64KB) + L1i L#80 (64KB) + Core L#80 + PU L#80 (P#80)</span><br><span class="line">      L2 L#81 (512KB) + L1d L#81 (64KB) + L1i L#81 (64KB) + Core L#81 + PU L#81 (P#81)</span><br><span class="line">      L2 L#82 (512KB) + L1d L#82 (64KB) + L1i L#82 (64KB) + Core L#82 + PU L#82 (P#82)</span><br><span class="line">      L2 L#83 (512KB) + L1d L#83 (64KB) + L1i L#83 (64KB) + Core L#83 + PU L#83 (P#83)</span><br><span class="line">      L2 L#84 (512KB) + L1d L#84 (64KB) + L1i L#84 (64KB) + Core L#84 + PU L#84 (P#84)</span><br><span class="line">      L2 L#85 (512KB) + L1d L#85 (64KB) + L1i L#85 (64KB) + Core L#85 + PU L#85 (P#85)</span><br><span class="line">      L2 L#86 (512KB) + L1d L#86 (64KB) + L1i L#86 (64KB) + Core L#86 + PU L#86 (P#86)</span><br><span class="line">      L2 L#87 (512KB) + L1d L#87 (64KB) + L1i L#87 (64KB) + Core L#87 + PU L#87 (P#87)</span><br><span class="line">      L2 L#88 (512KB) + L1d L#88 (64KB) + L1i L#88 (64KB) + Core L#88 + PU L#88 (P#88)</span><br><span class="line">      L2 L#89 (512KB) + L1d L#89 (64KB) + L1i L#89 (64KB) + Core L#89 + PU L#89 (P#89)</span><br><span class="line">      L2 L#90 (512KB) + L1d L#90 (64KB) + L1i L#90 (64KB) + Core L#90 + PU L#90 (P#90)</span><br><span class="line">      L2 L#91 (512KB) + L1d L#91 (64KB) + L1i L#91 (64KB) + Core L#91 + PU L#91 (P#91)</span><br><span class="line">      L2 L#92 (512KB) + L1d L#92 (64KB) + L1i L#92 (64KB) + Core L#92 + PU L#92 (P#92)</span><br><span class="line">      L2 L#93 (512KB) + L1d L#93 (64KB) + L1i L#93 (64KB) + Core L#93 + PU L#93 (P#93)</span><br><span class="line">      L2 L#94 (512KB) + L1d L#94 (64KB) + L1i L#94 (64KB) + Core L#94 + PU L#94 (P#94)</span><br><span class="line">      L2 L#95 (512KB) + L1d L#95 (64KB) + L1i L#95 (64KB) + Core L#95 + PU L#95 (P#95)</span><br><span class="line">  Misc(MemoryModule)</span><br><span class="line">  Misc(MemoryModule)</span><br><span class="line">  Misc(MemoryModule)</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">Node Distance:</span><br><span class="line">node 0 &lt;------------ socket distance ------------&gt; node 2</span><br><span class="line">    | (die distance)                                  | (die distance)</span><br><span class="line">node 1                                             node 3</span><br></pre></td></tr></table></figure><p>图形化查看（打开大图，和前面的intel 对着看）</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/FkQmi4qpCEyiJ-OlK2MbqfbmbMts.png" alt="img"></p><p>思考：看如上鲲鹏机器的结构你应该知道网卡、硬盘怎么插放的了吧，然后想就近搞点优化也是可以的</p><h2 id="飞腾2500"><a href="#飞腾2500" class="headerlink" title="飞腾2500"></a>飞腾2500</h2><p>飞腾的解读留给大家当作业</p><p><a href="https://plantegg.github.io/2021/05/15/%E9%A3%9E%E8%85%BEARM%E8%8A%AF%E7%89%87(FT2500)%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/">https://plantegg.github.io/2021/05/15/%E9%A3%9E%E8%85%BEARM%E8%8A%AF%E7%89%87(FT2500)%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">#dmidecode -t processor</span><br><span class="line"># dmidecode 3.0</span><br><span class="line">Getting SMBIOS data from sysfs.</span><br><span class="line">SMBIOS 3.2.0 present.</span><br><span class="line"># SMBIOS implementations newer than version 3.0 are not</span><br><span class="line"># fully supported by this version of dmidecode.</span><br><span class="line">Handle 0x0004, DMI type 4, 48 bytes</span><br><span class="line">Processor Information</span><br><span class="line">    Socket Designation: BGA3576</span><br><span class="line">    Type: Central Processor</span><br><span class="line">    Family: &lt;OUT OF SPEC&gt;</span><br><span class="line">    Manufacturer: PHYTIUM</span><br><span class="line">    ID: 00 00 00 00 70 1F 66 22</span><br><span class="line">    Version: FT2500</span><br><span class="line">    Voltage: 0.8 V</span><br><span class="line">    External Clock: 50 MHz</span><br><span class="line">    Max Speed: 2100 MHz</span><br><span class="line">    Current Speed: 2100 MHz</span><br><span class="line">    Status: Populated, Enabled</span><br><span class="line">    Upgrade: Other</span><br><span class="line">    L1 Cache Handle: 0x0005</span><br><span class="line">    L2 Cache Handle: 0x0007</span><br><span class="line">    L3 Cache Handle: 0x0008</span><br><span class="line">    Serial Number: 1234567</span><br><span class="line">    Asset Tag: No Asset Tag</span><br><span class="line">    Part Number: NULL</span><br><span class="line">    Core Count: 64</span><br><span class="line">    Core Enabled: 64</span><br><span class="line">    Thread Count: 64</span><br><span class="line">    Characteristics:</span><br><span class="line">        64-bit capable</span><br><span class="line">        Multi-Core</span><br><span class="line">        Hardware Thread</span><br><span class="line">        Execute Protection</span><br><span class="line">        Enhanced Virtualization</span><br><span class="line">        Power/Performance Control</span><br><span class="line">#lscpu</span><br><span class="line">Architecture:          aarch64</span><br><span class="line">Byte Order:            Little Endian</span><br><span class="line">CPU(s):                128</span><br><span class="line">On-line CPU(s) list:   0-127</span><br><span class="line">Thread(s) per core:    1</span><br><span class="line">Core(s) per socket:    64</span><br><span class="line">Socket(s):             2</span><br><span class="line">NUMA node(s):          16</span><br><span class="line">Model:                 3</span><br><span class="line">BogoMIPS:              100.00</span><br><span class="line">L1d cache:             32K</span><br><span class="line">L1i cache:             32K</span><br><span class="line">L2 cache:              2048K   //2M？太大了，不真实，估计和海光一样骚</span><br><span class="line">L3 cache:              65536K</span><br><span class="line">NUMA node0 CPU(s):     0-7</span><br><span class="line">NUMA node1 CPU(s):     8-15</span><br><span class="line">NUMA node2 CPU(s):     16-23</span><br><span class="line">NUMA node3 CPU(s):     24-31</span><br><span class="line">NUMA node4 CPU(s):     32-39</span><br><span class="line">NUMA node5 CPU(s):     40-47</span><br><span class="line">NUMA node6 CPU(s):     48-55</span><br><span class="line">NUMA node7 CPU(s):     56-63</span><br><span class="line">NUMA node8 CPU(s):     64-71</span><br><span class="line">NUMA node9 CPU(s):     72-79</span><br><span class="line">NUMA node10 CPU(s):    80-87</span><br><span class="line">NUMA node11 CPU(s):    88-95</span><br><span class="line">NUMA node12 CPU(s):    96-103</span><br><span class="line">NUMA node13 CPU(s):    104-111</span><br><span class="line">NUMA node14 CPU(s):    112-119</span><br><span class="line">NUMA node15 CPU(s):    120-127</span><br><span class="line">Flags:                 fp asimd evtstrm aes pmull sha1 sha2 crc32 cpuid</span><br><span class="line">node distances:</span><br><span class="line">node   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15</span><br><span class="line">  0:  10  20  40  30  20  30  50  40  100  100  100  100  100  100  100  100</span><br><span class="line">  1:  20  10  30  40  50  20  40  50  100  100  100  100  100  100  100  100</span><br><span class="line">  2:  40  30  10  20  40  50  20  30  100  100  100  100  100  100  100  100</span><br><span class="line">  3:  30  40  20  10  30  20  40  50  100  100  100  100  100  100  100  100</span><br><span class="line">  4:  20  50  40  30  10  50  30  20  100  100  100  100  100  100  100  100</span><br><span class="line">  5:  30  20  50  20  50  10  50  40  100  100  100  100  100  100  100  100</span><br><span class="line">  6:  50  40  20  40  30  50  10  30  100  100  100  100  100  100  100  100</span><br><span class="line">  7:  40  50  30  50  20  40  30  10  100  100  100  100  100  100  100  100</span><br><span class="line">  8:  100  100  100  100  100  100  100  100  10  20  40  30  20  30  50  40</span><br><span class="line">  9:  100  100  100  100  100  100  100  100  20  10  30  40  50  20  40  50</span><br><span class="line"> 10:  100  100  100  100  100  100  100  100  40  30  10  20  40  50  20  30</span><br><span class="line"> 11:  100  100  100  100  100  100  100  100  30  40  20  10  30  20  40  50</span><br><span class="line"> 12:  100  100  100  100  100  100  100  100  20  50  40  30  10  50  30  20</span><br><span class="line"> 13:  100  100  100  100  100  100  100  100  30  20  50  20  50  10  50  40</span><br><span class="line"> 14:  100  100  100  100  100  100  100  100  50  40  20  40  30  50  10  30</span><br><span class="line"> 15:  100  100  100  100  100  100  100  100  40  50  30  50  20  40  30  10</span><br></pre></td></tr></table></figure><p>飞腾的核有点多，我省略了一些</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">#lstopo-no-graphics --logical</span><br><span class="line">Machine (503GB total)</span><br><span class="line">  Package L#0 + L3 L#0 (64MB)</span><br><span class="line">    NUMANode L#0 (P#0 31GB)</span><br><span class="line">      L2 L#0 (2048KB)  //4个物理core共享2M，是不是和AMD(海光)那个设计有点像</span><br><span class="line">        L1d L#0 (32KB) + L1i L#0 (32KB) + Core L#0 + PU L#0 (P#0)</span><br><span class="line">        L1d L#1 (32KB) + L1i L#1 (32KB) + Core L#1 + PU L#1 (P#1)</span><br><span class="line">        L1d L#2 (32KB) + L1i L#2 (32KB) + Core L#2 + PU L#2 (P#2)</span><br><span class="line">        L1d L#3 (32KB) + L1i L#3 (32KB) + Core L#3 + PU L#3 (P#3)</span><br><span class="line">      L2 L#1 (2048KB)</span><br><span class="line">        L1d L#4 (32KB) + L1i L#4 (32KB) + Core L#4 + PU L#4 (P#4)</span><br><span class="line">        L1d L#5 (32KB) + L1i L#5 (32KB) + Core L#5 + PU L#5 (P#5)</span><br><span class="line">        L1d L#6 (32KB) + L1i L#6 (32KB) + Core L#6 + PU L#6 (P#6)</span><br><span class="line">        L1d L#7 (32KB) + L1i L#7 (32KB) + Core L#7 + PU L#7 (P#7)</span><br><span class="line">      HostBridge L#0</span><br><span class="line">        PCIBridge</span><br><span class="line">          PCIBridge</span><br><span class="line">            PCIBridge</span><br><span class="line">              PCI 1000:00ac</span><br><span class="line">                Block(Disk) L#0 &quot;sdh&quot;</span><br><span class="line">                Block(Disk) L#1 &quot;sdf&quot;  // 磁盘挂在Node0上</span><br><span class="line">            PCIBridge</span><br><span class="line">              PCI 8086:1521</span><br><span class="line">                Net L#13 &quot;eth0&quot;</span><br><span class="line">              PCI 8086:1521</span><br><span class="line">                Net L#14 &quot;eth1&quot;       //网卡挂在node0上</span><br><span class="line">        PCIBridge</span><br><span class="line">          PCIBridge</span><br><span class="line">            PCI 1a03:2000</span><br><span class="line">              GPU L#15 &quot;controlD64&quot;</span><br><span class="line">              GPU L#16 &quot;card0&quot;</span><br><span class="line">    NUMANode L#1 (P#1 31GB) //都被我省略了</span><br><span class="line">    NUMANode L#2 (P#2 31GB)</span><br><span class="line">    NUMANode L#3 (P#3 31GB)</span><br><span class="line">    NUMANode L#4 (P#4 31GB)</span><br><span class="line">    NUMANode L#5 (P#5 31GB)</span><br><span class="line">    NUMANode L#6 (P#6 31GB)</span><br><span class="line">    NUMANode L#7 (P#7 31GB) //第1个Socket的最后一个Node</span><br><span class="line">      L2 L#14 (2048KB)</span><br><span class="line">        L1d L#56 (32KB) + L1i L#56 (32KB) + Core L#56 + PU L#56 (P#56)</span><br><span class="line">        L1d L#57 (32KB) + L1i L#57 (32KB) + Core L#57 + PU L#57 (P#57)</span><br><span class="line">        L1d L#58 (32KB) + L1i L#58 (32KB) + Core L#58 + PU L#58 (P#58)</span><br><span class="line">        L1d L#59 (32KB) + L1i L#59 (32KB) + Core L#59 + PU L#59 (P#59)</span><br><span class="line">      L2 L#15 (2048KB)</span><br><span class="line">        L1d L#60 (32KB) + L1i L#60 (32KB) + Core L#60 + PU L#60 (P#60)</span><br><span class="line">        L1d L#61 (32KB) + L1i L#61 (32KB) + Core L#61 + PU L#61 (P#61)</span><br><span class="line">        L1d L#62 (32KB) + L1i L#62 (32KB) + Core L#62 + PU L#62 (P#62)</span><br><span class="line">        L1d L#63 (32KB) + L1i L#63 (32KB) + Core L#63 + PU L#63 (P#63)</span><br><span class="line">  Package L#1 + L3 L#1 (64MB)   //第二个Socket，也是8个Node</span><br><span class="line">    NUMANode L#8 (P#8 31GB)</span><br><span class="line">      L2 L#16 (2048KB)</span><br><span class="line">        L1d L#64 (32KB) + L1i L#64 (32KB) + Core L#64 + PU L#64 (P#64)</span><br><span class="line">        L1d L#65 (32KB) + L1i L#65 (32KB) + Core L#65 + PU L#65 (P#65)</span><br><span class="line">        L1d L#66 (32KB) + L1i L#66 (32KB) + Core L#66 + PU L#66 (P#66)</span><br><span class="line">        L1d L#67 (32KB) + L1i L#67 (32KB) + Core L#67 + PU L#67 (P#67)</span><br><span class="line">      L2 L#17 (2048KB)</span><br><span class="line">        L1d L#68 (32KB) + L1i L#68 (32KB) + Core L#68 + PU L#68 (P#68)</span><br><span class="line">        L1d L#69 (32KB) + L1i L#69 (32KB) + Core L#69 + PU L#69 (P#69)</span><br><span class="line">        L1d L#70 (32KB) + L1i L#70 (32KB) + Core L#70 + PU L#70 (P#70)</span><br><span class="line">        L1d L#71 (32KB) + L1i L#71 (32KB) + Core L#71 + PU L#71 (P#71)</span><br><span class="line">      HostBridge L#7</span><br><span class="line">        PCIBridge</span><br><span class="line">          PCIBridge</span><br><span class="line">            PCIBridge</span><br><span class="line">              PCI 15b3:1015</span><br><span class="line">                Net L#17 &quot;eth2&quot;   //node8 上的网卡，eth2、eth3做了bonding</span><br><span class="line">              PCI 15b3:1015</span><br><span class="line">                Net L#18 &quot;eth3&quot;</span><br><span class="line">            PCIBridge</span><br><span class="line">              PCI 144d:a808</span><br><span class="line">            PCIBridge</span><br><span class="line">              PCI 144d:a808</span><br></pre></td></tr></table></figure><h2 id="不知名的一款CPU"><a href="#不知名的一款CPU" class="headerlink" title="不知名的一款CPU"></a>不知名的一款CPU</h2><p>当练习看看,随便看看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line">#lscpu</span><br><span class="line">Architecture:          aarch64</span><br><span class="line">Byte Order:            Little Endian</span><br><span class="line">CPU(s):                128</span><br><span class="line">On-line CPU(s) list:   0-127</span><br><span class="line">Thread(s) per core:    1</span><br><span class="line">Core(s) per socket:    128</span><br><span class="line">Socket(s):             1</span><br><span class="line">NUMA node(s):          2</span><br><span class="line">Model:                 0</span><br><span class="line">BogoMIPS:              100.00</span><br><span class="line">L1d cache:             64K</span><br><span class="line">L1i cache:             64K</span><br><span class="line">L2 cache:              1024K</span><br><span class="line">L3 cache:              65536K</span><br><span class="line">NUMA node0 CPU(s):     0-63</span><br><span class="line">NUMA node1 CPU(s):     64-127</span><br><span class="line"></span><br><span class="line">#free -g</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           1007         160         511           0         335         840</span><br><span class="line">Swap:             0           0           0</span><br><span class="line"></span><br><span class="line">#lstopo-no-graphics</span><br><span class="line">Machine (1008GB) + Socket L#0 (1008GB)</span><br><span class="line">  NUMANode L#0 (P#0 504GB)</span><br><span class="line">    L3 L#0 (64MB)</span><br><span class="line">      L2 L#0 (1024KB) + L1d L#0 (64KB) + L1i L#0 (64KB) + Core L#0 + PU L#0 (P#0)</span><br><span class="line">      L2 L#1 (1024KB) + L1d L#1 (64KB) + L1i L#1 (64KB) + Core L#1 + PU L#1 (P#1)</span><br><span class="line">      L2 L#2 (1024KB) + L1d L#2 (64KB) + L1i L#2 (64KB) + Core L#2 + PU L#2 (P#2)</span><br><span class="line">      L2 L#3 (1024KB) + L1d L#3 (64KB) + L1i L#3 (64KB) + Core L#3 + PU L#3 (P#3)</span><br><span class="line">      L2 L#4 (1024KB) + L1d L#4 (64KB) + L1i L#4 (64KB) + Core L#4 + PU L#4 (P#4)</span><br><span class="line">      L2 L#5 (1024KB) + L1d L#5 (64KB) + L1i L#5 (64KB) + Core L#5 + PU L#5 (P#5)</span><br><span class="line">      L2 L#6 (1024KB) + L1d L#6 (64KB) + L1i L#6 (64KB) + Core L#6 + PU L#6 (P#6)</span><br><span class="line">      L2 L#7 (1024KB) + L1d L#7 (64KB) + L1i L#7 (64KB) + Core L#7 + PU L#7 (P#7)</span><br><span class="line">      L2 L#8 (1024KB) + L1d L#8 (64KB) + L1i L#8 (64KB) + Core L#8 + PU L#8 (P#8)</span><br><span class="line">      L2 L#9 (1024KB) + L1d L#9 (64KB) + L1i L#9 (64KB) + Core L#9 + PU L#9 (P#9)</span><br><span class="line">      L2 L#10 (1024KB) + L1d L#10 (64KB) + L1i L#10 (64KB) + Core L#10 + PU L#10 (P#10)</span><br><span class="line">      L2 L#11 (1024KB) + L1d L#11 (64KB) + L1i L#11 (64KB) + Core L#11 + PU L#11 (P#11)</span><br><span class="line">      L2 L#12 (1024KB) + L1d L#12 (64KB) + L1i L#12 (64KB) + Core L#12 + PU L#12 (P#12)</span><br><span class="line">      L2 L#13 (1024KB) + L1d L#13 (64KB) + L1i L#13 (64KB) + Core L#13 + PU L#13 (P#13)</span><br><span class="line">      L2 L#14 (1024KB) + L1d L#14 (64KB) + L1i L#14 (64KB) + Core L#14 + PU L#14 (P#14)</span><br><span class="line">      L2 L#15 (1024KB) + L1d L#15 (64KB) + L1i L#15 (64KB) + Core L#15 + PU L#15 (P#15)</span><br><span class="line">      L2 L#16 (1024KB) + L1d L#16 (64KB) + L1i L#16 (64KB) + Core L#16 + PU L#16 (P#16)</span><br><span class="line">      L2 L#17 (1024KB) + L1d L#17 (64KB) + L1i L#17 (64KB) + Core L#17 + PU L#17 (P#17)</span><br><span class="line">      L2 L#18 (1024KB) + L1d L#18 (64KB) + L1i L#18 (64KB) + Core L#18 + PU L#18 (P#18)</span><br><span class="line">      L2 L#19 (1024KB) + L1d L#19 (64KB) + L1i L#19 (64KB) + Core L#19 + PU L#19 (P#19)</span><br><span class="line">      L2 L#20 (1024KB) + L1d L#20 (64KB) + L1i L#20 (64KB) + Core L#20 + PU L#20 (P#20)</span><br><span class="line">      L2 L#21 (1024KB) + L1d L#21 (64KB) + L1i L#21 (64KB) + Core L#21 + PU L#21 (P#21)</span><br><span class="line">      L2 L#22 (1024KB) + L1d L#22 (64KB) + L1i L#22 (64KB) + Core L#22 + PU L#22 (P#22)</span><br><span class="line">      L2 L#23 (1024KB) + L1d L#23 (64KB) + L1i L#23 (64KB) + Core L#23 + PU L#23 (P#23)</span><br><span class="line">      L2 L#24 (1024KB) + L1d L#24 (64KB) + L1i L#24 (64KB) + Core L#24 + PU L#24 (P#24)</span><br><span class="line">      L2 L#25 (1024KB) + L1d L#25 (64KB) + L1i L#25 (64KB) + Core L#25 + PU L#25 (P#25)</span><br><span class="line">      L2 L#26 (1024KB) + L1d L#26 (64KB) + L1i L#26 (64KB) + Core L#26 + PU L#26 (P#26)</span><br><span class="line">      L2 L#27 (1024KB) + L1d L#27 (64KB) + L1i L#27 (64KB) + Core L#27 + PU L#27 (P#27)</span><br><span class="line">      L2 L#28 (1024KB) + L1d L#28 (64KB) + L1i L#28 (64KB) + Core L#28 + PU L#28 (P#28)</span><br><span class="line">      L2 L#29 (1024KB) + L1d L#29 (64KB) + L1i L#29 (64KB) + Core L#29 + PU L#29 (P#29)</span><br><span class="line">      L2 L#30 (1024KB) + L1d L#30 (64KB) + L1i L#30 (64KB) + Core L#30 + PU L#30 (P#30)</span><br><span class="line">      L2 L#31 (1024KB) + L1d L#31 (64KB) + L1i L#31 (64KB) + Core L#31 + PU L#31 (P#31)</span><br><span class="line">      L2 L#32 (1024KB) + L1d L#32 (64KB) + L1i L#32 (64KB) + Core L#32 + PU L#32 (P#32)</span><br><span class="line">      L2 L#33 (1024KB) + L1d L#33 (64KB) + L1i L#33 (64KB) + Core L#33 + PU L#33 (P#33)</span><br><span class="line">      L2 L#34 (1024KB) + L1d L#34 (64KB) + L1i L#34 (64KB) + Core L#34 + PU L#34 (P#34)</span><br><span class="line">      L2 L#35 (1024KB) + L1d L#35 (64KB) + L1i L#35 (64KB) + Core L#35 + PU L#35 (P#35)</span><br><span class="line">      L2 L#36 (1024KB) + L1d L#36 (64KB) + L1i L#36 (64KB) + Core L#36 + PU L#36 (P#36)</span><br><span class="line">      L2 L#37 (1024KB) + L1d L#37 (64KB) + L1i L#37 (64KB) + Core L#37 + PU L#37 (P#37)</span><br><span class="line">      L2 L#38 (1024KB) + L1d L#38 (64KB) + L1i L#38 (64KB) + Core L#38 + PU L#38 (P#38)</span><br><span class="line">      L2 L#39 (1024KB) + L1d L#39 (64KB) + L1i L#39 (64KB) + Core L#39 + PU L#39 (P#39)</span><br><span class="line">      L2 L#40 (1024KB) + L1d L#40 (64KB) + L1i L#40 (64KB) + Core L#40 + PU L#40 (P#40)</span><br><span class="line">      L2 L#41 (1024KB) + L1d L#41 (64KB) + L1i L#41 (64KB) + Core L#41 + PU L#41 (P#41)</span><br><span class="line">      L2 L#42 (1024KB) + L1d L#42 (64KB) + L1i L#42 (64KB) + Core L#42 + PU L#42 (P#42)</span><br><span class="line">      L2 L#43 (1024KB) + L1d L#43 (64KB) + L1i L#43 (64KB) + Core L#43 + PU L#43 (P#43)</span><br><span class="line">      L2 L#44 (1024KB) + L1d L#44 (64KB) + L1i L#44 (64KB) + Core L#44 + PU L#44 (P#44)</span><br><span class="line">      L2 L#45 (1024KB) + L1d L#45 (64KB) + L1i L#45 (64KB) + Core L#45 + PU L#45 (P#45)</span><br><span class="line">      L2 L#46 (1024KB) + L1d L#46 (64KB) + L1i L#46 (64KB) + Core L#46 + PU L#46 (P#46)</span><br><span class="line">      L2 L#47 (1024KB) + L1d L#47 (64KB) + L1i L#47 (64KB) + Core L#47 + PU L#47 (P#47)</span><br><span class="line">      L2 L#48 (1024KB) + L1d L#48 (64KB) + L1i L#48 (64KB) + Core L#48 + PU L#48 (P#48)</span><br><span class="line">      L2 L#49 (1024KB) + L1d L#49 (64KB) + L1i L#49 (64KB) + Core L#49 + PU L#49 (P#49)</span><br><span class="line">      L2 L#50 (1024KB) + L1d L#50 (64KB) + L1i L#50 (64KB) + Core L#50 + PU L#50 (P#50)</span><br><span class="line">      L2 L#51 (1024KB) + L1d L#51 (64KB) + L1i L#51 (64KB) + Core L#51 + PU L#51 (P#51)</span><br><span class="line">      L2 L#52 (1024KB) + L1d L#52 (64KB) + L1i L#52 (64KB) + Core L#52 + PU L#52 (P#52)</span><br><span class="line">      L2 L#53 (1024KB) + L1d L#53 (64KB) + L1i L#53 (64KB) + Core L#53 + PU L#53 (P#53)</span><br><span class="line">      L2 L#54 (1024KB) + L1d L#54 (64KB) + L1i L#54 (64KB) + Core L#54 + PU L#54 (P#54)</span><br><span class="line">      L2 L#55 (1024KB) + L1d L#55 (64KB) + L1i L#55 (64KB) + Core L#55 + PU L#55 (P#55)</span><br><span class="line">      L2 L#56 (1024KB) + L1d L#56 (64KB) + L1i L#56 (64KB) + Core L#56 + PU L#56 (P#56)</span><br><span class="line">      L2 L#57 (1024KB) + L1d L#57 (64KB) + L1i L#57 (64KB) + Core L#57 + PU L#57 (P#57)</span><br><span class="line">      L2 L#58 (1024KB) + L1d L#58 (64KB) + L1i L#58 (64KB) + Core L#58 + PU L#58 (P#58)</span><br><span class="line">      L2 L#59 (1024KB) + L1d L#59 (64KB) + L1i L#59 (64KB) + Core L#59 + PU L#59 (P#59)</span><br><span class="line">      L2 L#60 (1024KB) + L1d L#60 (64KB) + L1i L#60 (64KB) + Core L#60 + PU L#60 (P#60)</span><br><span class="line">      L2 L#61 (1024KB) + L1d L#61 (64KB) + L1i L#61 (64KB) + Core L#61 + PU L#61 (P#61)</span><br><span class="line">      L2 L#62 (1024KB) + L1d L#62 (64KB) + L1i L#62 (64KB) + Core L#62 + PU L#62 (P#62)</span><br><span class="line">      L2 L#63 (1024KB) + L1d L#63 (64KB) + L1i L#63 (64KB) + Core L#63 + PU L#63 (P#63)</span><br><span class="line">    HostBridge L#0</span><br><span class="line">      PCIBridge</span><br><span class="line">        PCIBridge</span><br><span class="line">          PCI 1a03:2000</span><br><span class="line">            GPU L#0 &quot;controlD64&quot;</span><br><span class="line">            GPU L#1 &quot;card0&quot;</span><br><span class="line">      PCIBridge</span><br><span class="line">        PCI 1b4b:9235</span><br><span class="line">    HostBridge L#4</span><br><span class="line">      PCI 1ded:8001</span><br><span class="line">      PCI 1ded:8003</span><br><span class="line">  NUMANode L#1 (P#1 504GB)</span><br><span class="line">    L3 L#1 (64MB)</span><br><span class="line">      L2 L#64 (1024KB) + L1d L#64 (64KB) + L1i L#64 (64KB) + Core L#64 + PU L#64 (P#64)</span><br><span class="line">      L2 L#65 (1024KB) + L1d L#65 (64KB) + L1i L#65 (64KB) + Core L#65 + PU L#65 (P#65)</span><br><span class="line">      L2 L#66 (1024KB) + L1d L#66 (64KB) + L1i L#66 (64KB) + Core L#66 + PU L#66 (P#66)</span><br><span class="line">      L2 L#67 (1024KB) + L1d L#67 (64KB) + L1i L#67 (64KB) + Core L#67 + PU L#67 (P#67)</span><br><span class="line">      L2 L#68 (1024KB) + L1d L#68 (64KB) + L1i L#68 (64KB) + Core L#68 + PU L#68 (P#68)</span><br><span class="line">      L2 L#69 (1024KB) + L1d L#69 (64KB) + L1i L#69 (64KB) + Core L#69 + PU L#69 (P#69)</span><br><span class="line">      L2 L#70 (1024KB) + L1d L#70 (64KB) + L1i L#70 (64KB) + Core L#70 + PU L#70 (P#70)</span><br><span class="line">      L2 L#71 (1024KB) + L1d L#71 (64KB) + L1i L#71 (64KB) + Core L#71 + PU L#71 (P#71)</span><br><span class="line">      L2 L#72 (1024KB) + L1d L#72 (64KB) + L1i L#72 (64KB) + Core L#72 + PU L#72 (P#72)</span><br><span class="line">      L2 L#73 (1024KB) + L1d L#73 (64KB) + L1i L#73 (64KB) + Core L#73 + PU L#73 (P#73)</span><br><span class="line">      L2 L#74 (1024KB) + L1d L#74 (64KB) + L1i L#74 (64KB) + Core L#74 + PU L#74 (P#74)</span><br><span class="line">      L2 L#75 (1024KB) + L1d L#75 (64KB) + L1i L#75 (64KB) + Core L#75 + PU L#75 (P#75)</span><br><span class="line">      L2 L#76 (1024KB) + L1d L#76 (64KB) + L1i L#76 (64KB) + Core L#76 + PU L#76 (P#76)</span><br><span class="line">      L2 L#77 (1024KB) + L1d L#77 (64KB) + L1i L#77 (64KB) + Core L#77 + PU L#77 (P#77)</span><br><span class="line">      L2 L#78 (1024KB) + L1d L#78 (64KB) + L1i L#78 (64KB) + Core L#78 + PU L#78 (P#78)</span><br><span class="line">      L2 L#79 (1024KB) + L1d L#79 (64KB) + L1i L#79 (64KB) + Core L#79 + PU L#79 (P#79)</span><br><span class="line">      L2 L#80 (1024KB) + L1d L#80 (64KB) + L1i L#80 (64KB) + Core L#80 + PU L#80 (P#80)</span><br><span class="line">      L2 L#81 (1024KB) + L1d L#81 (64KB) + L1i L#81 (64KB) + Core L#81 + PU L#81 (P#81)</span><br><span class="line">      L2 L#82 (1024KB) + L1d L#82 (64KB) + L1i L#82 (64KB) + Core L#82 + PU L#82 (P#82)</span><br><span class="line">      L2 L#83 (1024KB) + L1d L#83 (64KB) + L1i L#83 (64KB) + Core L#83 + PU L#83 (P#83)</span><br><span class="line">      L2 L#84 (1024KB) + L1d L#84 (64KB) + L1i L#84 (64KB) + Core L#84 + PU L#84 (P#84)</span><br><span class="line">      L2 L#85 (1024KB) + L1d L#85 (64KB) + L1i L#85 (64KB) + Core L#85 + PU L#85 (P#85)</span><br><span class="line">      L2 L#86 (1024KB) + L1d L#86 (64KB) + L1i L#86 (64KB) + Core L#86 + PU L#86 (P#86)</span><br><span class="line">      L2 L#87 (1024KB) + L1d L#87 (64KB) + L1i L#87 (64KB) + Core L#87 + PU L#87 (P#87)</span><br><span class="line">      L2 L#88 (1024KB) + L1d L#88 (64KB) + L1i L#88 (64KB) + Core L#88 + PU L#88 (P#88)</span><br><span class="line">      L2 L#89 (1024KB) + L1d L#89 (64KB) + L1i L#89 (64KB) + Core L#89 + PU L#89 (P#89)</span><br><span class="line">      L2 L#90 (1024KB) + L1d L#90 (64KB) + L1i L#90 (64KB) + Core L#90 + PU L#90 (P#90)</span><br><span class="line">      L2 L#91 (1024KB) + L1d L#91 (64KB) + L1i L#91 (64KB) + Core L#91 + PU L#91 (P#91)</span><br><span class="line">      L2 L#92 (1024KB) + L1d L#92 (64KB) + L1i L#92 (64KB) + Core L#92 + PU L#92 (P#92)</span><br><span class="line">      L2 L#93 (1024KB) + L1d L#93 (64KB) + L1i L#93 (64KB) + Core L#93 + PU L#93 (P#93)</span><br><span class="line">      L2 L#94 (1024KB) + L1d L#94 (64KB) + L1i L#94 (64KB) + Core L#94 + PU L#94 (P#94)</span><br><span class="line">      L2 L#95 (1024KB) + L1d L#95 (64KB) + L1i L#95 (64KB) + Core L#95 + PU L#95 (P#95)</span><br><span class="line">      L2 L#96 (1024KB) + L1d L#96 (64KB) + L1i L#96 (64KB) + Core L#96 + PU L#96 (P#96)</span><br><span class="line">      L2 L#97 (1024KB) + L1d L#97 (64KB) + L1i L#97 (64KB) + Core L#97 + PU L#97 (P#97)</span><br><span class="line">      L2 L#98 (1024KB) + L1d L#98 (64KB) + L1i L#98 (64KB) + Core L#98 + PU L#98 (P#98)</span><br><span class="line">      L2 L#99 (1024KB) + L1d L#99 (64KB) + L1i L#99 (64KB) + Core L#99 + PU L#99 (P#99)</span><br><span class="line">      L2 L#100 (1024KB) + L1d L#100 (64KB) + L1i L#100 (64KB) + Core L#100 + PU L#100 (P#100)</span><br><span class="line">      L2 L#101 (1024KB) + L1d L#101 (64KB) + L1i L#101 (64KB) + Core L#101 + PU L#101 (P#101)</span><br><span class="line">      L2 L#102 (1024KB) + L1d L#102 (64KB) + L1i L#102 (64KB) + Core L#102 + PU L#102 (P#102)</span><br><span class="line">      L2 L#103 (1024KB) + L1d L#103 (64KB) + L1i L#103 (64KB) + Core L#103 + PU L#103 (P#103)</span><br><span class="line">      L2 L#104 (1024KB) + L1d L#104 (64KB) + L1i L#104 (64KB) + Core L#104 + PU L#104 (P#104)</span><br><span class="line">      L2 L#105 (1024KB) + L1d L#105 (64KB) + L1i L#105 (64KB) + Core L#105 + PU L#105 (P#105)</span><br><span class="line">      L2 L#106 (1024KB) + L1d L#106 (64KB) + L1i L#106 (64KB) + Core L#106 + PU L#106 (P#106)</span><br><span class="line">      L2 L#107 (1024KB) + L1d L#107 (64KB) + L1i L#107 (64KB) + Core L#107 + PU L#107 (P#107)</span><br><span class="line">      L2 L#108 (1024KB) + L1d L#108 (64KB) + L1i L#108 (64KB) + Core L#108 + PU L#108 (P#108)</span><br><span class="line">      L2 L#109 (1024KB) + L1d L#109 (64KB) + L1i L#109 (64KB) + Core L#109 + PU L#109 (P#109)</span><br><span class="line">      L2 L#110 (1024KB) + L1d L#110 (64KB) + L1i L#110 (64KB) + Core L#110 + PU L#110 (P#110)</span><br><span class="line">      L2 L#111 (1024KB) + L1d L#111 (64KB) + L1i L#111 (64KB) + Core L#111 + PU L#111 (P#111)</span><br><span class="line">      L2 L#112 (1024KB) + L1d L#112 (64KB) + L1i L#112 (64KB) + Core L#112 + PU L#112 (P#112)</span><br><span class="line">      L2 L#113 (1024KB) + L1d L#113 (64KB) + L1i L#113 (64KB) + Core L#113 + PU L#113 (P#113)</span><br><span class="line">      L2 L#114 (1024KB) + L1d L#114 (64KB) + L1i L#114 (64KB) + Core L#114 + PU L#114 (P#114)</span><br><span class="line">      L2 L#115 (1024KB) + L1d L#115 (64KB) + L1i L#115 (64KB) + Core L#115 + PU L#115 (P#115)</span><br><span class="line">      L2 L#116 (1024KB) + L1d L#116 (64KB) + L1i L#116 (64KB) + Core L#116 + PU L#116 (P#116)</span><br><span class="line">      L2 L#117 (1024KB) + L1d L#117 (64KB) + L1i L#117 (64KB) + Core L#117 + PU L#117 (P#117)</span><br><span class="line">      L2 L#118 (1024KB) + L1d L#118 (64KB) + L1i L#118 (64KB) + Core L#118 + PU L#118 (P#118)</span><br><span class="line">      L2 L#119 (1024KB) + L1d L#119 (64KB) + L1i L#119 (64KB) + Core L#119 + PU L#119 (P#119)</span><br><span class="line">      L2 L#120 (1024KB) + L1d L#120 (64KB) + L1i L#120 (64KB) + Core L#120 + PU L#120 (P#120)</span><br><span class="line">      L2 L#121 (1024KB) + L1d L#121 (64KB) + L1i L#121 (64KB) + Core L#121 + PU L#121 (P#121)</span><br><span class="line">      L2 L#122 (1024KB) + L1d L#122 (64KB) + L1i L#122 (64KB) + Core L#122 + PU L#122 (P#122)</span><br><span class="line">      L2 L#123 (1024KB) + L1d L#123 (64KB) + L1i L#123 (64KB) + Core L#123 + PU L#123 (P#123)</span><br><span class="line">      L2 L#124 (1024KB) + L1d L#124 (64KB) + L1i L#124 (64KB) + Core L#124 + PU L#124 (P#124)</span><br><span class="line">      L2 L#125 (1024KB) + L1d L#125 (64KB) + L1i L#125 (64KB) + Core L#125 + PU L#125 (P#125)</span><br><span class="line">      L2 L#126 (1024KB) + L1d L#126 (64KB) + L1i L#126 (64KB) + Core L#126 + PU L#126 (P#126)</span><br><span class="line">      L2 L#127 (1024KB) + L1d L#127 (64KB) + L1i L#127 (64KB) + Core L#127 + PU L#127 (P#127)</span><br><span class="line">    HostBridge L#5</span><br><span class="line">      PCIBridge</span><br><span class="line">        PCI 8086:0b60</span><br><span class="line">    HostBridge L#7</span><br><span class="line">      PCIBridge</span><br><span class="line">        PCIBridge</span><br><span class="line">          PCIBridge</span><br><span class="line">            PCI 1af4:1001</span><br><span class="line">          PCIBridge</span><br><span class="line">            PCI 1ded:1001</span><br><span class="line">            PCI ffff:ffff</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>希望通过具体又不同的CPU案例展示，让你对CPU的结构有一些整体认识</p><p>请问：Hygon C86 7260 这块CPU每个Die的L2、L3分别是多大？</p><p>请思考，最近10年CPU的性能没啥大的进不了(如下图红色部分，每年3%)，但是这么多年工艺还在进步，集成的晶体管数量</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/FvXLnPB8aqT7iJJuKdMfc_rpypsa.jpeg" alt="img"></p><p>&#x2F;&#x2F;这张图每一本计算机体系结构的教材都有引用(没有的话这教材可以扔了)，你知道我博客里哪篇文章放了这图吗？从这个图你还能解析出来哪些东西？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;几款不同的CPU一些数据–备查&quot;&gt;&lt;a href=&quot;#几款不同的CPU一些数据–备查&quot; class=&quot;headerlink&quot; title=&quot;几款不同的CPU一些数据–备查&quot;&gt;&lt;/a&gt;几款不同的CPU一些数据–备查&lt;/h1&gt;&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="CPU" scheme="https://plantegg.github.io/categories/CPU/"/>
    
    
      <category term="海光" scheme="https://plantegg.github.io/tags/%E6%B5%B7%E5%85%89/"/>
    
      <category term="超线程" scheme="https://plantegg.github.io/tags/%E8%B6%85%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="Zen" scheme="https://plantegg.github.io/tags/Zen/"/>
    
      <category term="hygon" scheme="https://plantegg.github.io/tags/hygon/"/>
    
      <category term="AMD" scheme="https://plantegg.github.io/tags/AMD/"/>
    
  </entry>
  
  <entry>
    <title>你要不要搞副业</title>
    <link href="https://plantegg.github.io/2023/12/21/%E4%BD%A0%E8%A6%81%E4%B8%8D%E8%A6%81%E6%90%9E%E5%89%AF%E4%B8%9A/"/>
    <id>https://plantegg.github.io/2023/12/21/你要不要搞副业/</id>
    <published>2023-12-21T04:30:03.000Z</published>
    <updated>2024-11-20T10:00:54.564Z</updated>
    
    <content type="html"><![CDATA[<h1 id="你要不要搞副业？"><a href="#你要不要搞副业？" class="headerlink" title="你要不要搞副业？"></a>你要不要搞副业？</h1><p>最近网上看到很多讨论搞副业和远程工作的，我也说点自己的经验+看法</p><p>当然这完全是出于个人认知肯定不是完全对的、也不一定适合你，看看当个参考，经验重在真实</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>年轻人最好的<strong>副业</strong>就是做好本职工作，深耕多积累自己的专业方向，只有当你在主业上再也无法精进的时候可以考虑跳槽或者<strong>副业</strong>， 搞副业相对适合大多年纪大的人，他们触碰到了自己的天花板，可以折腾玩玩等等</p><h2 id="我搞过的副业"><a href="#我搞过的副业" class="headerlink" title="我搞过的副业"></a>我搞过的副业</h2><p>我搞过很多副业，多到我不好意思说出来。low到檫玻璃，大到开厂、买船，但是你看就是没去折腾抄房子(这些年只有炒房子的这个副业赚钱最稳、最快)。我也特别关心别人的副业、主业，熟的会打破砂锅问到底，所以下面说的只保证真实</p><h3 id="最大一笔副业"><a href="#最大一笔副业" class="headerlink" title="最大一笔副业"></a>最大一笔副业</h3><p>通过SEO接了一个国外一个订单，交给长三角的工厂代工，赚了几十万，一次性，几乎没有成本</p><p>当时帮一个做工厂的朋友做网站，域名空间都是我掏钱(要给我我没好意思要，本身不值钱)，让留个邮箱厂长没有，后来留的我的。</p><p>然后来了几个咨询的介绍给厂里了，最后成了两个客户。但是有一个韩国客户(采购是广州一个提篮子的公司)，去厂里谈了几次细节谈不好，我就出马给把细节、打样、交货谈好了。</p><p>最后做好后发货直接到韩国，发一次运费几万块(到付)，其中有一批压坏了点那个区的顺丰经理过来道歉、给定做包装箱……</p><p>缺点是做完就没有了，那个产品不具有持续性，如果可以持续我应该能继续搞，另外借着这个客户去厂里跑得多，也发展了一些其他客户利润太薄加上后来真个行情不好就实在做不下去了，产品烂大街没人要了，珠三角那个生产模仿能力都太强了</p><p>之前介绍给厂里的两个客户，厂里自己对接的，其中一个厂里赚了一些钱，另外一个飞单好几十万，人家直接注销公司赖账的玩法，所以你看风险很多。不过要是去接这个单就不会出现这种情况，你最后尾款飞几千万把块我是有预期的，整个一个订单一分钱都没拿到简直就是傻子做生意，也纵容了坏人</p><p>比如很多人靠白嫖样品吃饭，我的策略是：样品、打样都要收钱，但是正式下单就抵扣货款，这么做能淘汰90%的虚假用户，节省自己的时间。比如便宜样品可以免费但是邮费到付、你亲自上门当然可以送几个。</p><h3 id="知识星球总结"><a href="#知识星球总结" class="headerlink" title="知识星球总结"></a>知识星球总结</h3><p>做星球的话10万粉丝算是凑合，百万粉丝洒洒水啦，几万粉丝很痛苦</p><p>知识星球不适合IT技术类，他们有平台的流量，全靠自己运营；相对来说极客时间、慕课之类的能有平台给你导流；</p><p>星球的优点是入门门槛低</p><h4 id="我的星球数据"><a href="#我的星球数据" class="headerlink" title="我的星球数据"></a>我的星球数据</h4><p>开星球的时候就承诺过了，要公布数据，当时也有一部分原因是对运营一个星球的数据有着好奇</p><p>9个月的星球运营500多成员，一年收入大几万，这还只是第一年，主要靠我的推特3万多粉丝里面划拉人员过去，第二年就不会有这么多成员了，因为你不可能一年再涨2万新粉丝</p><p>我的粉丝转化率是2%，算是还不错的了，所以如果你有10万粉丝大概能有1000-2000铁粉，那差不多一年能靠这些有个20来万的收入，所以算还凑合，可以简单养家。</p><p>上点我的星球运营真实数据，先看最重要的收入数据</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20231221090708084.png" alt="image-20231221090708084"></p><p>星球刚开通前三个月收入最高，把一年的收入都提前拿走了，我这虽然才9个月，后面三个月也不用看了，几乎可以忽略：</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20231221090758574.png" alt="image-20231221090758574"></p><p>运营效果，来估算转化率</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20231221090420085.png" alt="image-20231221090420085"></p><p>我的星球讲究干货，宁缺毋滥，所以也没有其他星球常用的运维手段：作业、打卡(我恨死打卡这种傻逼行为了)</p><p>续费的话，我的星球是本月15号开通续费，我也没发通知，居然有人续费了，我猜应该是平台自动通知的：</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20231221094647500.png" alt="image-20231221094647500"></p><h4 id="星球总结"><a href="#星球总结" class="headerlink" title="星球总结"></a>星球总结</h4><ul><li>程序员成功的星球都是靠贩卖焦虑、offer、算法、面试，所以你真要想搞不要想着自己技术多好，要想想你有没有适合拿offer(这个活该赚钱)的本领</li><li>星球的活跃度靠打卡</li><li>搞一些有流量的好朋友互相吹捧、交换粉丝</li></ul><h3 id="带货"><a href="#带货" class="headerlink" title="带货"></a>带货</h3><p>这个门槛最低，你看到好的产品复制链接，到淘宝联盟上做下链接转换：<a href="https://pub.alimama.com/?forward=http://pub.alimama.com/portal/effect/order/overviewOrder/page/index.htm#!/index?curValue=nav_0&forward=" target="_blank" rel="noopener">https://pub.alimama.com/?forward=http%3A%2F%2Fpub.alimama.com%2Fportal%2Feffect%2Forder%2FoverviewOrder%2Fpage%2Findex.htm#!/index?curValue=nav_0&amp;forward=</a></p><p>到处发然后就能拿佣金了，目前国内个人带货扛把子就是个程序员，还是个高中毕业考不上大学找个培训班入行的程序员，会用Delphi写个群发工具，然后管理一堆微信、QQ群；让别人去帮他带货他能提成，这个段位又高级了一层</p><p>只靠自己的朋友圈肯定是不行的，起步得是百万粉丝才行，或者你有渠道总能搞到好的货品</p><p>给你们贴个我2023年10月的带货数据，当个参考，就是在3万粉丝的推特上带的货，转换率肯定是很惨的，为这131块的佣金你可以搜搜我发了多少推：</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20231221092640430.png" alt="image-20231221092640430"></p><p>这个工作完全可以远程——算是你们理想中的远程工作吗？但是这个市场必然只能容纳很少的人，搞好了是可以发财的 :) </p><p>如果你口才好、煽动力强不去搞自播带货都对不住自己</p><h2 id="为什么不推荐搞副业"><a href="#为什么不推荐搞副业" class="headerlink" title="为什么不推荐搞副业"></a>为什么不推荐搞副业</h2><p>副业就是副业，要不怎么不叫主业呢？真搞好了、容易搞好必然有更多的人进来把他从副业做成主业！</p><p>先把主业搞好，尤其是年轻人。副业超过主业的毕竟是极少极少，还有点运气和背景成分</p><p>投入小(钱、时间都算)可以轻度参与混点经验，但不要抱太高期望</p><p>比如我就做过统计：</p><blockquote><p>拉了一下记账软件上历年的数据，古早年代没记账就没有了，最近几年<strong>收入</strong>的话95%以上都是工资性收入，投资大概率是亏钱的，房租能有点、外快能有点，放到整体几乎可以忽略 </p><p>开支的话也他妈主要是买房+房贷，如果不考虑首付+提前还贷倒是占比不夸张，日常开支真用不了多少钱，万幸几乎没有医疗开支</p></blockquote><p>主业确定没法精进、跳槽之类的，这时可以考虑下副业，当然如果你碰到了副业的“好机会” 也可以尝试一下</p><h2 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h2><p>先试试做做博客、公众号，看自己能运营到多少粉丝，你平时上网刷口水文章也是打发，然后试试带货</p><p>程序员方向基本不来钱，虽然这些行业很赚钱，但是这里也聚集了相对聪明人，你能搞他们也能搞相对更红海一些</p><p>可以跳出技术方向或者横向关联的方向多动动脑子，门槛低竞争就必然大，比如教英语和教程序员肯定英语的市场大多了</p><p>组织活动，比如组织大家打羽毛球、滑雪，羽毛球需要水平差不多的、人多一点才好玩，一般去场馆8折拿下场地，然后大家AA费用，赚这2折的差价，一次一般能赚80块，一周多组织几次，搞得好的话一个月也有2000块，关键是顺便自己打打球，真当副业的话也很香！再要多赚也很难，不过可续性很强</p><p>上次从黄牛手里买了个医院的专家号，2000块，你以为他们有渠道？其实他们建个微信群，找一堆有闲缺钱的人，接到需求了就到群里喊一嗓子，谁有本事抢到了从2000块里分几百，这种专家号根据难易程度从几百块到几千块，真是市场化了</p><p>当然还有一些灰产黑产大家就不要碰了我也不说了，大家耗子尾汁，赚钱是应该的但是要合法</p><p>写得很零散，没有什么详细的分析和套路，就是罗列事实和数据，你可以根据自己的情况来分析考虑</p><p>你要有什么好建议和经验欢迎在推特上 <a href="https://twitter.com/plantegg" target="_blank" rel="noopener">@plantegg</a> 给我留言、私信，特别好的我会收集到博客上，这篇博客我会持续更新……</p><p>最后放个我<a href="https://plantegg.github.io/2024/02/20/%E5%BF%85%E8%AF%BB%20%E6%98%9F%E7%90%83%E6%88%90%E9%95%BF%E8%B7%AF%E5%BE%84/">星球的广告</a>：</p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20230407232314969.png" alt="image-20230407232314969" style="zoom:50%;">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;你要不要搞副业？&quot;&gt;&lt;a href=&quot;#你要不要搞副业？&quot; class=&quot;headerlink&quot; title=&quot;你要不要搞副业？&quot;&gt;&lt;/a&gt;你要不要搞副业？&lt;/h1&gt;&lt;p&gt;最近网上看到很多讨论搞副业和远程工作的，我也说点自己的经验+看法&lt;/p&gt;
&lt;p&gt;当然这完全是
      
    
    </summary>
    
      <category term="others" scheme="https://plantegg.github.io/categories/others/"/>
    
    
      <category term="副业" scheme="https://plantegg.github.io/tags/%E5%89%AF%E4%B8%9A/"/>
    
      <category term="带货" scheme="https://plantegg.github.io/tags/%E5%B8%A6%E8%B4%A7/"/>
    
      <category term="星球" scheme="https://plantegg.github.io/tags/%E6%98%9F%E7%90%83/"/>
    
      <category term="赚钱" scheme="https://plantegg.github.io/tags/%E8%B5%9A%E9%92%B1/"/>
    
  </entry>
  
  <entry>
    <title>王强2012在北大的演讲——读书毁了我</title>
    <link href="https://plantegg.github.io/2023/12/19/%E7%8E%8B%E5%BC%BA2013%E5%9C%A8%E5%8C%97%E5%A4%A7%E7%9A%84%E6%BC%94%E8%AE%B2%E2%80%94%E2%80%94%E8%AF%BB%E4%B9%A6%E6%AF%81%E4%BA%86%E6%88%91/"/>
    <id>https://plantegg.github.io/2023/12/19/王强2013在北大的演讲——读书毁了我/</id>
    <published>2023-12-19T04:30:03.000Z</published>
    <updated>2024-11-20T10:00:53.454Z</updated>
    
    <content type="html"><![CDATA[<h1 id="王强2012在北大的演讲——读书毁了我"><a href="#王强2012在北大的演讲——读书毁了我" class="headerlink" title="王强2012在北大的演讲——读书毁了我"></a>王强2012在北大的演讲——读书毁了我</h1><p>视频版本50分钟，不含问答，建议看文字版，这是视频： <a href="https://weibo.com/6033438343/Nxw2Fj2oN?pagetype=profilefeed" target="_blank" rel="noopener">https://weibo.com/6033438343/Nxw2Fj2oN?pagetype=profilefeed</a> </p><h2 id="我为什么要发这篇"><a href="#我为什么要发这篇" class="headerlink" title="我为什么要发这篇"></a>我为什么要发这篇</h2><p>到处都是私域、卖货、视频等，好的文字不多了，这篇对应视频的文字版找起来不容易，所以特意在我的博客上备一份(我的博客极少极少极少发别人的东西)，也希望你备份一下。</p><p>王强是新东方合伙人，口才一流、演讲技能一流，当脱口秀看吧。</p><p>我就只能羡慕这种智商一流的人，这人智商在北大里估计都是前10%，而你我是北大都考不上的，所以<strong>他说的方法你就看看好了，不适合你</strong>，但值得你从中间提炼适合你的不分，读经典拿书，读不懂就不要像他一样死磕，找些浅显的、增加你经验的书先看看，回头再来读经典</p><p>但大多时候我们都不知道哪些是经典，对别人是经典对你还是经典吗？</p><p>这人是个程序员，学了C 和CPP，对你有点参考意义</p><p>在我的知识星球就一直强调：不要跟着信息流跑，多去看最早发表的东西(多年沉淀的干货等等)</p><p><img src="https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20231219105757910.png" alt="image-20231219105757910"></p><p>下面是正文，扯淡栩栩如生，那不是重点。我就不给大家划重点了，都是重点:) ，文字版来自这里：<a href="https://book.douban.com/review/10286767/" target="_blank" rel="noopener">https://book.douban.com/review/10286767/</a></p><h2 id="演讲正文——读书毁了我"><a href="#演讲正文——读书毁了我" class="headerlink" title="演讲正文——读书毁了我"></a>演讲正文——读书毁了我</h2><p>王强：谢谢小平。因为小平在读书上花的时间比较少，因为我都替他读了，他只问我结论是什么，他的知识并没有落后，而我视力在衰减。当然老俞，当年我引他进入读黄色小说的境界，至今老俞还不肯自拔，他是黄种人的代表，所以他成功了。作为人生，我今年51岁，我和老俞同年同月生，不是同一天，也不是同一个地方，因为老俞比我大一周，小平比我大六岁，是我的兄长，当年克强同志是北大团委书记，他直接受克强同志领导的北大团委文化部部长，我是直接受徐小平同志掌管的第一任北大学生艺术团团长，我当时管的是英达、英壮这样的人。而俞敏洪是北大最有特权的艺术团的观众，因为经常拉幕的时候缺一个人，我们说老俞能不能帮帮忙，老俞说能让我看吗，我说当然。所以从此老俞锻炼了强大拉幕能力。所以任何细节不要忽略，都是人生。</p><p>​    </p><p>我今天想跟大家分享为什么读书在人的生命成长中非常重要。我这个题目叫”读书毁了我”，很多读者没看到这本书的内容就开始评论，说我是标题党，撒狗血。我说不是我撒，因为当年我的很多文章结集的时候徐晓，她是中国最伟大的女编辑之一，被称为京城四大美编，美女编辑。当年我说马云怎么有领袖魅力，他有领子有袖子，但没有领袖魅力，走到街上城管一定第一个扑向他，因为连人长的都不一样，像是从外星回来的，而俞敏洪长的就跟季羡林一样，就像去外星的人。小平虽然是天使，但是从体重来说，给他四双翅膀他也飞不起来。所以人啊，当你不知道要做什么事情，当你做的事情不能带给社会意义的时候，当你做的事情的意义不能给人的生命产生共鸣的时候，你的存在实际上是被人忽略的。</p><p>我现在自豪的是，我现在经常回忆，北大这个地方怎么产生企业家？因为我是内蒙古来的，我以为是学术的殿堂，清华可能产生企业家，因为他们搞科技，高科技，北大当年我们就是精神自由的三角地，都是自焚的地方，它只是结束肉体的地方，让灵魂再生的地方，从来不是做什么上市，这些好象与北大没关，但是人生经历这么多年，我发现北大为什么产生这样的人。</p><p>我就拿32楼举例，我们住的16楼没了，当时我和老俞作为北大年轻教师住在16楼，但是拿32楼文科男科楼讲，当时北大英文系来说，我们住在二层，这些年一过，发现诞生一个伟大的企业，那就是在教育界的俞敏洪为代表的新东方。再往第三层，我忽然发现当年有一个来自山西的青年，天天在水房里光着上半身，一盆冷水浇下来，唱着夜里寻他千百度，你在哪呢，天天念百度两个字，因为他是北大图书馆系的，后来诞生了百度李彦宏，当时哪能想到，因为从任何知识储备，他不能做企业，他不仅是学图书馆系，而且专业简直离成功太远，他是古典文献编目专业，清朝以后的事他都不管了，他直接奔甲骨文去了。所以他天天念where  are  you，那时一下雨雨水就没过膝盖，当时找不到了，where are you,搜索就开始了。</p><p>​    </p><p>再往上走，四层楼住着北大中文系的，当年都是产生愤怒诗人，连名字都是愤怒的不得了，黄怒波。这么多年刮目相看，他要买下冰岛,他成为了中坤集团的创始人。更匪夷所思的是，北大中文系的女生楼里出来一个长相非常平和的人，她充满着激情，最后由于自己解决终身的情感问题，她就是后来创造了世纪佳人。这些人，是中文系的、图书馆系、英文系，这些与金融、融资、管理完全没关，但是我后来想怎么会出现这么一些奇特的企业，由这些人做的，我就想到北大给了一个东西，就是怎么样塑造你生命的东西，那是对知识的渴望、饥饿，超过了性本身。当年我们对性的渴望，但是校规非常严格，同性只能找同性。但是我们还没有得到同性方面的启蒙，当时洗澡堂，一个水龙头下，十个男生光溜溜的彼此互帮互学，那一个水龙头下十个手，像董存瑞炸碉堡的感觉。</p><p>​    </p><p>但是我们就这么过来的，为什么我发现北大这个氛围是崇尚超越世俗吸引力的更伟大的东西，那就是对知识的诉求。我不知道你们现在读书状况什么样，整个八十年代北大最神圣的地方两个地方，一个是厕所，一个是图书馆，图书馆从早上六点，如果你不能到达写着邓小平题字的北京大学图书馆下面排队，你这一天与图书馆的座位已经无缘了，所以大部分人凌晨四点就起来了，然后带着一个冷馒头，从厨房吃剩下的或者从同学那偷来的，俞敏洪经常偷我馒头。然后借一堆书放在这里，睡也睡在桌子前面。所以当年读书氛围非常好，如果市场上出现一本书，你如果去晚了根本的得不到。我在中文系选了中国现代文学史，第一次讲到围城，我赶快到北大图书馆，没下课我就去了，但是没想到没了，结果等到快毕业的时候我才借到这本书，这就是当年北大的状况。而正是这样，读经典，读那些能够改变我们生命轨迹的那些书籍，成了北大人最后离开校门走到世界，不管你走到哪个领域，最后比别人走的稍微远一点的保证，因为那些书不是字，它也是生命，而这些生命比起你自己的生命来说，它能引领你的生命，它能型塑你的生命，所以我说这个世界上只有两种文字，一类文字是文字垃圾，（Informed ）随处可得；但是有一类是非常好的，（Form you ）就是它能够把你变成完全不同的另一个。所以我这个书题目叫读书毁了我，当年起的时候，徐晓给我提的题目，说这个题目在她心中好多年。她说你这个文字挺适合这个，我说”读书毁了我”，这个东西大家看到以后会非常奇怪，怎么会毁了你吗？她说毁就跟北京人说的，一团泥逐渐成型，就成了崭新的东西。我想如果毁用在这个意义上，它必须能够彻底摧毁你旧我，过去的我，狭隘封闭的我，然后诞生一个崭新的、开阔的、阳光的我，那读书就全部有了意义，这也就是当年北大为什么那些人天天想到的不是世俗的追求，但是到了世俗里一看，稍微一动他就得到了所谓世俗追求的东西呢？我觉得这是北大给了我们吸取信息的能力，分析问题能力，所以我今天想跟大家分析分析读书。</p><p>​    </p><p>我当年在新东方接受采访的时候，我说要读书只读一流的书，做人只做一流的人。为什么这么说？因为现在信息充斥的海洋里，我们人生有幸，但是我们要读的接受的信息太多了，如何辨别书？什么东西该读呢？跟大家分享一下我读书的选择，第一，畅销书我坚决不读，不是我牛，看不起畅销，因为我知道我生命有限，已经51岁了，再向苍天借30年，我已经80岁了，所以我还有30年读书的时间，我只能读人类历史上没被大浪淘沙过的东西，所以我现在读书越来越往前读，中国的典籍越读越遇到先秦，西方也顶多读到二十世纪中叶，因为我觉得那个时候的人，他们创作文字，他们的文字是他生命的写照。比如说现在翻译小说，坦率的讲，我只选择那些真正的以生命完成一部译作的大家们的作品，哪怕这个作品并不时髦。比如说《悲惨世界》，李丹翻译，本来他可以成为另一个徐悲鸿，但是他们放弃了，几十年如一日，文革如此惨烈，李丹最后剩几卷没有翻，他的太太继续翻，这本著作我是一读再读。像朱生豪翻了27本莎士比亚的剧，但是你现在再读任何一本，哪能找到朱生豪当年用汉字表现出的莎士比亚。所以我常常更小平说，有一天我们一定要拍朱生豪的电影，这个电影叫做《莎士比亚在中国》，如果没有朱生豪，全世界四分之一的人不会第一时间知道还有莎士比亚，所以莎士比亚的墓地应该旁边有一个朱生豪的碑，多么伟大，四分之一的人口是通过朱生豪第一时间知道的英国还有一个莎士比亚。</p><p>​    </p><p>所以我觉得读一流的书就要衡量，这个作家进入书前的状态是什么？他是为了满足市场的需求，所谓市场的利益，还是他倾其鲜血、生命和经历融入的东西呢？坦率的讲，我在北大整整呆了十年，做了四年学生，当了六年老师，离开的时候是英语系的讲师，当然我的宿命也从此定了，只能讲，没当教授，坐不下来，更没有博导那个肌肉。但是我作为见证，俞敏洪、小平他们当年都是如饥似渴的在读书，尽管领域不同。老俞主管肉体，小平是超越肉体和灵魂的东西。当年小平是我们当中第一个出国的，我记得那天下着毛毛细雨，小平当年住在北大小院，32楼前面的一个小院，最早北大出版社的地方，他住在那里，因为他是团委干部，所以有四合院的那种感觉。那说要离开了，要到美国，然后到加拿大去追求他的音乐梦，我就知道，他当时为凑足他的机票，他珍藏了作为任何一个学生很难想象的格罗夫音乐辞典，到处拍卖，他希望获得飞到美国的机票。他终于卖出了，用一半的钱请我在西门一个火锅店吃了火锅，最后大家挥泪离别，从此我步上小平的后尘，我也要到国外去，老俞也想步我们的后尘，但是国外暂时不需要他。</p><p>​    </p><p>为什么读经典能够改变我们呢？文学的功能是什么呢？在我看，文学的功能就像我在序里说的，如果一个真正有力量的文字，它一定是能够对我们的审美产生奇异的再造，它对我们对真的追求有奇异的启示，它对我们对善的追求有如饥似渴的充电的感觉，所以我们对人类最高的价值，真的、善的和美的就会变成我们的血液，一旦人身体里有这三样东西，你在社会上走向现实中，你就不会轻易的被世俗的所谓流行的价值、暂时的价值，甚至非常糟糕的价值轻易扭转。我的这个读书基因从这开始，从我中学，我分两个阶段，一个是中学，一个是北大。我之所以能进北大，一半我认为是老天眷顾了我，因为大家知道，我是第三届大学生，小平是第一届，克强是78级，克强比你低一级，但现在比你高很多级，这就是人生最后不一样的东西。所以人生，体重太大，最后他也走不太远，所以大家现在要减肥。</p><p>​    </p><p>高中我是来自内蒙古，我们那个学校在当地有一个叫包头的地方，都不算是优秀学校，但是为什么我能够走进北大呢？我忽然怀念起我当时在高中遇到的一批中国我认为最顶级的老师，为什么这些老师会到包头呢？感谢文化大革命，全是右派，一个一个发配到包头，结果被我遇上了，他们教会我全部的东西都是以他们各自的方式告诉我，真的、善的、美的，一定是从那些流传在人类时间长河里面没被淘汰的文字中，存在那里。你如果不断的在这样的文字中熏陶的时候，当你离开这些文字的时候，这些文字就变成了你的世界，所以从单词word到world中间只差一个字l，这个L，这就是文字、阅读和真正人生世界的完全最简单的逻辑关系。如果你读到的不是真文字，你遇到的不是真语言，你最后见到的一定是虚幻的世界，不是真实的世界。这也是为什么读书真正要对你产生作用，会产生什么呢？它一定要和你真正的生命融汇在一起，而几千百年来，没有被淘汰的著作，因为一代代人如果都这么选择的话，你一定要相信人类的选择，而不是现在市场的选择，更不是广告词的选择。所以这是非常关键的，我在序言里提到，去年我写了一篇文章，其中谈到葡萄牙诗人佩索阿，其中有一个诗写的是小河和村庄的关系，点清了我心目中文字怎么和你生命世界在一起，它必须对你生命产生极强的冲击，这个书才值得读，或者你真正领悟这本书，所以他的诗也是我从英文翻译过来的，他说，塔古斯河美过我村庄的那条小河，但是塔古斯河又美不过流进我村庄的小河，因为塔古斯河不是流经我村庄的小河。太美了，为什么？文字如果不属于你的村庄，它不能流穿你的灵魂，这个书不值得一读，而真正传统的经典有穿透生命力的这种力量。</p><p>​    </p><p>我回到高中，我怎么认识到什么是一流的书呢？随便举个例子，我感谢文化大革命，把这些有文化的人推到内蒙古这个没文化的地方，教我古典文学的王传真老师，现在这些老师全都去世了，包括我大学的老师，大部分都已经不在了。但是这些高中老师教我古典文学的王传真老师，我第一次上他课的时候忽然发现什么叫大师，王老师告诉我们去新华书店买《古文观止》，中华书局第一版的。然后他说，你们要听懂我的课，这个假期必须做一件事，买来这个课本，他不讲，他拿出一套油印印出来的厚厚一叠古文，标点全部隐去了，他说你们这个假期玩完了以后，你就去读读我这个自己刻印出来的东西，然后按照你全部的理解，使出你全部的工具来给这些文章，按照你的理解给它们加以标点，我们在没有走进古文的世界，这个东西既刺激也似乎不可能，但是我为了下学期听懂王传真老师的课，我从我爸箱子里翻出他爸给他留下的当年最老版的辞海，我开始一个一个的，每天以十个字的速度往前运行，整整三个月我没干别的，因为越往前走越觉得这里深不可测，但是我的梦想是一定要听到王老师的讲解，因为这是他对我们唯一要求。结果就乱标点，但是我一天以十个字的功夫不断的往前进，最后50篇文章被我标点了。等到王老师到我面前给我面试的时候，他随便说了几句，我基本背出来之后，他说了两点，第一，你的标点全错了。第二，孺子可教，因为你全标了，就是你这个努力，我觉得可以。其实当老师，有的时候非常充满智慧，我们的胡校长胡适，胡适不判作文的，他没有时间，他有时间要搞新文化运动，作业算什么。但是据说，上作文的课每次都能给出学生成绩，后来据他的学生回忆，胡适判作业那是胡判，他今天晚上吃完饭，收了几十份作业，你写了文章，他开始把桌椅放在离靠门半米远的地方，泡一杯清茶，然后扔作业，哪个扔的最远最高分，为什么？写的多，不管你写的怎么样，你下了苦功。别人一扔不远，零分，写的不多。扔的远，够份量，一百分，胡判定就要开始出来。</p><p>​    </p><p>而且我当时，我怎么走到英文这个道路上，一流的书上来直接读《古文观止》就可以了，看似很艰难，但是读完全部启蒙的古文书，我再读人教的那些太简单了，因为你的制高点不一样，一流书、二流书、三流书区别在这。比如英文，老俞就没有遇到我这样的老师，今天还说着印度人非常理解的英语，但是到了美国就崩溃了，因为他是印度籍的移民。我这个英文老师学俄语，英文不太懂。但是这个老师一片真诚，他知道该给学生什么样重要的价值，怎么让英文走进你的生命。上了他第一堂课，他觉得我的两个眼睛不断的盯着他，两耳竖着，像狼犬一样，他说你真心想学英文吧？我说当然，上您的课厕所都忘了。他说王强你到我办公室。当天下午在他办公室他说了一句话，他说从此你要上我的课。我说老师我就想学英文。他说我教不了正经的英文，我的底子我自己知道，你要想学真正的英文，我给你想办法，你就不用上我的课。第二天下午4点，下了自习，他把我叫到他办公室，从黑皮兜里掏出旧报纸包的东西，把慢慢打开，一打开，我一看，是一个断了一角的黑色的绞盘，唱盘，叫LP，大唱盘，你们现在连CD都不用了，那个大唱盘这么大，他说王强你要跟这个学，这是什么呢？这是我从废品站几年前搜集到的东西，它是BBC英国广播公司出的一套经典英文教材，从明天起，每天下午四点你只要答应我一件事，不要回家，来跟我学。后来我就非常兴奋，第二天我拿到这个光盘以后就跟着他，他把我领到学校的广播间，那时候他把团旗往窗户上一盖，门外面挂着闲人莫进，正在录音。然后他用当年我们中学唯一的手摇唱机，跪在地上，他一边给我摇，一边让我赶快重复，而且说你这个课本永远在我手里，等到你全部的课本能够背答入流的时候，你就成就了。结果他做了一件事，每个礼拜都这样，最后倒背如流的时候，他把这页撕掉了，所以我这个课本越学越少，最后只剩下封底的时候，他说王强你可以毕业了。我忽然意识到，我离开了文字的课本，但这些东西全在我身上，所以等到我到北大，作为英语系的学生第一年入的时候，在我们班50个人中，只有我说的着流畅的英语。为什么？他们不知道来自一个内蒙古包头的，别说英语，汉语都不沾边际的，说蒙古话的人，能说如此好的英语。其实我没有学任何东西，就是破唱盘和破唱机，一摇、一摇，摇过了一两百页的篇幅，这些篇幅被老师扔进垃圾堆的时候，我发现他让一流的英文教材完全引入到我的灵魂中，我感谢他。</p><p>​    </p><p>教我历史的老师让我有了进北大的冲动，为什么？他是南京大学太平天国专业毕业的，学了五年，最后被打到包头，他讲历史，我听的如痴如醉。这个老师爱流鼻涕，历史长河，源源不断。而且这些老师，我不仅跟他们学读书，我从他们做人也学到了品性，就是一个字-真，最崇尚的就是真。这个老师非常有意思，他看我非常好学，他希望我每个礼拜三天到他家，那时候肉是供应的，那时候我已经是中学学生，老师为了让我安心在他家读历史著作，在他的引导下从《左传》开始，一篇一篇给我解释，每个月他家四个人，一人二两肉的份额，炒完以后只是我俩来分享，所以我非常歉疚。他说王强你要学好知识，肉体先要活着，他说我觉得你是可培养的，他展示了一流思想和一流文字真正的胶合。他上课非常有特点，从来不备课，这样一个顶级的老师，在我们学校从来没评过优秀老师，所以优秀是靠你真正生命才能支撑的。而且这个老师从来不服学校的规矩，从来不备课，他觉得跟其他老师没法备课。我记得每天早上九点都是历史课，大冬天穿着棉袄，历史书插在裤腰上，带着历史的温暖就进来了，而且第一个动作就是背向我们，掏历史，那是他的故事，他对知识如此娴熟，书没有打开一页，因为历史都在他的心里。而且他讲任何一个孤零零的事件都要放到更大的范围，讲完五四运动，他一定看看亚洲在干什么，欧洲在干什么，全世界在干什么，我们通过上中国史已经连通了世界，从此我才知道原来读懂中国史必须放在世界历史的框架中才可能。这样的老师简直让我叹为观止，就是他一句话让我升起了北大梦。他说我这个岁数这辈子实现一个梦想没戏了，什么梦想呢？他说我是学历史出身的，但是我对历史上的宏观描述，社会主义、共产主义的发展描述我有疑问，什么是社会主义，什么是共产主义呢？当时国内翻译说，社会主义是各尽所能，按劳分配的社会，这里各尽所能，但是按照你能够多做多得，能够给你分配你应该得的东西，这是社会主义分配原则。共产主义当时分析说，各尽所能，按需分配，他说同学们，作为我一个学历史的人，我的历史意识告诉我这个翻译不精准，如果共产主义和社会主义，一个按劳分配，一个按需分配，都存在”分配”的话，这两个社会没有区别，按照我的理解，那个时候人类精神极为发达，那个世界应该是各尽所能各取所需的时代，你自己决定你贡献什么，你拿回什么，这才是他向往的共产主义，和社会主义你需要我给你，不需要我不给你，这个没有什么本质区别他。他们说你们将来如果报答我作为你们的师恩，你们如果想学外语的话，读读马克思的原典，告诉我这个是不是对。八十年代的时候，所有发达国家，最后管理这个国家的都是学文的，学文的人可以看到全部，甚至看到没有存在的东西。所以你们学文的人应该比学理的更加聪明。后来我带着这个准备报考北大中文系，因为当时我的作文非常好，他说王强你千万别报北大中文系，你的中文已经完全达到了自学成才的程度，你将来要毙掉所有北大中文系的学生，你只需要一个东西，比他们多学一种语言，就这句话让我改了志愿，变成了英文系，因为老师告诉我，你看世界要多一种语言，你的世界就会宽广一下。</p><p>就是这样，我最后终于改换了志愿，到了北大英文系。我到校第一件事就是搞清楚，马克思论断是不是我的老师想像的，正好朱光潜先生翻完经济学手稿我一看与我老师的论断一字不差，社会主义分配原则是各尽所能按劳分配，共产主义一定会达到人类精神高度发达和自由，然后各尽所能，各取所需，我告诉我老师消息的时候，他说你真是我的学生。就是这样一个老师，他让我知道，历史你要读懂要站在什么高度。</p><p>​    </p><p>再讲一个例子，教数学的老师，南开大学数学系毕业，我当时非常讨厌数学，我喜欢文，我们班一大半学生学不懂数学，但是只有这个老师的课上没有人上厕所，为什么？他对数学知识的了如指掌，比如他讲几何，他只带三只粉笔，从来不带教具，他要画个圆，先点圆心，往后一站，再往上一扑，动作一点都不停，你下课以后发现这个圆在哪衔接的不知道。他说画40几度角，他画完以后，很多学生下来拿两角尺去量非常准。所以后来上他这个班的学生，连不喜欢数学都要盯着他，因为觉得这是艺术课，结果这个班最后90%多的人都进了理科大学。当时令我难忘的是，八十年代，那时候我记得是考大学前一年，出来一个陈景润，数学家，非常伟大，突然光明日报第一版发了《哥德巴赫猜想》，当天下午我平生第一次知道有讲座的形式，说让大家带着板凳到操场上听讲座，讲《哥德巴赫猜想》，前面部分讲什么是哥德巴赫猜想，第二部由讲汉语的老师讲这个报告文学为什么是优秀的报告文学。结果我们坐着小板凳，太阳底下，第一次听什么叫偶数等等，听完以后没听明白，但是觉得陈景润很伟大，后来我的数学尽管是考文科的，那年我还考了59分。我们那年，80年和你进清华是同样一个卷子，77分就可以被清华大学数学系录取，我们59分，我们这是参考分，但是俞敏洪参考分0分，太悲惨了，一点没参考价值。</p><p>​    </p><p>就是那个东西把我引到数论，所以在中学时我就读华罗庚、王袁的这些论著，懵懵懂懂，试图要读点爱因斯坦的著作，而且读了徐池报告文学我知道优秀报告文学是这样产生的，以后我也写了无数的小的报告文学，结果没有一处发表，所以到了北大之后我一直想写诗，我的诗集叫《野性的14行》，俞敏洪最后也写诗，他是北大最后一个没有自焚的未遂诗人。我们当年带着这个，知道了各个领域，要想走进这个领域，必须站在最高的地方，当时至少最优秀的地方我才能一览众山小。</p><p>​    </p><p>到了北大更不得了，因为我们见到的那些人，都是大家见不到的那些大师级的人物。比如我是英语系的，英语系所有泰斗都是直接教过我们的，像李副宁（音）先生，不论刮风下雨，李先生的裤脚总是捻上来，一尘不染，他总是提前五分钟走进教室，也是把新概念往上一放就侃侃而谈，上第一个星期我们忽然觉得，每次上完课李先生这四块黑板没有擦过一个字，但是他写满了，在往下一周忽然发现，每当李先生写到这的时候，我们能推算出什么时候下课铃响起来，这真是大师，所以我说我将来当老师一定要当李先生这样的老师，他是中国英语教学的泰斗，像当年朱光潜老师，操着一口安徽桐城话讲什么是美学，尽管我们听不懂，他的桐城话非常难懂，但是就是在这样的情况下，我们看着朱先生最后完成了他的一步一步伟大译作，在他生命走到90多岁的时候，还每天馋着拐棍颤颤巍巍的到北大图书馆完成他的最后一部译作《新科学》。</p><p>​    </p><p>这些老师给我们震撼如此之大，所以我们一下子扑到了北大的读书氛围中。他们给我们开了全部的书单，都是人类历史上经典的东西，因为他们说过，如果你没窥探过人类过去的最高的封边的时候，你就不知道你现在站到的地方究竟离海平面多高。所以当时所有教授都跟我们说，要读那些真正经过时间考验而不被淘汰的东西。所以在北大我的读书激情一下子被点燃起来，当然俞敏洪也被我的激情点燃起来了，但是俞敏洪呢，他当时基础稍微弱一点，有一次他得了肺结核，他住在西边享受那个传染病院，我去看他，他说王班长，我是他的班长，他是我帮助的同学，我们班四年始终保持倒数第一的同学，底子非常厚，这种人一站起来非常稳的，你想连续四年保持不变，倒数第一，太难。他说王班长，你从北大寄给一本莎士比亚的14行诗怎么样？我记得我回去以后给他写了长长的信，大概50多页，最后结论说，老俞读书要从基本功抓起，你一年以后我再替你借莎士比亚14行，至今老俞没读过14行，但是他用人生写出了15行。所以这就是当年我们在北大读书的氛围，就是读这些经典，人类熟悉的，甚至很多人追求时髦不屑一读的东西，对我们的生命，对我们的审美，对我们对真理的理解和渴望，对我们对语言和世界的关系，以及型塑生命的力量有了直接的感觉，就是这样一步一步推着我们走到今天。无论我在北大当年教书的时候，还是到了美国，还是从美国回来，我的读书的这个激情，选择所谓一流书的概念一直伴随着我，所以我认为我人生最大捷径就是花了时间非常痛苦啃了一流的书。举个例子，当年我到了美国，我改行，我不学英美文学，因为我发现到了美国来错地方，不能在美国生存，我学了十年的英文，在美国一点用没有，我不能教美国人英文来生存，那是李阳要做的事。我知道在美国生存要有一个技能，就改成计算机，但是学计算机谈何容易，计算机在八十年代是第一代计算机时代，主机，主机两个特点，体积庞大，造价昂贵，一台上百万，当时直属教育部重点院校才拨一台，安放在北大的南北阁。那个时候特别羡慕计算机系的，因为只有计算机系当年在北大四年，他们有一方面特权是任何系没法超过的，就是洗澡，到洗澡堂，计算机系人优惠洗澡，为什么？他们要消毒。为什么消毒？因为计算机如此昂贵，发展初期人们搞不清楚计算机病毒是怎么出来的。这个也应该拍成电影，北大当年就两个澡堂，一男一女，我们当时分的非常清楚。老头老太太管的非常严，比你们现在门卫森严多了，不仅要有洗澡票，还要有学生证，两证具全才能进去，而且还要看哪个系。你说哪系的？中文系的，明天再来，今天比较紧张。那个人回去了，一看哪个系的？计算机系的，赶快进去，今天你们是专场。另外一个，刚打了篮球，老师我必须洗，晚上要跟女朋友约会。老师说拿出学生证，考古系的，捣什么乱，明天也不要来，他们只有校庆的时候才能来，这才代表北大的历史。所以当时我觉得世界上两个东西我没见过，一个是上帝，一个是计算机，我到了美国学了计算机，我崩溃了，但是我想到老师教我的读书，为什么崩溃？因为到了纽约州立大学，录取我很容易，我记得第一堂课让我崩溃，第一堂课上微积分，十年我没摸过数学，上来我就危机了，就分裂了，而且讲课的是印度籍的老师，我想当时在北大练听力怎么没练过这个东西呢？所以同学们，学习不一定标准就是最实用的，我崩溃了。而且这个老师头上缠了发黑的白布，我听的越来越崩溃，我多少次想冲上去问他，你也是人，我也是人，咱们俩怎么这么难沟通。后来我想到，什么叫君子，该动手的时候不动手，该出手的时候不出手。</p><p>​    </p><p>我想，我作为北大六年老师，我也没白练啊，我赶快到书店拿下计算机两本一流的著作，学西语言，上面有几百种西语言，但是我找到薄薄的不到两百页的著作，我不断的在读，不断的读，又不像我北大读经典一样，这本书我最后读的基本上找不到页玛的时候，我忽然发现我对C语言找到奇特的理解，我知道它为什么诞生，它优越在哪，它比较其他的语言，比如纯粹的学术语言，比较机器的语言，它好在哪。后来我学C++语言的时候我又找到了发明C++语言写的东西，看似非常精简，因为在他来说都不是问题，仍然不到两百页的书，我苦读整整一年，最后忽然我对这之间的世界完全了如指掌，最后我是我们班被老师评价为优秀的学生，当你熟悉一种语言的思维方式的时候，你很难跳到其他世界，因为是完全不同的，他是解决C不能解决的问题，而我由于掌握全部一流的平台，我非常正确的走进了两条道路，而且走的非常正确，老师给我非常高的评价，这就导致了我后来在纽约州立大学，尽管第一学期几乎想要抹去自己，我常常说这哪能听懂，尤其是印度籍教授。我经常利用上厕所的时间跑到操场上想，上帝，你把我微积分了吧。但是这两本一流的著作，让我走进真正这两个语言思维的精髓，我后来一下在这两个中间，一旦跳跃，我就变成超越所有本科学生天天在市场上抓关于C++这个介绍、那个介绍，读十本书也没有摸到真正C++核心的东西，所以我的读书基因在美国又一次拯救了我，使我经过两年半的艰难困苦的努力获得了纽约州立大学数学系机系的科学硕士学位，是我们班第一个走进美国一家伟大的软件公司，叫做贝尔传讯公司，我完成了我的转折，后来才有了95年一天深夜，老俞一番鬼魅的电话打到了我家，我做了人生的选择，才有了三个合伙人的雏形。</p><p>​    </p><p>这就是我跟大家分享的，读书要读一流的书，做人要做一流的人。谢谢大家。</p><h2 id="提问"><a href="#提问" class="headerlink" title="提问"></a>提问</h2><p>​    主持人：感谢王强老师分享的读书经历，下面进入提问环节。</p><p>​    提问：王强老师刚才说读书要读一流的书，做人要做一流的人，在您看来什么样的人才是一流的人？</p><p>​    王强：第一，真诚。第二，有激情。第三，开放，对什么都容易吸收。第四，阳光，你如果自己自焚，你也让别人照亮。第五，要有梦想，而且为了梦想不断往前走。第六，在大是大非面前，一定要有原则，而原则高于一切，善的就是善的，恶的就是恶的，所以我们做新东方，我就是按照这样的东西走到今天，也面对老俞基本是这样，所以我在老俞面前随时就拍桌子，因为只要偏离任何原则的东西，所以新东方的人给我一个外号。</p><p>​    徐小平：说王强老师叫做脆弱如钢，俞敏洪老师叫坚强如芦苇，我叫芦苇钢。王老师说的第一词叫真诚，有这样一个细节，俞敏洪拿着书说，你有一天会让我嫉妒的。当时我在加拿大学完英文硕士，做一个私人老师，非常不成功，回到新东方的时候老俞说了一句话，老俞说小平，你很快就让我嫉妒的，他把对朋友的一种赞美、认同表达出来。我们三个人在一起的时候真的是坦诚相见的，虽然我们从来没有在一起洗过澡，大家心里有什么东西说出来，所以新东方历史上所谓的争吵，恰恰使新东方成为伟大企业的真髓所在，有什么说出来。所以在合伙人里面，俞敏洪说过一句话，他说我们来美国之前，我们不是真吵，我们是不同观点、不同角度的交锋，是思想的汇集，所以你们今后做人要学会这种东西，就是真诚、沟通、交流。</p><p>​    </p><p>​    提问：我今天注意到俞敏洪发了一篇博客，特别澄清电影和新东方之间的差别，一再想撇清这中间的关系，我想听听您怎么说，您在单口相声当中总是把他当成一个捧哏，不断的调侃。</p><p>​    王强：他现在也是这样，老俞看完这个电影说，这个主人公离我比较远吧，怎么没有雄起的时候，我说这个电影最大的意义就在这，连这样的人都能成功，别人更能成功。</p><p>​    徐小平：这个电影，第一他没有参与，事实上是这样的，2011连的3月份，韩三平找我，要拍摄一般部关于中国梦的电影，然后我找俞老师，我说我来写，我在新东方一直负责新东方的宣传公关、企业形象、品牌建设、营销，当时老俞说千万不要写，后来我告诉韩三平我们不写了，他说不行，你不写我们就找别人写，你不写我们就把新东方写的很坏。事实上后来我用两个礼拜拿出那个剧本，但是既然俞敏洪不想写，就写了海归回国创业的故事，海归回国和两个朋友创办了英语学校，是一个爱情故事，后来陈导说新东方会不会告我们，我说这个片子如果出来不符合我们之间的价值观、我们的友谊观，我根本不跟你合作，一部电影算什么。一直到了11年的年底，他来找我，我是3月份写出来的，剧本出来以后，我把我的剧本寄给王老师和俞老师，我提供了最初在新东方的素材，我的剧本给你们看，我要经得起友谊的审查，而陈导的剧本要经得起市场的审查。等到最后电影出来以后，俞老师看完以后觉得我这么伟大的人物怎么写的这么窝囊。这就是电影的目的，如果你这样窝囊的人都能够做到这么成功，对当代青年是有意义的嘛。所以俞老师也就一如既往忍气吞声的接受了这个片子。</p><p>​    提问：您刚才说一流的书，您给我们推荐一些一流的书。</p><p>​    王强：一流的书很多的，但是确实很难，因为我也特别怕推荐这个书，如果读完以后跟你生命确实没有交际的话，确实浪费时间。比如对于西方文明史的理解，至少有几部著作大家一定要读，从文艺复兴时代就是博格哈特的《意大利文艺复兴史文化史》，但是荷兰大史学家写的《中世纪的秋天》，读完这两部作品你对中世纪文艺复兴的本质有非常好的了解。到了《历史的研究》，汉语翻了一卷的结本，这个是作者花了三十多年的时间，用五千多页的篇幅研究各个存在的文明形态，研究他们怎么繁荣消亡的，最后得出两个东西，所有文明符合两个东西，如何面对挑战和回应，所以读完这几个东西，从中世纪到文艺复兴，再到二十世纪人的历史，有了非常宏观的东西，按照他们所指引的方向再往近读。</p><p>​    提问：我想问王强老师一个问题，我感觉王洋的角色是最温情的，最初他似乎是愤青，你在创业中是否也扮演这样的角色？</p><p>​    王强：我在三人创业中更接近邓超的角色，前一部分挺像我的，小平这个角色也是相反，在新东方我称之为小平是最有远见人，新东方所有历史大发展第一启动者就是小平同志。但是小平的性格，我过于钢，我是直接和老俞yes  or  no，小平有一点像王洋那样的，你这拍两下，那拍两下。</p><p>​    提问：在合伙创业过程中难免冲突的时候，每个人应该怎么做？</p><p>​    徐小平：制度，议事规则。</p><p>​    提问：是什么让你们最终要合伙的？是因为个人感情吗？</p><p>​    徐小平：有一个学生转了我们三个人的照片，说他们三个人搞鸡搞了三十年。我想简单说，创业一开始，合伙人往往是互补，互相需要。如果能坚持到最后靠的是什么呢？共同的价值观。什么是价值观？什么东西最重要，当两个东西摆在一起，什么最重要，比如你爱上一个人，你妈妈说他不行，我们不喜欢，你为此让你爸爸妈妈难受，还是你追求你的真爱，这就是价值观。比如说新东方的价值观是什么，就是新东方这个品牌，我们对同学的吸引力，包含我们对学生的承诺，我们相信这个东西有价值，比起我多一个点、少一个点，一个点新东方能值五千美元，但是我们共同的把这个品牌做好做大，你的东西才用不完。所以新东方有非常杰出的人，他不认同这个品牌，他就离开了。但是我跟王强、俞敏洪，我们在最痛苦的时候都知道这个品牌是我们共同的价值观，新东方要把中国最优秀的人才，让他们看到另外一个世界，最终能够把中国这个世界变得和最美好的世界一样美好，我们完成这个历史使命。</p><p>​    提问：我也是非常喜欢读书的，在看很多作品的时候本来就非常晦涩难懂，你刚才说你读很难懂的书的时候还反复读，我想问是什么样的心态让你读不懂还可以反复读。</p><p>​    王强：书写出来的文字两种，有力量和没有力量。书有两种，一类是硬性的书，一类是软性的书，黑格尔、康德、尼采、柏拉图这些都是硬书，硬书你要想从中获得养分，唯有一个捷径，就是不断的读，因为你不可能靠一遍，畅销书一遍不用读完你就理解了，这些畅销书和那些真正书籍的区别。所以当你一遍一遍进入的时候……</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;王强2012在北大的演讲——读书毁了我&quot;&gt;&lt;a href=&quot;#王强2012在北大的演讲——读书毁了我&quot; class=&quot;headerlink&quot; title=&quot;王强2012在北大的演讲——读书毁了我&quot;&gt;&lt;/a&gt;王强2012在北大的演讲——读书毁了我&lt;/h1&gt;&lt;p&gt;视频
      
    
    </summary>
    
      <category term="技巧" scheme="https://plantegg.github.io/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="知识积累" scheme="https://plantegg.github.io/tags/%E7%9F%A5%E8%AF%86%E7%A7%AF%E7%B4%AF/"/>
    
      <category term="读经典书" scheme="https://plantegg.github.io/tags/%E8%AF%BB%E7%BB%8F%E5%85%B8%E4%B9%A6/"/>
    
  </entry>
  
</feed>
