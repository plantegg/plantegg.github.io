<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>星球 - 标签 - plantegg</title>
        <link>https://plantegg.github.io/tags/%E6%98%9F%E7%90%83/</link>
        <description>星球 - 标签 - plantegg</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-Hans</language><lastBuildDate>Mon, 25 Mar 2024 17:30:03 &#43;0000</lastBuildDate><atom:link href="https://plantegg.github.io/tags/%E6%98%9F%E7%90%83/" rel="self" type="application/rss+xml" /><item>
    <title>无招胜有招--一周年总结</title>
    <link>https://plantegg.github.io/posts/%E6%97%A0%E6%8B%9B%E8%83%9C%E6%9C%89%E6%8B%9B/</link>
    <pubDate>Mon, 25 Mar 2024 17:30:03 &#43;0000</pubDate><author>
        <name>作者</name>
    </author><guid>https://plantegg.github.io/posts/%E6%97%A0%E6%8B%9B%E8%83%9C%E6%9C%89%E6%8B%9B/</guid>
    <description><![CDATA[<h1 id="无招胜有招--一周年总结" class="headerLink">
    <a href="#%e6%97%a0%e6%8b%9b%e8%83%9c%e6%9c%89%e6%8b%9b--%e4%b8%80%e5%91%a8%e5%b9%b4%e6%80%bb%e7%bb%93" class="header-mark"></a>无招胜有招&ndash;一周年总结</h1><p>大家抱着美好和雄赳赳的目标来到<a href="https://wx.zsxq.com/dweb2/index/group/15552551584552" target="_blank" rel="noopener noreferrer">这个知识星球</a>，开始的时候兴奋地以为找到了银弹(其实银弹是有的，在文章最后)，经过一段时间后大概率发现没什么变化，然后就回到了以前的老路子上，我觉得关键问题是你没获取到星球的精华，所以这篇我打算反复再唠叨一下</p>
<h2 id="知识效率-工程效率httpstzsxqcom14ibwajeq" class="headerLink">
    <a href="#%e7%9f%a5%e8%af%86%e6%95%88%e7%8e%87-%e5%b7%a5%e7%a8%8b%e6%95%88%e7%8e%87httpstzsxqcom14ibwajeq" class="header-mark"></a><strong><a href="https://t.zsxq.com/14IBWajEq" target="_blank" rel="noopener noreferrer">知识效率 工程效率</a></strong></h2><p>虽然我们现在通过这篇《<a href="https://t.zsxq.com/14IBWajEq" target="_blank" rel="noopener noreferrer">知识效率 工程效率</a>》知道了两者的差别， 但是还是需要记住通过积累可以将我们的学习能力从工程效率升级到知识效率(厚积薄发)，大部分时候没有做到薄发，是因为你以为理解了、积累了实际没理解</p>
<h2 id="核心知识点" class="headerLink">
    <a href="#%e6%a0%b8%e5%bf%83%e7%9f%a5%e8%af%86%e7%82%b9" class="header-mark"></a><strong>核心知识点</strong></h2><p>尽力寻找每个领域的核心知识点，核心知识点的定义就是通过一两个这样的知识点能撬动对整个领域的理解，也就是常说的<a href="http://www.baidu.com/link?url=9Hv8LOY09wOqjLFX-UuX35AxJjTDjmkHcSPm3ReeTWO-4rH-46hmz6aR4b-WP7PwZHUGkxEBhWt1iqHkM8uM56Au6Ada4lg6angCByW3J-BLDkxE45Aq-QqOTWzRspa4" target="_blank" rel="noopener noreferrer">纲挈目张</a></p>
<p>比如网络领域里：一个网络包是怎么流转的+抓包。假如你理解<a href="https://plantegg.github.io/2019/05/15/%e5%b0%b1%e6%98%af%e8%a6%81%e4%bd%a0%e6%87%82%e7%bd%91%e7%bb%9c--%e4%b8%80%e4%b8%aa%e7%bd%91%e7%bb%9c%e5%8c%85%e7%9a%84%e6%97%85%e7%a8%8b/" target="_blank" rel="noopener noreferrer">网络包的流转后</a>再去看<a href="https://plantegg.github.io/2019/06/20/%e5%b0%b1%e6%98%af%e8%a6%81%e4%bd%a0%e6%87%82%e8%b4%9f%e8%bd%bd%e5%9d%87%e8%a1%a1--lvs%e5%92%8c%e8%bd%ac%e5%8f%91%e6%a8%a1%e5%bc%8f/" target="_blank" rel="noopener noreferrer">LVS 负载均衡的原理</a>你就发现只需要看一次你就能很好掌握LVS各个负载均衡的本质，而在这之前你反复看反复忘。掌握了这个知识点基本就可以通关整个领域，剩下的只是无招胜有招碰到一个挨个积累的问题了。</p>
<p>比如CPU领域理解超线程+IPC+会用perf和内存延时，理解超线程的本质是为什么一个核能干两个核的工作(这和操作系统的分时多任务背后原理是想通的)，那是因为我们的程序没法吃满流水线(也就是没法用完一个核的计算能力，用IPC去衡量)，没吃满闲置的时候就可以虚拟给另外一个进程用，比如CPU 跑起来最高IPC都能到4，但是无论你找一个Java还是MySQL 去看他们的IPC基本都在1以内，纯计算场景的IPC会高一点，IPC 可以到4但只跑到1的话也就是只用满了25%的能力，那当然可以再虚出来一个超线程提高效率。IPC 之所以低就是因为内存延时大，这么多年CPU的处理能力一直按摩尔定律在提升但是内存延时没有怎么提升，导致基本上我们常见的业务场景(Nginx/MySQL/Redis 等)都是CPU在等从内存取数据(所以搞了L1、L2、L3一堆cache)。</p>
<p>发散一下或者说<strong>留个作业</strong>你去看看<a href="https://plantegg.github.io/2021/05/14/%e5%8d%81%e5%b9%b4%e5%90%8e%e6%95%b0%e6%8d%ae%e5%ba%93%e8%bf%98%e6%98%af%e4%b8%8d%e6%95%a2%e6%8b%a5%e6%8a%b1NUMA/" target="_blank" rel="noopener noreferrer">NUMA 的原理或者说本质就是为了让CPU知道就近分配读取内存以提升效率</a>。</p>
<p>你看<strong>整本计算机组成原理+性能的本质都在这一个知识点的范围内进行延伸和突破</strong>。</p>
<p>如果你发现一个核心知识点也欢迎写成博客文章分享出来</p>
<h2 id="读日志错误信息" class="headerLink">
    <a href="#%e8%af%bb%e6%97%a5%e5%bf%97%e9%94%99%e8%af%af%e4%bf%a1%e6%81%af" class="header-mark"></a><strong>读日志、错误信息</strong></h2><p>我的经验只是大概20%左右的程序员会去耐心读别人的日志、报错信息，大部分摊摊手求助、放弃了</p>
<p>日志是最好的学习机会，我知道别人的日志写得很烂，但是你要能耐心多琢磨一点就会比别人更专业一点</p>
<h2 id="对知识的可观测性" class="headerLink">
    <a href="#%e5%af%b9%e7%9f%a5%e8%af%86%e7%9a%84%e5%8f%af%e8%a7%82%e6%b5%8b%e6%80%a7" class="header-mark"></a><strong>对知识的可观测性</strong></h2><p>抓包、perf的使用这些平时要多积累，这点没有捷径，一个好的工程师肯定有<a href="https://plantegg.github.io/2016/10/12/ss%e7%94%a8%e6%b3%95%e5%a4%a7%e5%85%a8/" target="_blank" rel="noopener noreferrer">一堆好的锤子、瑞士军刀、工具包</a>的。在你掌握了知识点后要转化为工作效率，就得多积累这些工具，很多次我们碰到一个好的问题没分析出来是因为我们这种没有门槛的积累不够导致放弃了</p>
<p>比如需要抓包确认下，不会，一看tcpdump 一堆参数头疼放弃；比如想要知道长连接还是短连接，或者自己设置的长连接有没有生效，不会用netstat -o 这个参数去确认等；比如要下载个源码自己make/install 中间报了几个错误不仔细看放弃；</p>
<p>反过来回到我们所说的工程效率，就是靠这些工具帮你实现可视、可以触摸，网络之所以大多数同学在大学都学过但是最后基本学懂，就是因为这些网络的东东你只看理论很难立即，但是让你抓过一次包分析下就会恍然大悟——这就是关键门槛你能跨过去</p>
<h2 id="好习惯" class="headerLink">
    <a href="#%e5%a5%bd%e4%b9%a0%e6%83%af" class="header-mark"></a><strong>好习惯</strong></h2><p>在星球里我更希望你带走一个好的习惯而不是一个具体知识点，虽然星球里的具体知识点、案例胜过很多教材，但他们总有过时、用不上的时候，唯有好的习惯可以跟随你，帮你实现无招胜有招</p>
<h3 id="记笔记" class="headerLink">
    <a href="#%e8%ae%b0%e7%ac%94%e8%ae%b0" class="header-mark"></a><strong>记笔记</strong></h3><p>放低身段，不要高估自己的能力(认为自己是知识效率)，放低后你要怎么做呢：记笔记、记笔记、记笔记</p>
<p>只要是你在学习就要或者看书、看资料的时候觉得自己有点通透了，赶紧记录下来，因为大概率一个星期你就忘了，半年你就完全不记得自己以前看过一次了，我好多次看到一篇好文章就感叹自己学到了，兴奋地拉到文章最后想去评论下，结果发现居然有了自己的评论在下面 :)</p>
<h3 id="动手" class="headerLink">
    <a href="#%e5%8a%a8%e6%89%8b" class="header-mark"></a><strong>动手</strong></h3><p>动手，看到后理解了，也记了笔记，其实最好还是要自己去重现，记下自己看到的现象和理解，动手又会有一堆门槛，搭环境、客观则、怎么验证等等，这个时候我前面说的可观测性里面积累的一大堆工具可以让你如有神助、重现起来效率就是比别人高</p>
<h3 id="汇总输出" class="headerLink">
    <a href="#%e6%b1%87%e6%80%bb%e8%be%93%e5%87%ba" class="header-mark"></a><strong>汇总输出</strong></h3><p>最后笔记记完还没完，笔记基本是零散的，你反复积累后到了一定的时机就是要把他们总结汇总成一篇完整度较高的博客文章，这里当然有自己的虚荣心在这里，但更多的是为了自己查询方便，有了新的理解或者使用姿势我经常更新补充10年前的博客文章，不会写一篇新的，这个补充知识让我的知识结构更完善，不是为了多发一篇博文，我现在解决问题、使用工具基本要靠翻自己的博客文章照着操作</p>
<h3 id="慢就是快少就是多" class="headerLink">
    <a href="#%e6%85%a2%e5%b0%b1%e6%98%af%e5%bf%ab%e5%b0%91%e5%b0%b1%e6%98%af%e5%a4%9a" class="header-mark"></a><strong>慢就是快、少就是多</strong></h3><p>往往我们喜欢求快，以为自己一看就懂；求多以为自己越看的多越厉害</p>
<h3 id="不要等着时间流投喂" class="headerLink">
    <a href="#%e4%b8%8d%e8%a6%81%e7%ad%89%e7%9d%80%e6%97%b6%e9%97%b4%e6%b5%81%e6%8a%95%e5%96%82" class="header-mark"></a><strong>不要等着时间流投喂</strong></h3><p>看这篇置顶：https://t.zsxq.com/14Yel6KBg</p>
<h2 id="纲举目张" class="headerLink">
    <a href="#%e7%ba%b2%e4%b8%be%e7%9b%ae%e5%bc%a0" class="header-mark"></a><strong>纲举目张</strong></h2><p>对公司的业务、一个软件的运转流程都要尽量做到理解</p>
<p>比如学MySQL 要尽量知道从一条SQL 怎么进来，进行哪些处理后得到了查询结果；比如前面讲过的一个网络包是怎么到达对端的；比如你们公司的请求是怎么从客户端到达服务端(中间经过了LVS、Nginx吗)，服务端又是那些服务得依赖和调用，有没有Redis、MQ、Database，最后数据又是怎么返回的，我知道这在一个公司很难(屎山很复杂)，但目前没有更好的方法让你快速掌握并立足</p>
<p>为什么出现问题后总有一两个人很快能猜出来问题可能在哪个环节，这一部分是经验但更多的是对系统的了解，你都不知道有Redis存在一旦出错了你肯定猜不到Redis这里来</p>
<p>可以看看我之前说的实习生的故事，完全真实哈：</p>
<blockquote>
  <p>讲一个我碰到的实习生的事情</p>
<p>北邮毕业直接后直接到我司实习</p>
<p>特点：英语好、动手能力强、爱琢磨，除了程序、电脑没有其它爱好 :)</p>
<p>实习期间因为英语好把我司文档很快就翻烂了，对产品、业务逻辑的理解基本是顶尖的</p>
<p>实习期间很快成为所有老员工的红人，都离不开他，搭环境、了解业务流程</p>
<p>因为别人的习惯都是盯着自己眼前的这一趴，只有他对业务非常熟悉</p>
<p>实习后很快就转正了，又3年后transfer 去了美国总部</p>
<p>连女朋友都是老员工给牵线的，最后领证一起去了美国。为啥老员工这么热情，是大家真心喜欢他</p>

</blockquote><p>再看看张一鸣自述的第一年的工作：</p>
<p><img class="tw-inline" loading="lazy" src=https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/FuQNw04aH2PQwnApyAKY1dXRh-nt.png   alt="img"  ></p>
<h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a><strong>总结</strong></h2><p>我前面所说的我也没做太好，希望大家能做得更好，我第一次感受无招胜有招就是<a href="https://plantegg.github.io/2022/01/01/%e4%b8%89%e4%b8%aa%e6%95%85%e4%ba%8b/" target="_blank" rel="noopener noreferrer">故事一里面</a>，到故事二过去差不多10年，这10年里我一直在琢磨怎么才能无招胜有招，也有在积累，但是花了10年肯定效率不算高，所以在星球里我希望通过我的经验帮你们缩短一些时间</p>
<p>上面讲再多如果你只是看看那根本还是没用，买再多的课也没用，关键是看触动后能否有点改变。你可以从里面试着挑几个你认为容易操作，比如记笔记、比如不要等着时间流投喂，或者有感触的试试先改变或者遵循下看看能不能获得一些变化进而形成正向循环</p>
<p>或者从评论里开始说说你星球这一年真正有哪些改变、学到了啥、你的感悟，不方便的也可以微信我私聊一下</p>
<p>这篇就当成整个星球学习的一个总结吧</p>
]]></description>
</item><item>
    <title>必读 成长路径</title>
    <link>https://plantegg.github.io/posts/%E5%BF%85%E8%AF%BB-%E6%98%9F%E7%90%83%E6%88%90%E9%95%BF%E8%B7%AF%E5%BE%84/</link>
    <pubDate>Tue, 20 Feb 2024 17:30:03 &#43;0000</pubDate><author>
        <name>作者</name>
    </author><guid>https://plantegg.github.io/posts/%E5%BF%85%E8%AF%BB-%E6%98%9F%E7%90%83%E6%88%90%E9%95%BF%E8%B7%AF%E5%BE%84/</guid>
    <description><![CDATA[<h1 id="必读-成长路径" class="headerLink">
    <a href="#%e5%bf%85%e8%af%bb-%e6%88%90%e9%95%bf%e8%b7%af%e5%be%84" class="header-mark"></a>必读 成长路径</h1><p>我的<a href="https://plantegg.github.io/2023/05/10/%E7%A8%8B%E5%BA%8F%E5%91%98%E6%A1%88%E4%BE%8B%E6%98%9F%E7%90%83%E4%BB%8B%E7%BB%8D/" target="_blank" rel="noopener noreferrer">星球介绍</a></p>
<p>这篇是关于我星球里的内容、目标以及如何达到这个目标的一些概述</p>
<h2 id="星球目标" class="headerLink">
    <a href="#%e6%98%9f%e7%90%83%e7%9b%ae%e6%a0%87" class="header-mark"></a>星球目标</h2><p>本星球致力深度分析各种程序员领域疑难案例，通过案例带动对基础核心知识的理解，同时强化动手能力</p>
<p>一年星球没法让大家称为顶尖程序员(我自己都不是)，只是希望用我的方法、知识、经验、案例作为你的垫脚石，帮助你快速、早日成为一个基本合格的程序员。</p>
<h2 id="必会技能" class="headerLink">
    <a href="#%e5%bf%85%e4%bc%9a%e6%8a%80%e8%83%bd" class="header-mark"></a>必会技能</h2><p>在星球一年的时间你能学到什么(跟着做一定可以学会的)：</p>
<ul>
<li>网络入门，抓包分析网络能力，wireshark使用 网络篇章索引：https://articles.zsxq.com/id_jr1w5wvb8j9f.html</li>
<li><a href="https://t.zsxq.com/17CmWErZB" target="_blank" rel="noopener noreferrer">QPS、RT和并发的关系</a>，记住查瓶颈追着 RT跑（哪里RT增加快瓶颈就在哪里）</li>
<li>IPC是什么和性能的本质</li>
<li><a href="https://wx.zsxq.com/dweb2/index/topic_detail/411522214118158" target="_blank" rel="noopener noreferrer">养成</a><a href="https://wx.zsxq.com/dweb2/index/topic_detail/411522214118158" target="_blank" rel="noopener noreferrer">做会</a><a href="https://wx.zsxq.com/dweb2/index/topic_detail/411522214118158" target="_blank" rel="noopener noreferrer">而不是</a><a href="https://wx.zsxq.com/dweb2/index/topic_detail/411522214118158" target="_blank" rel="noopener noreferrer">学会</a><a href="https://wx.zsxq.com/dweb2/index/topic_detail/411522214118158" target="_blank" rel="noopener noreferrer">的习惯</a></li>
</ul>
<h2 id="视频素材" class="headerLink">
    <a href="#%e8%a7%86%e9%a2%91%e7%b4%a0%e6%9d%90" class="header-mark"></a>视频素材</h2><p><strong>如果你发现看文章、做实验有些障碍，我特意录制了视频做演示（如果你基础好，看文章就能看懂并把实验做完，其实没必要看视频）</strong>：https://articles.zsxq.com/id_blqwkgux7i0a.html</p>
<p>视频内容目前已经完成了：</p>
<ul>
<li>抓包技巧演示</li>
<li>QPS、并发、RT 的关系</li>
<li>tcp-rt 展示和在性能定位中的使用</li>
<li>瓶颈定位分析——追着RT 跑</li>
<li>单机内瓶颈定位</li>
<li>认识CPU 和 Cache，以及测试Cache、内存时延</li>
</ul>
<p>我在星球内一直强调视频不是高效的学习方法，因为你没有办法仔细思索、随时前后反复看等等，看完视频容易形成学懂了的错觉实际很快就忘了，但是我录完这些视频看大家的反馈我发现视频也有优点那就是：很直观、门槛低等，但是一定要注意一个错觉：以为看视频看懂了。但实际就是看视频看完了忘得比看文章快多了，所以看完视频一定要再去实验一下，实验所需要的素材基本都在星球内有了，代码等我都放在了github上</p>
<h2 id="挑战技能" class="headerLink">
    <a href="#%e6%8c%91%e6%88%98%e6%8a%80%e8%83%bd" class="header-mark"></a>挑战技能</h2><p>有些技能不好描述，或者说是一些暗知识，我们尽量去讨论这些技能的逻辑，同时对一些特别有效的工具、知识会重点突破，这些恰恰是我希望你们最终能掌握的：</p>
<ul>
<li>分析解决问题的能力，在一定的知识的基础上靠谱地去分析</li>
<li>掌握技能而不是死知识</li>
<li>掌握核心知识点，核心知识点是指理解了一个点很容易对一个领域有较大的突破，比如IPC对于CPU性能、比如内存墙对计算机组成原理的理解、比如RT 对性能瓶颈的定位等</li>
</ul>
<p>知识总是学不完的，况且大多时候我们有了知识也解决不了问题，所以我们更注重能力的训练，比如这个提问：https://t.zsxq.com/0cfBnpmLw</p>
<h2 id="节奏安排" class="headerLink">
    <a href="#%e8%8a%82%e5%a5%8f%e5%ae%89%e6%8e%92" class="header-mark"></a>节奏安排</h2><ul>
<li>一个月完成这一年唯一的一个必做作业：https://t.zsxq.com/0cUhJcVNa 目的体验做会和学会的差别</li>
<li>一个月QPS、并发、RT的关系：https://t.zsxq.com/0dCmWErZB 性能、瓶颈定位的最核心理论</li>
<li>一个月补CPU基础，核心可以从内存墙、IPC、NUMA 入手，星球内都有不错的案例，可以查看 CPU 专栏</li>
<li>一个月用来实践性能瓶颈定位，比如就用Sysbench + MySQL 来构造：https://articles.zsxq.com/id_blqwkgux7i0a.html</li>
<li>……补充中</li>
</ul>
<p>如果你发现这个节奏你跟不上，那么就先去<a href="https://articles.zsxq.com/id_blqwkgux7i0a.html" target="_blank" rel="noopener noreferrer">看视频</a>，然后再按这个节奏来，如果还不行可以再去看视频，如果视频看不懂可以到微信群里讨论或者就视频里的哪个点提问，如果觉得看懂了，但是还是没法独立实验，那可以这个看懂了还是错觉，或者是基础缺的太多了</p>
<p>请先浏览星球专栏里的必看资源以及学习方法，做到做会而不是看会。另外每个主题后面的留言也很有价值</p>
<p>本星球大部分理论指导部分请看视频：https://t.zsxq.com/0dF2WvzEF (5-10节共90分钟)，视频中的理论要和案例结合</p>
<h2 id="案例选择" class="headerLink">
    <a href="#%e6%a1%88%e4%be%8b%e9%80%89%e6%8b%a9" class="header-mark"></a>案例选择</h2><p>星球选用的案例尽量典型普适性强，代表基础组件基本原理等知识。</p>
<p>分析手段尽量通用，分析过程一定要逻辑合理每个疑问都能回答清晰。</p>
<p>搞清楚一个案例基本能横扫一个领域，其次在一个案例后再带3/5个相关小案例可以帮你丰富场景，多角度理解</p>
<p>基于以上目标一年内选择了如下4个案例：</p>
<ul>
<li>TCP传输性能&ndash;对应星球有一年唯一的必做实验让大家上手：https://t.zsxq.com/0dUhJcVNa <strong>目标：动手</strong></li>
<li>[历时3年的Nginx卡顿分析](<a href="https://github.com/plantegg/programmer_case/blame/main/performance/Nginx" target="_blank" rel="noopener noreferrer">https://github.com/plantegg/programmer_case/blame/main/performance/Nginx</a> resueport 导致偶发性卡顿.md)&ndash;Nginx的架构本身的设计缺陷带来的卡顿，<strong>修复放来来自TCP传输性能，知识之间的联系</strong></li>
<li><a href="https://t.zsxq.com/0f00mI5gF" target="_blank" rel="noopener noreferrer">MySQL有的连接一直慢、有的连接一直快，为什么</a>？目的：<strong>Wireshark分析的巧用，这个方法普适性极强</strong></li>
<li>同样的QPS，但CPU使用率相差3倍是为什么。<strong>目标：实现对CPU理解的入门</strong></li>
</ul>
<p>详细描述请看这里：https://t.zsxq.com/0cyPswpVB</p>
<h2 id="本星球口头禅" class="headerLink">
    <a href="#%e6%9c%ac%e6%98%9f%e7%90%83%e5%8f%a3%e5%a4%b4%e7%a6%85" class="header-mark"></a>本星球口头禅</h2><p><strong>慢就是快，做会而不是看会，无招胜有招</strong></p>
<p>慢就是快指的是不要贪多，而是要彻底搞懂一个问题、一个知识点，让这个点成为一个支柱长成体系，贪多往往啥都没有掌握</p>
<p>做会而不是看会：程序员是工程类(也有科学家，但我们CRUD boy肯定不是)，尤其像网络包、CPU流水线都是看不到无法感受，所以建议你去抓包、去做实验体会、触摸到每个包就能够更好地理解，所以星球强调做案例</p>
<p>无招胜有招：尽量找我普适性强的技能，比如ping ping神功，比如抓包，比如Google搜索，你会反复看到我的案例中使用这些技能</p>
<h2 id="如何在本星球获得成长的基本步骤" class="headerLink">
    <a href="#%e5%a6%82%e4%bd%95%e5%9c%a8%e6%9c%ac%e6%98%9f%e7%90%83%e8%8e%b7%e5%be%97%e6%88%90%e9%95%bf%e7%9a%84%e5%9f%ba%e6%9c%ac%e6%ad%a5%e9%aa%a4" class="header-mark"></a>如何在本星球获得成长的基本步骤</h2><p>多和以前的学习方式对比，学了一大堆几个月后全忘了，学了很多不会解决问题，学了很多但要靠反复刷。你不应该继续像以前一样忙忙碌碌但是收获很小</p>
<ul>
<li>该买的书买了：https://t.zsxq.com/0c3P6gpJE</li>
<li>该做的实验做了:https://t.zsxq.com/0cUhJcVNa ，反复试过后，不懂的尽量提问</li>
<li>该看的视频看过了：https://articles.zsxq.com/id_blqwkgux7i0a.html (实验你能独立完成就不用看视频了)</li>
<li>薅住几个case使劲干，能干多深干多深，看不懂的慢慢想，最好能在工作中找到场景实践一下</li>
<li>学习方法一定要看</li>
<li>不要急于求成，贪多不化，尽量单点突破(就是一个点使劲往深里干)，彻底学懂一个后你会感受到加速</li>
<li>体会到动手做和看书的差异，体会到深度学习案例和看书的差异</li>
<li>不要相信自己看会了，不要相信自己的记忆能力</li>
<li>为什么你有知识但是没有能力：https://t.zsxq.com/0cfBnpmLw</li>
<li>养成记笔记，然后总结输出的习惯</li>
<li>必看专栏一定要高优先级先看</li>
</ul>
<p>最好能有自己的总结输出，比如博客文章，写文章是一次最好的总结，不一定要发出来，也不一定一次写完美了，我经常修改7、8年前的文章，因为随着经验的丰富有了更深入、不同的理解，这时不要写一篇新的，我都是在原来的基础上修改、扩充，这才是体系建设</p>
<h2 id="成长案例" class="headerLink">
    <a href="#%e6%88%90%e9%95%bf%e6%a1%88%e4%be%8b" class="header-mark"></a>成长案例</h2><p>这是大学刚毕业几个月的新同学写的博客：<a href="https://yishenggong.com/2023/05/06/why-does-my-network-speed-drop-cn" target="_blank" rel="noopener noreferrer">https://yishenggong.com/2023/05/06/why-does-my-network-speed-drop-cn/</a></p>
<p><a href="https://yishenggong.com/2023/05/22/is-20m-of-rows-still-a-valid-soft-limit-of-mysql-table-in-2023" target="_blank" rel="noopener noreferrer">https://yishenggong.com/2023/05/22/is-20m-of-rows-still-a-valid-soft-limit-of-mysql-table-in-2023/</a> 你可以比较他加入星球前后的博客文章(20230315 加入星球), 第二篇是英文版上了hacker news前三</p>
<p>我观察到的学员成长好习惯：</p>
<ul>
<li>动手动手，不论事情大小先干起来；</li>
<li>有自己的节奏，不贪多先把一篇文章、一个知识点薅扎实了</li>
</ul>
<h2 id="欢迎在星球里提问" class="headerLink">
    <a href="#%e6%ac%a2%e8%bf%8e%e5%9c%a8%e6%98%9f%e7%90%83%e9%87%8c%e6%8f%90%e9%97%ae" class="header-mark"></a>欢迎在星球里提问</h2><p>欢迎大家提问，越具体越好</p>
<p>比如这个问题就很具体、很好： <a href="https://t.zsxq.com/0enzptS47" target="_blank" rel="noopener noreferrer">https://t.zsxq.com/0enzptS47</a> (千万不要微信上问，回答了也没有价值)</p>
<p>我自己一个人写写出来的东西难免自嗨，但是如果是你碰到的实际业务问题我觉得就更有代表性一些</p>
<p>提问肯定尽力要把问题描述具体，好重现，典型的就是之前 aws 流量降速导致MySQL QPS下降，提问的同学做得特别好的就是把这个问题自己反复分析后发现是网络流量被限速了，然后问题就很容易描述和重现，最后一大帮人帮忙分析问题，最后的结果大家都很开心学到了东西。问题在这里：https://articles.zsxq.com/id_iq5a872u8sux.html</p>
<p>你要是通过星球里的方法帮你解决了实际问题这是星球的最终目的，我当然最开心，如果你提了一个你工作中的问题大家一起帮你分析、讨论并最终解决了这就是最好的N对1的私教训练——觉得适合你的能力提升</p>
<p>我有时候绞尽脑汁写了文章然后大家不关心，有时候一个普通问题似乎大家都很嗨，我也喜欢能让你们很嗨的问题(即使我不懂也可以一起讨论)</p>
<h2 id="专栏介绍" class="headerLink">
    <a href="#%e4%b8%93%e6%a0%8f%e4%bb%8b%e7%bb%8d" class="header-mark"></a>专栏介绍</h2><p>必看(一定要看的，我尽量控制必看的少)、实战案例(年度计划一定要分享和搞清楚的案例)、动手实验(做会一直是本星球的重要原则)、学习方法(磨刀不误砍柴工)，剩下的就是按类别分比较好理解</p>
<h2 id="其它" class="headerLink">
    <a href="#%e5%85%b6%e5%ae%83" class="header-mark"></a>其它</h2><p>星主自我介绍：https://t.zsxq.com/0c33AXrCi</p>
<p>或者在推特找我：https://twitter.com/plantegg</p>
<p>个人博客：<a href="https://plantegg.github.io/2022/01/01/%e4%b8%89%e4%b8%aa%e6%95%85%e4%ba%8b" target="_blank" rel="noopener noreferrer">https://plantegg.github.io/2022/01/01/%E4%B8%89%E4%B8%AA%E6%95%85%E4%BA%8B/</a></p>
<p>博客存放在github，图多的文章会慢一些，可以刷新几次。</p>
<p>建议大家多用PC版星球( <a href="https://wx.zsxq.com" target="_blank" rel="noopener noreferrer">https://wx.zsxq.com</a> )，第一次记住密码后也很方便，主要是打字看图更合适些</p>
<p>画图工具和素材：https://t.zsxq.com/0enaoOUBp</p>
<p>知识星球：<a href="https://t.zsxq.com/0cSFEUh2J" target="_blank" rel="noopener noreferrer">https://t.zsxq.com/0cSFEUh2J</a> 或者看看星球的介绍：https://plantegg.github.io/2023/05/10/%E7%A8%8B%E5%BA%8F%E5%91%98%E6%A1%88%E4%BE%8B%E6%98%9F%E7%90%83%E4%BB%8B%E7%BB%8D/</p>
<p><img class="tw-inline" loading="lazy" src=https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20240324161113874.png   alt="image-20240324161113874"  ></p>
<!-- raw HTML omitted -->
]]></description>
</item><item>
    <title>你要不要搞副业</title>
    <link>https://plantegg.github.io/posts/%E4%BD%A0%E8%A6%81%E4%B8%8D%E8%A6%81%E6%90%9E%E5%89%AF%E4%B8%9A/</link>
    <pubDate>Thu, 21 Dec 2023 12:30:03 &#43;0000</pubDate><author>
        <name>作者</name>
    </author><guid>https://plantegg.github.io/posts/%E4%BD%A0%E8%A6%81%E4%B8%8D%E8%A6%81%E6%90%9E%E5%89%AF%E4%B8%9A/</guid>
    <description><![CDATA[<h1 id="你要不要搞副业" class="headerLink">
    <a href="#%e4%bd%a0%e8%a6%81%e4%b8%8d%e8%a6%81%e6%90%9e%e5%89%af%e4%b8%9a" class="header-mark"></a>你要不要搞副业？</h1><p>最近网上看到很多讨论搞副业和远程工作的，我也说点自己的经验+看法</p>
<p>当然这完全是出于个人认知肯定不是完全对的、也不一定适合你，看看当个参考，经验重在真实</p>
<h2 id="结论" class="headerLink">
    <a href="#%e7%bb%93%e8%ae%ba" class="header-mark"></a>结论</h2><p>年轻人最好的<strong>副业</strong>就是做好本职工作，深耕多积累自己的专业方向，只有当你在主业上再也无法精进的时候可以考虑跳槽或者<strong>副业</strong>， 搞副业相对适合大多年纪大的人，他们触碰到了自己的天花板，可以折腾玩玩等等</p>
<h2 id="我搞过的副业" class="headerLink">
    <a href="#%e6%88%91%e6%90%9e%e8%bf%87%e7%9a%84%e5%89%af%e4%b8%9a" class="header-mark"></a>我搞过的副业</h2><p>我搞过很多副业，多到我不好意思说出来。low到檫玻璃，大到开厂、买船，但是你看就是没去折腾抄房子(这些年只有炒房子的这个副业赚钱最稳、最快)。我也特别关心别人的副业、主业，熟的会打破砂锅问到底，所以下面说的只保证真实</p>
<h3 id="最大一笔副业" class="headerLink">
    <a href="#%e6%9c%80%e5%a4%a7%e4%b8%80%e7%ac%94%e5%89%af%e4%b8%9a" class="header-mark"></a>最大一笔副业</h3><p>通过SEO接了一个国外一个订单，交给长三角的工厂代工，赚了几十万，一次性，几乎没有成本</p>
<p>当时帮一个做工厂的朋友做网站，域名空间都是我掏钱(要给我我没好意思要，本身不值钱)，让留个邮箱厂长没有，后来留的我的。</p>
<p>然后来了几个咨询的介绍给厂里了，最后成了两个客户。但是有一个韩国客户(采购是广州一个提篮子的公司)，去厂里谈了几次细节谈不好，我就出马给把细节、打样、交货谈好了。</p>
<p>最后做好后发货直接到韩国，发一次运费几万块(到付)，其中有一批压坏了点那个区的顺丰经理过来道歉、给定做包装箱……</p>
<p>缺点是做完就没有了，那个产品不具有持续性，如果可以持续我应该能继续搞，另外借着这个客户去厂里跑得多，也发展了一些其他客户利润太薄加上后来真个行情不好就实在做不下去了，产品烂大街没人要了，珠三角那个生产模仿能力都太强了</p>
<p>之前介绍给厂里的两个客户，厂里自己对接的，其中一个厂里赚了一些钱，另外一个飞单好几十万，人家直接注销公司赖账的玩法，所以你看风险很多。不过要是去接这个单就不会出现这种情况，你最后尾款飞几千万把块我是有预期的，整个一个订单一分钱都没拿到简直就是傻子做生意，也纵容了坏人</p>
<p>比如很多人靠白嫖样品吃饭，我的策略是：样品、打样都要收钱，但是正式下单就抵扣货款，这么做能淘汰90%的虚假用户，节省自己的时间。比如便宜样品可以免费但是邮费到付、你亲自上门当然可以送几个。</p>
<h3 id="知识星球总结" class="headerLink">
    <a href="#%e7%9f%a5%e8%af%86%e6%98%9f%e7%90%83%e6%80%bb%e7%bb%93" class="header-mark"></a>知识星球总结</h3><p>做星球的话10万粉丝算是凑合，百万粉丝洒洒水啦，几万粉丝很痛苦</p>
<p>知识星球不适合IT技术类，他们有平台的流量，全靠自己运营；相对来说极客时间、慕课之类的能有平台给你导流；</p>
<p>星球的优点是入门门槛低</p>
<h4 id="我的星球数据" class="headerLink">
    <a href="#%e6%88%91%e7%9a%84%e6%98%9f%e7%90%83%e6%95%b0%e6%8d%ae" class="header-mark"></a>我的星球数据</h4><p>开星球的时候就承诺过了，要公布数据，当时也有一部分原因是对运营一个星球的数据有着好奇</p>
<p>9个月的星球运营500多成员，一年收入大几万，这还只是第一年，主要靠我的推特3万多粉丝里面划拉人员过去，第二年就不会有这么多成员了，因为你不可能一年再涨2万新粉丝</p>
<p>我的粉丝转化率是2%，算是还不错的了，所以如果你有10万粉丝大概能有1000-2000铁粉，那差不多一年能靠这些有个20来万的收入，所以算还凑合，可以简单养家。</p>
<p>上点我的星球运营真实数据，先看最重要的收入数据</p>
<p><img class="tw-inline" loading="lazy" src=https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20231221090708084.png   alt="image-20231221090708084"  ></p>
<p>星球刚开通前三个月收入最高，把一年的收入都提前拿走了，我这虽然才9个月，后面三个月也不用看了，几乎可以忽略：</p>
<p><img class="tw-inline" loading="lazy" src=https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20231221090758574.png   alt="image-20231221090758574"  ></p>
<p>运营效果，来估算转化率</p>
<p><img class="tw-inline" loading="lazy" src=https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20231221090420085.png   alt="image-20231221090420085"  ></p>
<p>我的星球讲究干货，宁缺毋滥，所以也没有其他星球常用的运维手段：作业、打卡(我恨死打卡这种傻逼行为了)</p>
<p>续费的话，我的星球是本月15号开通续费，我也没发通知，居然有人续费了，我猜应该是平台自动通知的：</p>
<p><img class="tw-inline" loading="lazy" src=https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20231221094647500.png   alt="image-20231221094647500"  ></p>
<h4 id="星球总结" class="headerLink">
    <a href="#%e6%98%9f%e7%90%83%e6%80%bb%e7%bb%93" class="header-mark"></a>星球总结</h4><ul>
<li>程序员成功的星球都是靠贩卖焦虑、offer、算法、面试，所以你真要想搞不要想着自己技术多好，要想想你有没有适合拿offer(这个活该赚钱)的本领</li>
<li>星球的活跃度靠打卡</li>
<li>搞一些有流量的好朋友互相吹捧、交换粉丝</li>
</ul>
<h3 id="带货" class="headerLink">
    <a href="#%e5%b8%a6%e8%b4%a7" class="header-mark"></a>带货</h3><p>这个门槛最低，你看到好的产品复制链接，到淘宝联盟上做下链接转换：https://pub.alimama.com/?forward=http%3A%2F%2Fpub.alimama.com%2Fportal%2Feffect%2Forder%2FoverviewOrder%2Fpage%2Findex.htm#!/index?curValue=nav_0&amp;forward=</p>
<p>到处发然后就能拿佣金了，目前国内个人带货扛把子就是个程序员，还是个高中毕业考不上大学找个培训班入行的程序员，会用Delphi写个群发工具，然后管理一堆微信、QQ群；让别人去帮他带货他能提成，这个段位又高级了一层</p>
<p>只靠自己的朋友圈肯定是不行的，起步得是百万粉丝才行，或者你有渠道总能搞到好的货品</p>
<p>给你们贴个我2023年10月的带货数据，当个参考，就是在3万粉丝的推特上带的货，转换率肯定是很惨的，为这131块的佣金你可以搜搜我发了多少推：</p>
<p><img class="tw-inline" loading="lazy" src=https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20231221092640430.png   alt="image-20231221092640430"  ></p>
<p>这个工作完全可以远程——算是你们理想中的远程工作吗？但是这个市场必然只能容纳很少的人，搞好了是可以发财的 :)</p>
<p>如果你口才好、煽动力强不去搞自播带货都对不住自己</p>
<h2 id="为什么不推荐搞副业" class="headerLink">
    <a href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e4%b8%8d%e6%8e%a8%e8%8d%90%e6%90%9e%e5%89%af%e4%b8%9a" class="header-mark"></a>为什么不推荐搞副业</h2><p>副业就是副业，要不怎么不叫主业呢？真搞好了、容易搞好必然有更多的人进来把他从副业做成主业！</p>
<p>先把主业搞好，尤其是年轻人。副业超过主业的毕竟是极少极少，还有点运气和背景成分</p>
<p>投入小(钱、时间都算)可以轻度参与混点经验，但不要抱太高期望</p>
<p>比如我就做过统计：</p>
<blockquote>
  <p>拉了一下记账软件上历年的数据，古早年代没记账就没有了，最近几年<strong>收入</strong>的话95%以上都是工资性收入，投资大概率是亏钱的，房租能有点、外快能有点，放到整体几乎可以忽略</p>
<p>开支的话也他妈主要是买房+房贷，如果不考虑首付+提前还贷倒是占比不夸张，日常开支真用不了多少钱，万幸几乎没有医疗开支</p>

</blockquote><p>主业确定没法精进、跳槽之类的，这时可以考虑下副业，当然如果你碰到了副业的“好机会” 也可以尝试一下</p>
<h2 id="建议" class="headerLink">
    <a href="#%e5%bb%ba%e8%ae%ae" class="header-mark"></a>建议</h2><p>先试试做做博客、公众号，看自己能运营到多少粉丝，你平时上网刷口水文章也是打发，然后试试带货</p>
<p>程序员方向基本不来钱，虽然这些行业很赚钱，但是这里也聚集了相对聪明人，你能搞他们也能搞相对更红海一些</p>
<p>可以跳出技术方向或者横向关联的方向多动动脑子，门槛低竞争就必然大，比如教英语和教程序员肯定英语的市场大多了</p>
<p>组织活动，比如组织大家打羽毛球、滑雪，羽毛球需要水平差不多的、人多一点才好玩，一般去场馆8折拿下场地，然后大家AA费用，赚这2折的差价，一次一般能赚80块，一周多组织几次，搞得好的话一个月也有2000块，关键是顺便自己打打球，真当副业的话也很香！再要多赚也很难，不过可续性很强</p>
<p>上次从黄牛手里买了个医院的专家号，2000块，你以为他们有渠道？其实他们建个微信群，找一堆有闲缺钱的人，接到需求了就到群里喊一嗓子，谁有本事抢到了从2000块里分几百，这种专家号根据难易程度从几百块到几千块，真是市场化了</p>
<p>当然还有一些灰产黑产大家就不要碰了我也不说了，大家耗子尾汁，赚钱是应该的但是要合法</p>
<p>写得很零散，没有什么详细的分析和套路，就是罗列事实和数据，你可以根据自己的情况来分析考虑</p>
<p>你要有什么好建议和经验欢迎在推特上 <a href="https://twitter.com/plantegg" target="_blank" rel="noopener noreferrer">@plantegg</a> 给我留言、私信，特别好的我会收集到博客上，这篇博客我会持续更新……</p>
<p>最后放个我<a href="https://plantegg.github.io/2024/02/20/%E5%BF%85%E8%AF%BB%20%E6%98%9F%E7%90%83%E6%88%90%E9%95%BF%E8%B7%AF%E5%BE%84/" target="_blank" rel="noopener noreferrer">星球的广告</a>：</p>
<!-- raw HTML omitted -->
]]></description>
</item><item>
    <title>程序员案例星球介绍</title>
    <link>https://plantegg.github.io/posts/%E7%A8%8B%E5%BA%8F%E5%91%98%E6%A1%88%E4%BE%8B%E6%98%9F%E7%90%83%E4%BB%8B%E7%BB%8D/</link>
    <pubDate>Wed, 10 May 2023 17:30:03 &#43;0000</pubDate><author>
        <name>作者</name>
    </author><guid>https://plantegg.github.io/posts/%E7%A8%8B%E5%BA%8F%E5%91%98%E6%A1%88%E4%BE%8B%E6%98%9F%E7%90%83%E4%BB%8B%E7%BB%8D/</guid>
    <description><![CDATA[<h1 id="程序员案例星球介绍" class="headerLink">
    <a href="#%e7%a8%8b%e5%ba%8f%e5%91%98%e6%a1%88%e4%be%8b%e6%98%9f%e7%90%83%e4%bb%8b%e7%bb%8d" class="header-mark"></a>程序员案例星球介绍</h1><h2 id="星球宗旨" class="headerLink">
    <a href="#%e6%98%9f%e7%90%83%e5%ae%97%e6%97%a8" class="header-mark"></a>【星球宗旨】</h2><p>平时一学就懂，但是实践总是不会，这是因为学习时<strong>缺少实践案例</strong>、场景导致学起来没有体感。我们总是习惯通过课程、教科书想要一次系统性地掌握很多东西，但最终什么都没掌握好。所以星球想通过案例打透一个或几个知识点，让你通过这几个知识点再去生长发芽形成体系</p>
<p><img class="tw-inline" loading="lazy" src=https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20230510191422496.png   alt="image-20230510191422496"  ></p>
<p>以上四个案例中的三个都给出了完整的重现环境、配置、重现步骤、抓包分析、日志结果、现场截图等等资料，保证100%重现问题并带你进行分析，让你感受实际工作一样的场景，真正做到学透一个案例顶3年工作经验</p>
<p><img class="tw-inline" loading="lazy" src=https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20230607085652520.png   alt="image-20230607085652520"  ></p>
<h2 id="关于案例" class="headerLink">
    <a href="#%e5%85%b3%e4%ba%8e%e6%a1%88%e4%be%8b" class="header-mark"></a>【关于案例】</h2><p>本星球剖析各种程序员疑难经典案例，搞清楚一个案例基本能横扫一个领域，其次在一个案例后再带3/5个相关小案例可以帮你丰富场景，多角度理解。用做会来解决学不会的问题。 案例典型普适性强，代表基础组件基本原理等知识。分析手段尽量通用，分析过程一定要逻辑合理每个疑问都能回答清晰。 最终实现在新领域用旧知识旧工具解决疑难问题，无招胜有招</p>
<p><img class="tw-inline" loading="lazy" src=https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20230510191512744.png   alt="image-20230510191512744"  ></p>
<h2 id="关于星主" class="headerLink">
    <a href="#%e5%85%b3%e4%ba%8e%e6%98%9f%e4%b8%bb" class="header-mark"></a>【关于星主】</h2><p>星主20多年的编程实践经历，疑难问题无数，擅长网络，性能，复杂系统的疑难问题分析，BAT背景，目前还在一线撕逼，作者的故事： <a href="https://plantegg.github.io/2022/01/01/%E4%B8%89%E4%B8%AA%E6%95%85%E4%BA%8B/" target="_blank" rel="noopener noreferrer">https://plantegg.github.io/2022/01/01/%E4%B8%89%E4%B8%AA%E6%95%85%E4%BA%8B/</a></p>
<h2 id="星球成员成果" class="headerLink">
    <a href="#%e6%98%9f%e7%90%83%e6%88%90%e5%91%98%e6%88%90%e6%9e%9c" class="header-mark"></a>【星球成员成果】</h2><ul>
<li>
<p><a href="https://yishenggong.com/2023/05/06/why-does-my-network-speed-drop-cn/" target="_blank" rel="noopener noreferrer">强龙难压地头蛇的故事</a> 这位星球成员刚大学毕业几个月，加入星球不到2个月</p>
</li>
<li>
<p>成员故事 <a href="https://liarlee.site/2023/05/08/Linux/Linux_RDS%20QPS%20%E4%B8%8B%E9%99%8D%E5%BC%95%E5%8F%91%E7%9A%84%E7%BD%91%E7%BB%9C%E6%B5%81%E6%8E%A7%E5%88%86%E6%9E%90%E8%AE%B0%E5%BD%95/" target="_blank" rel="noopener noreferrer">tcp协议和 os 网络系统的分析我之前真是一句都说不出来， 这次确实完整的走了一遍网络的部分。</a> 这位星球成员目前是 AWS 中国区员工</p>
</li>
</ul>
<p>强龙难压地头蛇的故事也引起各路技术大佬纷纷下场教年轻人如何学习：<a href="https://t.co/IBLCRzJem2" target="_blank" rel="noopener noreferrer">treeverse.app/view/RDzsOXjO</a></p>
<!-- raw HTML omitted -->
<h2 id="一年感悟" class="headerLink">
    <a href="#%e4%b8%80%e5%b9%b4%e6%84%9f%e6%82%9f" class="header-mark"></a>一年感悟</h2><p>用心做了一年知识星球后总结了一个我才懂的道理：发现大部分情况下看文章或者真实案例还是不够(更别提看教材了，教材更抽象)，大部分人即使当时看明白文章、案例了，事后还是不会用发懵</p>
<p>那经过这一年的总结怎么解决这个问题呢？我的摸索是：一定要把案例重现出来，把现场交给大家。通过这样三步：</p>
<p>\1. 看纸上案例，以及别人怎么分析、诊断</p>
<p>\2. 到自己跟着重现这个现象，自己试试去把案例里的分析步骤走一遍</p>
<p>\3. 最后通过视频或者直播我再演示一遍</p>
<p>这样才是真正和你经历了一样，但是这个过程完美了吗？不，人都是懒惰的，畏惧撘环境，碰到一点坑就掉里面出不来了，还怎么重现、诊断？</p>
<p>所以对于撘环境我也总结了一条经验：大家都买个一样的 ECS，OS 镜像也一样，这回老师学生就对齐(黑化)了操作环境，所以只要我把重现步骤写清楚基本你就能重现出来</p>
<p>剩下的就是跟着做了，如果这样你还学不会，那我就要退出江湖了，明年到期直接把星球关了</p>
<p>最后我准备了一张优惠券送给大家(or 链接复制到微信里打开有优惠券：https://t.zsxq.com/18PM8m2ln )，强烈建议你试试</p>
<p><img class="tw-inline" loading="lazy" src=https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20240324161113874.png   alt="image-20240324161113874"  ></p>
<p>讲个笑话：如果你问一个老程序员，在你的系统上看到超多 CLOSE_WAIT 的连接，大概99%的会建议你去改：tcp_tw_reuse 还不行再改tcp_tw_recycle，然后让你改 tcp_timestamps、tcp_max_tw_buckets等等，这老工程师懂得还真多、但又屁都不懂</p>
<h2 id="加入星球" class="headerLink">
    <a href="#%e5%8a%a0%e5%85%a5%e6%98%9f%e7%90%83" class="header-mark"></a>【加入星球】</h2><p>知识星球：<a href="https://t.zsxq.com/0cSFEUh2J" target="_blank" rel="noopener noreferrer">https://t.zsxq.com/0cSFEUh2J</a>，在这里有600多成员等着你和你一起分享案例</p>
<p><img class="tw-inline" loading="lazy" src=https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20230607090024270.png   alt="image-20230607090024270"  ></p>
]]></description>
</item></channel>
</rss>
