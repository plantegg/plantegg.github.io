<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>案例 - 标签 - plantegg</title>
        <link>http://localhost:1313/tags/%E6%A1%88%E4%BE%8B/</link>
        <description>案例 - 标签 - plantegg</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-Hans</language><lastBuildDate>Mon, 25 Mar 2024 17:30:03 &#43;0000</lastBuildDate><atom:link href="http://localhost:1313/tags/%E6%A1%88%E4%BE%8B/" rel="self" type="application/rss+xml" /><item>
    <title>无招胜有招--一周年总结</title>
    <link>http://localhost:1313/posts/%E6%97%A0%E6%8B%9B%E8%83%9C%E6%9C%89%E6%8B%9B/</link>
    <pubDate>Mon, 25 Mar 2024 17:30:03 &#43;0000</pubDate><author>
        <name>作者</name>
    </author><guid>http://localhost:1313/posts/%E6%97%A0%E6%8B%9B%E8%83%9C%E6%9C%89%E6%8B%9B/</guid>
    <description><![CDATA[<h1 id="无招胜有招--一周年总结" class="headerLink">
    <a href="#%e6%97%a0%e6%8b%9b%e8%83%9c%e6%9c%89%e6%8b%9b--%e4%b8%80%e5%91%a8%e5%b9%b4%e6%80%bb%e7%bb%93" class="header-mark"></a>无招胜有招&ndash;一周年总结</h1><p>大家抱着美好和雄赳赳的目标来到<a href="https://wx.zsxq.com/dweb2/index/group/15552551584552" target="_blank" rel="noopener noreferrer">这个知识星球</a>，开始的时候兴奋地以为找到了银弹(其实银弹是有的，在文章最后)，经过一段时间后大概率发现没什么变化，然后就回到了以前的老路子上，我觉得关键问题是你没获取到星球的精华，所以这篇我打算反复再唠叨一下</p>
<h2 id="知识效率-工程效率httpstzsxqcom14ibwajeq" class="headerLink">
    <a href="#%e7%9f%a5%e8%af%86%e6%95%88%e7%8e%87-%e5%b7%a5%e7%a8%8b%e6%95%88%e7%8e%87httpstzsxqcom14ibwajeq" class="header-mark"></a><strong><a href="https://t.zsxq.com/14IBWajEq" target="_blank" rel="noopener noreferrer">知识效率 工程效率</a></strong></h2><p>虽然我们现在通过这篇《<a href="https://t.zsxq.com/14IBWajEq" target="_blank" rel="noopener noreferrer">知识效率 工程效率</a>》知道了两者的差别， 但是还是需要记住通过积累可以将我们的学习能力从工程效率升级到知识效率(厚积薄发)，大部分时候没有做到薄发，是因为你以为理解了、积累了实际没理解</p>
<h2 id="核心知识点" class="headerLink">
    <a href="#%e6%a0%b8%e5%bf%83%e7%9f%a5%e8%af%86%e7%82%b9" class="header-mark"></a><strong>核心知识点</strong></h2><p>尽力寻找每个领域的核心知识点，核心知识点的定义就是通过一两个这样的知识点能撬动对整个领域的理解，也就是常说的<a href="http://www.baidu.com/link?url=9Hv8LOY09wOqjLFX-UuX35AxJjTDjmkHcSPm3ReeTWO-4rH-46hmz6aR4b-WP7PwZHUGkxEBhWt1iqHkM8uM56Au6Ada4lg6angCByW3J-BLDkxE45Aq-QqOTWzRspa4" target="_blank" rel="noopener noreferrer">纲挈目张</a></p>
<p>比如网络领域里：一个网络包是怎么流转的+抓包。假如你理解<a href="https://plantegg.github.io/2019/05/15/%e5%b0%b1%e6%98%af%e8%a6%81%e4%bd%a0%e6%87%82%e7%bd%91%e7%bb%9c--%e4%b8%80%e4%b8%aa%e7%bd%91%e7%bb%9c%e5%8c%85%e7%9a%84%e6%97%85%e7%a8%8b/" target="_blank" rel="noopener noreferrer">网络包的流转后</a>再去看<a href="https://plantegg.github.io/2019/06/20/%e5%b0%b1%e6%98%af%e8%a6%81%e4%bd%a0%e6%87%82%e8%b4%9f%e8%bd%bd%e5%9d%87%e8%a1%a1--lvs%e5%92%8c%e8%bd%ac%e5%8f%91%e6%a8%a1%e5%bc%8f/" target="_blank" rel="noopener noreferrer">LVS 负载均衡的原理</a>你就发现只需要看一次你就能很好掌握LVS各个负载均衡的本质，而在这之前你反复看反复忘。掌握了这个知识点基本就可以通关整个领域，剩下的只是无招胜有招碰到一个挨个积累的问题了。</p>
<p>比如CPU领域理解超线程+IPC+会用perf和内存延时，理解超线程的本质是为什么一个核能干两个核的工作(这和操作系统的分时多任务背后原理是想通的)，那是因为我们的程序没法吃满流水线(也就是没法用完一个核的计算能力，用IPC去衡量)，没吃满闲置的时候就可以虚拟给另外一个进程用，比如CPU 跑起来最高IPC都能到4，但是无论你找一个Java还是MySQL 去看他们的IPC基本都在1以内，纯计算场景的IPC会高一点，IPC 可以到4但只跑到1的话也就是只用满了25%的能力，那当然可以再虚出来一个超线程提高效率。IPC 之所以低就是因为内存延时大，这么多年CPU的处理能力一直按摩尔定律在提升但是内存延时没有怎么提升，导致基本上我们常见的业务场景(Nginx/MySQL/Redis 等)都是CPU在等从内存取数据(所以搞了L1、L2、L3一堆cache)。</p>
<p>发散一下或者说<strong>留个作业</strong>你去看看<a href="https://plantegg.github.io/2021/05/14/%e5%8d%81%e5%b9%b4%e5%90%8e%e6%95%b0%e6%8d%ae%e5%ba%93%e8%bf%98%e6%98%af%e4%b8%8d%e6%95%a2%e6%8b%a5%e6%8a%b1NUMA/" target="_blank" rel="noopener noreferrer">NUMA 的原理或者说本质就是为了让CPU知道就近分配读取内存以提升效率</a>。</p>
<p>你看<strong>整本计算机组成原理+性能的本质都在这一个知识点的范围内进行延伸和突破</strong>。</p>
<p>如果你发现一个核心知识点也欢迎写成博客文章分享出来</p>
<h2 id="读日志错误信息" class="headerLink">
    <a href="#%e8%af%bb%e6%97%a5%e5%bf%97%e9%94%99%e8%af%af%e4%bf%a1%e6%81%af" class="header-mark"></a><strong>读日志、错误信息</strong></h2><p>我的经验只是大概20%左右的程序员会去耐心读别人的日志、报错信息，大部分摊摊手求助、放弃了</p>
<p>日志是最好的学习机会，我知道别人的日志写得很烂，但是你要能耐心多琢磨一点就会比别人更专业一点</p>
<h2 id="对知识的可观测性" class="headerLink">
    <a href="#%e5%af%b9%e7%9f%a5%e8%af%86%e7%9a%84%e5%8f%af%e8%a7%82%e6%b5%8b%e6%80%a7" class="header-mark"></a><strong>对知识的可观测性</strong></h2><p>抓包、perf的使用这些平时要多积累，这点没有捷径，一个好的工程师肯定有<a href="https://plantegg.github.io/2016/10/12/ss%e7%94%a8%e6%b3%95%e5%a4%a7%e5%85%a8/" target="_blank" rel="noopener noreferrer">一堆好的锤子、瑞士军刀、工具包</a>的。在你掌握了知识点后要转化为工作效率，就得多积累这些工具，很多次我们碰到一个好的问题没分析出来是因为我们这种没有门槛的积累不够导致放弃了</p>
<p>比如需要抓包确认下，不会，一看tcpdump 一堆参数头疼放弃；比如想要知道长连接还是短连接，或者自己设置的长连接有没有生效，不会用netstat -o 这个参数去确认等；比如要下载个源码自己make/install 中间报了几个错误不仔细看放弃；</p>
<p>反过来回到我们所说的工程效率，就是靠这些工具帮你实现可视、可以触摸，网络之所以大多数同学在大学都学过但是最后基本学懂，就是因为这些网络的东东你只看理论很难立即，但是让你抓过一次包分析下就会恍然大悟——这就是关键门槛你能跨过去</p>
<h2 id="好习惯" class="headerLink">
    <a href="#%e5%a5%bd%e4%b9%a0%e6%83%af" class="header-mark"></a><strong>好习惯</strong></h2><p>在星球里我更希望你带走一个好的习惯而不是一个具体知识点，虽然星球里的具体知识点、案例胜过很多教材，但他们总有过时、用不上的时候，唯有好的习惯可以跟随你，帮你实现无招胜有招</p>
<h3 id="记笔记" class="headerLink">
    <a href="#%e8%ae%b0%e7%ac%94%e8%ae%b0" class="header-mark"></a><strong>记笔记</strong></h3><p>放低身段，不要高估自己的能力(认为自己是知识效率)，放低后你要怎么做呢：记笔记、记笔记、记笔记</p>
<p>只要是你在学习就要或者看书、看资料的时候觉得自己有点通透了，赶紧记录下来，因为大概率一个星期你就忘了，半年你就完全不记得自己以前看过一次了，我好多次看到一篇好文章就感叹自己学到了，兴奋地拉到文章最后想去评论下，结果发现居然有了自己的评论在下面 :)</p>
<h3 id="动手" class="headerLink">
    <a href="#%e5%8a%a8%e6%89%8b" class="header-mark"></a><strong>动手</strong></h3><p>动手，看到后理解了，也记了笔记，其实最好还是要自己去重现，记下自己看到的现象和理解，动手又会有一堆门槛，搭环境、客观则、怎么验证等等，这个时候我前面说的可观测性里面积累的一大堆工具可以让你如有神助、重现起来效率就是比别人高</p>
<h3 id="汇总输出" class="headerLink">
    <a href="#%e6%b1%87%e6%80%bb%e8%be%93%e5%87%ba" class="header-mark"></a><strong>汇总输出</strong></h3><p>最后笔记记完还没完，笔记基本是零散的，你反复积累后到了一定的时机就是要把他们总结汇总成一篇完整度较高的博客文章，这里当然有自己的虚荣心在这里，但更多的是为了自己查询方便，有了新的理解或者使用姿势我经常更新补充10年前的博客文章，不会写一篇新的，这个补充知识让我的知识结构更完善，不是为了多发一篇博文，我现在解决问题、使用工具基本要靠翻自己的博客文章照着操作</p>
<h3 id="慢就是快少就是多" class="headerLink">
    <a href="#%e6%85%a2%e5%b0%b1%e6%98%af%e5%bf%ab%e5%b0%91%e5%b0%b1%e6%98%af%e5%a4%9a" class="header-mark"></a><strong>慢就是快、少就是多</strong></h3><p>往往我们喜欢求快，以为自己一看就懂；求多以为自己越看的多越厉害</p>
<h3 id="不要等着时间流投喂" class="headerLink">
    <a href="#%e4%b8%8d%e8%a6%81%e7%ad%89%e7%9d%80%e6%97%b6%e9%97%b4%e6%b5%81%e6%8a%95%e5%96%82" class="header-mark"></a><strong>不要等着时间流投喂</strong></h3><p>看这篇置顶：https://t.zsxq.com/14Yel6KBg</p>
<h2 id="纲举目张" class="headerLink">
    <a href="#%e7%ba%b2%e4%b8%be%e7%9b%ae%e5%bc%a0" class="header-mark"></a><strong>纲举目张</strong></h2><p>对公司的业务、一个软件的运转流程都要尽量做到理解</p>
<p>比如学MySQL 要尽量知道从一条SQL 怎么进来，进行哪些处理后得到了查询结果；比如前面讲过的一个网络包是怎么到达对端的；比如你们公司的请求是怎么从客户端到达服务端(中间经过了LVS、Nginx吗)，服务端又是那些服务得依赖和调用，有没有Redis、MQ、Database，最后数据又是怎么返回的，我知道这在一个公司很难(屎山很复杂)，但目前没有更好的方法让你快速掌握并立足</p>
<p>为什么出现问题后总有一两个人很快能猜出来问题可能在哪个环节，这一部分是经验但更多的是对系统的了解，你都不知道有Redis存在一旦出错了你肯定猜不到Redis这里来</p>
<p>可以看看我之前说的实习生的故事，完全真实哈：</p>
<blockquote>
  <p>讲一个我碰到的实习生的事情</p>
<p>北邮毕业直接后直接到我司实习</p>
<p>特点：英语好、动手能力强、爱琢磨，除了程序、电脑没有其它爱好 :)</p>
<p>实习期间因为英语好把我司文档很快就翻烂了，对产品、业务逻辑的理解基本是顶尖的</p>
<p>实习期间很快成为所有老员工的红人，都离不开他，搭环境、了解业务流程</p>
<p>因为别人的习惯都是盯着自己眼前的这一趴，只有他对业务非常熟悉</p>
<p>实习后很快就转正了，又3年后transfer 去了美国总部</p>
<p>连女朋友都是老员工给牵线的，最后领证一起去了美国。为啥老员工这么热情，是大家真心喜欢他</p>

</blockquote><p>再看看张一鸣自述的第一年的工作：</p>
<p><img class="tw-inline" loading="lazy" src=https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/FuQNw04aH2PQwnApyAKY1dXRh-nt.png   alt="img"  ></p>
<h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a><strong>总结</strong></h2><p>我前面所说的我也没做太好，希望大家能做得更好，我第一次感受无招胜有招就是<a href="https://plantegg.github.io/2022/01/01/%e4%b8%89%e4%b8%aa%e6%95%85%e4%ba%8b/" target="_blank" rel="noopener noreferrer">故事一里面</a>，到故事二过去差不多10年，这10年里我一直在琢磨怎么才能无招胜有招，也有在积累，但是花了10年肯定效率不算高，所以在星球里我希望通过我的经验帮你们缩短一些时间</p>
<p>上面讲再多如果你只是看看那根本还是没用，买再多的课也没用，关键是看触动后能否有点改变。你可以从里面试着挑几个你认为容易操作，比如记笔记、比如不要等着时间流投喂，或者有感触的试试先改变或者遵循下看看能不能获得一些变化进而形成正向循环</p>
<p>或者从评论里开始说说你星球这一年真正有哪些改变、学到了啥、你的感悟，不方便的也可以微信我私聊一下</p>
<p>这篇就当成整个星球学习的一个总结吧</p>
]]></description>
</item><item>
    <title>程序员案例星球介绍</title>
    <link>http://localhost:1313/posts/%E7%A8%8B%E5%BA%8F%E5%91%98%E6%A1%88%E4%BE%8B%E6%98%9F%E7%90%83%E4%BB%8B%E7%BB%8D/</link>
    <pubDate>Wed, 10 May 2023 17:30:03 &#43;0000</pubDate><author>
        <name>作者</name>
    </author><guid>http://localhost:1313/posts/%E7%A8%8B%E5%BA%8F%E5%91%98%E6%A1%88%E4%BE%8B%E6%98%9F%E7%90%83%E4%BB%8B%E7%BB%8D/</guid>
    <description><![CDATA[<h1 id="程序员案例星球介绍" class="headerLink">
    <a href="#%e7%a8%8b%e5%ba%8f%e5%91%98%e6%a1%88%e4%be%8b%e6%98%9f%e7%90%83%e4%bb%8b%e7%bb%8d" class="header-mark"></a>程序员案例星球介绍</h1><h2 id="星球宗旨" class="headerLink">
    <a href="#%e6%98%9f%e7%90%83%e5%ae%97%e6%97%a8" class="header-mark"></a>【星球宗旨】</h2><p>平时一学就懂，但是实践总是不会，这是因为学习时<strong>缺少实践案例</strong>、场景导致学起来没有体感。我们总是习惯通过课程、教科书想要一次系统性地掌握很多东西，但最终什么都没掌握好。所以星球想通过案例打透一个或几个知识点，让你通过这几个知识点再去生长发芽形成体系</p>
<p><img class="tw-inline" loading="lazy" src=https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20230510191422496.png   alt="image-20230510191422496"  ></p>
<p>以上四个案例中的三个都给出了完整的重现环境、配置、重现步骤、抓包分析、日志结果、现场截图等等资料，保证100%重现问题并带你进行分析，让你感受实际工作一样的场景，真正做到学透一个案例顶3年工作经验</p>
<p><img class="tw-inline" loading="lazy" src=https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20230607085652520.png   alt="image-20230607085652520"  ></p>
<h2 id="关于案例" class="headerLink">
    <a href="#%e5%85%b3%e4%ba%8e%e6%a1%88%e4%be%8b" class="header-mark"></a>【关于案例】</h2><p>本星球剖析各种程序员疑难经典案例，搞清楚一个案例基本能横扫一个领域，其次在一个案例后再带3/5个相关小案例可以帮你丰富场景，多角度理解。用做会来解决学不会的问题。 案例典型普适性强，代表基础组件基本原理等知识。分析手段尽量通用，分析过程一定要逻辑合理每个疑问都能回答清晰。 最终实现在新领域用旧知识旧工具解决疑难问题，无招胜有招</p>
<p><img class="tw-inline" loading="lazy" src=https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20230510191512744.png   alt="image-20230510191512744"  ></p>
<h2 id="关于星主" class="headerLink">
    <a href="#%e5%85%b3%e4%ba%8e%e6%98%9f%e4%b8%bb" class="header-mark"></a>【关于星主】</h2><p>星主20多年的编程实践经历，疑难问题无数，擅长网络，性能，复杂系统的疑难问题分析，BAT背景，目前还在一线撕逼，作者的故事： <a href="https://plantegg.github.io/2022/01/01/%E4%B8%89%E4%B8%AA%E6%95%85%E4%BA%8B/" target="_blank" rel="noopener noreferrer">https://plantegg.github.io/2022/01/01/%E4%B8%89%E4%B8%AA%E6%95%85%E4%BA%8B/</a></p>
<h2 id="星球成员成果" class="headerLink">
    <a href="#%e6%98%9f%e7%90%83%e6%88%90%e5%91%98%e6%88%90%e6%9e%9c" class="header-mark"></a>【星球成员成果】</h2><ul>
<li>
<p><a href="https://yishenggong.com/2023/05/06/why-does-my-network-speed-drop-cn/" target="_blank" rel="noopener noreferrer">强龙难压地头蛇的故事</a> 这位星球成员刚大学毕业几个月，加入星球不到2个月</p>
</li>
<li>
<p>成员故事 <a href="https://liarlee.site/2023/05/08/Linux/Linux_RDS%20QPS%20%E4%B8%8B%E9%99%8D%E5%BC%95%E5%8F%91%E7%9A%84%E7%BD%91%E7%BB%9C%E6%B5%81%E6%8E%A7%E5%88%86%E6%9E%90%E8%AE%B0%E5%BD%95/" target="_blank" rel="noopener noreferrer">tcp协议和 os 网络系统的分析我之前真是一句都说不出来， 这次确实完整的走了一遍网络的部分。</a> 这位星球成员目前是 AWS 中国区员工</p>
</li>
</ul>
<p>强龙难压地头蛇的故事也引起各路技术大佬纷纷下场教年轻人如何学习：<a href="https://t.co/IBLCRzJem2" target="_blank" rel="noopener noreferrer">treeverse.app/view/RDzsOXjO</a></p>
<!-- raw HTML omitted -->
<h2 id="一年感悟" class="headerLink">
    <a href="#%e4%b8%80%e5%b9%b4%e6%84%9f%e6%82%9f" class="header-mark"></a>一年感悟</h2><p>用心做了一年知识星球后总结了一个我才懂的道理：发现大部分情况下看文章或者真实案例还是不够(更别提看教材了，教材更抽象)，大部分人即使当时看明白文章、案例了，事后还是不会用发懵</p>
<p>那经过这一年的总结怎么解决这个问题呢？我的摸索是：一定要把案例重现出来，把现场交给大家。通过这样三步：</p>
<p>\1. 看纸上案例，以及别人怎么分析、诊断</p>
<p>\2. 到自己跟着重现这个现象，自己试试去把案例里的分析步骤走一遍</p>
<p>\3. 最后通过视频或者直播我再演示一遍</p>
<p>这样才是真正和你经历了一样，但是这个过程完美了吗？不，人都是懒惰的，畏惧撘环境，碰到一点坑就掉里面出不来了，还怎么重现、诊断？</p>
<p>所以对于撘环境我也总结了一条经验：大家都买个一样的 ECS，OS 镜像也一样，这回老师学生就对齐(黑化)了操作环境，所以只要我把重现步骤写清楚基本你就能重现出来</p>
<p>剩下的就是跟着做了，如果这样你还学不会，那我就要退出江湖了，明年到期直接把星球关了</p>
<p>最后我准备了一张优惠券送给大家(or 链接复制到微信里打开有优惠券：https://t.zsxq.com/18PM8m2ln )，强烈建议你试试</p>
<p><img class="tw-inline" loading="lazy" src=https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20240324161113874.png   alt="image-20240324161113874"  ></p>
<p>讲个笑话：如果你问一个老程序员，在你的系统上看到超多 CLOSE_WAIT 的连接，大概99%的会建议你去改：tcp_tw_reuse 还不行再改tcp_tw_recycle，然后让你改 tcp_timestamps、tcp_max_tw_buckets等等，这老工程师懂得还真多、但又屁都不懂</p>
<h2 id="加入星球" class="headerLink">
    <a href="#%e5%8a%a0%e5%85%a5%e6%98%9f%e7%90%83" class="header-mark"></a>【加入星球】</h2><p>知识星球：<a href="https://t.zsxq.com/0cSFEUh2J" target="_blank" rel="noopener noreferrer">https://t.zsxq.com/0cSFEUh2J</a>，在这里有600多成员等着你和你一起分享案例</p>
<p><img class="tw-inline" loading="lazy" src=https://cdn.jsdelivr.net/gh/plantegg/plantegg.github.io/images/951413iMgBlog/image-20230607090024270.png   alt="image-20230607090024270"  ></p>
]]></description>
</item></channel>
</rss>
